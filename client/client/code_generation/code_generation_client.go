// Code generated by go-swagger; DO NOT EDIT.

package code_generation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new code generation API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new code generation API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new code generation API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for code generation API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetInfraImportPresets(params *GetInfraImportPresetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportPresetsOK, error)

	GetInfraImportResource(params *GetInfraImportResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportResourceOK, error)

	GetInfraImportResources(params *GetInfraImportResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportResourcesOK, error)

	GetTerraformProvider(params *GetTerraformProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderOK, error)

	GetTerraformProviderDataSource(params *GetTerraformProviderDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderDataSourceOK, error)

	GetTerraformProviderDataSources(params *GetTerraformProviderDataSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderDataSourcesOK, error)

	GetTerraformProviderResource(params *GetTerraformProviderResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderResourceOK, error)

	GetTerraformProviderResources(params *GetTerraformProviderResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderResourcesOK, error)

	GetTerraformProviders(params *GetTerraformProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProvidersOK, error)

	TerraformJSONToHCL(params *TerraformJSONToHCLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformJSONToHCLOK, error)

	TerraformValidate(params *TerraformValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformValidateOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetInfraImportPresets List Infra Import Presets
*/
func (a *Client) GetInfraImportPresets(params *GetInfraImportPresetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportPresetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfraImportPresetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInfraImportPresets",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/presets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfraImportPresetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfraImportPresetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfraImportPresetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfraImportResource List Provider's Resource
*/
func (a *Client) GetInfraImportResource(params *GetInfraImportResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfraImportResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInfraImportResource",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/resources/{resource_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfraImportResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfraImportResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfraImportResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfraImportResources List infrastructure import provider's resources
*/
func (a *Client) GetInfraImportResources(params *GetInfraImportResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInfraImportResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfraImportResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInfraImportResources",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/infra_import/providers/{provider_canonical}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfraImportResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfraImportResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfraImportResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProvider Get the information of the Provider
*/
func (a *Client) GetTerraformProvider(params *GetTerraformProviderParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProviderParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProvider",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProviderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProviderOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProviderDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProviderDataSource Get the information of the DataSource
*/
func (a *Client) GetTerraformProviderDataSource(params *GetTerraformProviderDataSourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderDataSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProviderDataSourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProviderDataSource",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/data_sources/{resource_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProviderDataSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProviderDataSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProviderDataSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProviderDataSources Return all the DataSources for the Provider
*/
func (a *Client) GetTerraformProviderDataSources(params *GetTerraformProviderDataSourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderDataSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProviderDataSourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProviderDataSources",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/data_sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProviderDataSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProviderDataSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProviderDataSourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProviderResource Get the information of the Resource
*/
func (a *Client) GetTerraformProviderResource(params *GetTerraformProviderResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProviderResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProviderResource",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/resources/{resource_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProviderResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProviderResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProviderResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProviderResources Return all the Resources for the Provider
*/
func (a *Client) GetTerraformProviderResources(params *GetTerraformProviderResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProviderResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProviderResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProviderResources",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers/{provider_canonical}/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProviderResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProviderResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProviderResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetTerraformProviders Return all the Providers
*/
func (a *Client) GetTerraformProviders(params *GetTerraformProvidersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetTerraformProvidersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetTerraformProvidersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getTerraformProviders",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/providers",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetTerraformProvidersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetTerraformProvidersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetTerraformProvidersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformJSONToHCL Transforms a JSON to a HCL
*/
func (a *Client) TerraformJSONToHCL(params *TerraformJSONToHCLParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformJSONToHCLOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformJSONToHCLParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "terraformJSONToHCL",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/jsontohcl",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TerraformJSONToHCLReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformJSONToHCLOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformJSONToHCLDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
TerraformValidate Validates a TF configuration
*/
func (a *Client) TerraformValidate(params *TerraformValidateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*TerraformValidateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewTerraformValidateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "terraformValidate",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/code_generation/terraform/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &TerraformValidateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*TerraformValidateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*TerraformValidateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
