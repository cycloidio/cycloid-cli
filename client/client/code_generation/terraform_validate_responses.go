// Code generated by go-swagger; DO NOT EDIT.

package code_generation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// TerraformValidateReader is a Reader for the TerraformValidate structure.
type TerraformValidateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *TerraformValidateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewTerraformValidateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewTerraformValidateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewTerraformValidateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewTerraformValidateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewTerraformValidateOK creates a TerraformValidateOK with default headers values
func NewTerraformValidateOK() *TerraformValidateOK {
	return &TerraformValidateOK{}
}

/*
TerraformValidateOK describes a response with status code 200, with default header values.

The result of validating the provided configuration
*/
type TerraformValidateOK struct {
	Payload *TerraformValidateOKBody
}

// IsSuccess returns true when this terraform validate o k response has a 2xx status code
func (o *TerraformValidateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this terraform validate o k response has a 3xx status code
func (o *TerraformValidateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this terraform validate o k response has a 4xx status code
func (o *TerraformValidateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this terraform validate o k response has a 5xx status code
func (o *TerraformValidateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this terraform validate o k response a status code equal to that given
func (o *TerraformValidateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the terraform validate o k response
func (o *TerraformValidateOK) Code() int {
	return 200
}

func (o *TerraformValidateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateOK %s", 200, payload)
}

func (o *TerraformValidateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateOK %s", 200, payload)
}

func (o *TerraformValidateOK) GetPayload() *TerraformValidateOKBody {
	return o.Payload
}

func (o *TerraformValidateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(TerraformValidateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTerraformValidateForbidden creates a TerraformValidateForbidden with default headers values
func NewTerraformValidateForbidden() *TerraformValidateForbidden {
	return &TerraformValidateForbidden{}
}

/*
TerraformValidateForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type TerraformValidateForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this terraform validate forbidden response has a 2xx status code
func (o *TerraformValidateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this terraform validate forbidden response has a 3xx status code
func (o *TerraformValidateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this terraform validate forbidden response has a 4xx status code
func (o *TerraformValidateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this terraform validate forbidden response has a 5xx status code
func (o *TerraformValidateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this terraform validate forbidden response a status code equal to that given
func (o *TerraformValidateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the terraform validate forbidden response
func (o *TerraformValidateForbidden) Code() int {
	return 403
}

func (o *TerraformValidateForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateForbidden %s", 403, payload)
}

func (o *TerraformValidateForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateForbidden %s", 403, payload)
}

func (o *TerraformValidateForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *TerraformValidateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTerraformValidateUnprocessableEntity creates a TerraformValidateUnprocessableEntity with default headers values
func NewTerraformValidateUnprocessableEntity() *TerraformValidateUnprocessableEntity {
	return &TerraformValidateUnprocessableEntity{}
}

/*
TerraformValidateUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type TerraformValidateUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this terraform validate unprocessable entity response has a 2xx status code
func (o *TerraformValidateUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this terraform validate unprocessable entity response has a 3xx status code
func (o *TerraformValidateUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this terraform validate unprocessable entity response has a 4xx status code
func (o *TerraformValidateUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this terraform validate unprocessable entity response has a 5xx status code
func (o *TerraformValidateUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this terraform validate unprocessable entity response a status code equal to that given
func (o *TerraformValidateUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the terraform validate unprocessable entity response
func (o *TerraformValidateUnprocessableEntity) Code() int {
	return 422
}

func (o *TerraformValidateUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateUnprocessableEntity %s", 422, payload)
}

func (o *TerraformValidateUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidateUnprocessableEntity %s", 422, payload)
}

func (o *TerraformValidateUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *TerraformValidateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewTerraformValidateDefault creates a TerraformValidateDefault with default headers values
func NewTerraformValidateDefault(code int) *TerraformValidateDefault {
	return &TerraformValidateDefault{
		_statusCode: code,
	}
}

/*
TerraformValidateDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type TerraformValidateDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this terraform validate default response has a 2xx status code
func (o *TerraformValidateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this terraform validate default response has a 3xx status code
func (o *TerraformValidateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this terraform validate default response has a 4xx status code
func (o *TerraformValidateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this terraform validate default response has a 5xx status code
func (o *TerraformValidateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this terraform validate default response a status code equal to that given
func (o *TerraformValidateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the terraform validate default response
func (o *TerraformValidateDefault) Code() int {
	return o._statusCode
}

func (o *TerraformValidateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidate default %s", o._statusCode, payload)
}

func (o *TerraformValidateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/code_generation/terraform/validate][%d] terraformValidate default %s", o._statusCode, payload)
}

func (o *TerraformValidateDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *TerraformValidateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
TerraformValidateOKBody terraform validate o k body
swagger:model TerraformValidateOKBody
*/
type TerraformValidateOKBody struct {

	// data
	// Required: true
	Data *models.TerraformValidationResult `json:"data"`
}

// Validate validates this terraform validate o k body
func (o *TerraformValidateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TerraformValidateOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("terraformValidateOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraformValidateOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraformValidateOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this terraform validate o k body based on the context it is used
func (o *TerraformValidateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *TerraformValidateOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("terraformValidateOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("terraformValidateOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *TerraformValidateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *TerraformValidateOKBody) UnmarshalBinary(b []byte) error {
	var res TerraformValidateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
