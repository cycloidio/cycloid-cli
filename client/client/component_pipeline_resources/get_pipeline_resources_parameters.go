// Code generated by go-swagger; DO NOT EDIT.

package component_pipeline_resources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetPipelineResourcesParams creates a new GetPipelineResourcesParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetPipelineResourcesParams() *GetPipelineResourcesParams {
	return &GetPipelineResourcesParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetPipelineResourcesParamsWithTimeout creates a new GetPipelineResourcesParams object
// with the ability to set a timeout on a request.
func NewGetPipelineResourcesParamsWithTimeout(timeout time.Duration) *GetPipelineResourcesParams {
	return &GetPipelineResourcesParams{
		timeout: timeout,
	}
}

// NewGetPipelineResourcesParamsWithContext creates a new GetPipelineResourcesParams object
// with the ability to set a context for a request.
func NewGetPipelineResourcesParamsWithContext(ctx context.Context) *GetPipelineResourcesParams {
	return &GetPipelineResourcesParams{
		Context: ctx,
	}
}

// NewGetPipelineResourcesParamsWithHTTPClient creates a new GetPipelineResourcesParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetPipelineResourcesParamsWithHTTPClient(client *http.Client) *GetPipelineResourcesParams {
	return &GetPipelineResourcesParams{
		HTTPClient: client,
	}
}

/*
GetPipelineResourcesParams contains all the parameters to send to the API endpoint

	for the get pipeline resources operation.

	Typically these are written to a http.Request.
*/
type GetPipelineResourcesParams struct {

	/* ComponentCanonical.

	   A canonical of a component.
	*/
	ComponentCanonical string

	/* EnvironmentCanonical.

	   The environment canonical to use as part of a path
	*/
	EnvironmentCanonical string

	/* InpathPipelineName.

	   A pipeline name
	*/
	InpathPipelineName string

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* PageIndex.

	   The page number to request. The first page is 1.

	   Format: uint32
	   Default: 1
	*/
	PageIndex *uint32

	/* PageSize.

	   The number of items at most which the response can have.

	   Format: uint32
	   Default: 1000
	*/
	PageSize *uint32

	/* ProjectCanonical.

	   A canonical of a project.
	*/
	ProjectCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get pipeline resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPipelineResourcesParams) WithDefaults() *GetPipelineResourcesParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get pipeline resources params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetPipelineResourcesParams) SetDefaults() {
	var (
		pageIndexDefault = uint32(1)

		pageSizeDefault = uint32(1000)
	)

	val := GetPipelineResourcesParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithTimeout(timeout time.Duration) *GetPipelineResourcesParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithContext(ctx context.Context) *GetPipelineResourcesParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithHTTPClient(client *http.Client) *GetPipelineResourcesParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithComponentCanonical adds the componentCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithComponentCanonical(componentCanonical string) *GetPipelineResourcesParams {
	o.SetComponentCanonical(componentCanonical)
	return o
}

// SetComponentCanonical adds the componentCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetComponentCanonical(componentCanonical string) {
	o.ComponentCanonical = componentCanonical
}

// WithEnvironmentCanonical adds the environmentCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithEnvironmentCanonical(environmentCanonical string) *GetPipelineResourcesParams {
	o.SetEnvironmentCanonical(environmentCanonical)
	return o
}

// SetEnvironmentCanonical adds the environmentCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetEnvironmentCanonical(environmentCanonical string) {
	o.EnvironmentCanonical = environmentCanonical
}

// WithInpathPipelineName adds the inpathPipelineName to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithInpathPipelineName(inpathPipelineName string) *GetPipelineResourcesParams {
	o.SetInpathPipelineName(inpathPipelineName)
	return o
}

// SetInpathPipelineName adds the inpathPipelineName to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetInpathPipelineName(inpathPipelineName string) {
	o.InpathPipelineName = inpathPipelineName
}

// WithOrganizationCanonical adds the organizationCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithOrganizationCanonical(organizationCanonical string) *GetPipelineResourcesParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithPageIndex adds the pageIndex to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithPageIndex(pageIndex *uint32) *GetPipelineResourcesParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetPageIndex(pageIndex *uint32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithPageSize(pageSize *uint32) *GetPipelineResourcesParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WithProjectCanonical adds the projectCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) WithProjectCanonical(projectCanonical string) *GetPipelineResourcesParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get pipeline resources params
func (o *GetPipelineResourcesParams) SetProjectCanonical(projectCanonical string) {
	o.ProjectCanonical = projectCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetPipelineResourcesParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param component_canonical
	if err := r.SetPathParam("component_canonical", o.ComponentCanonical); err != nil {
		return err
	}

	// path param environment_canonical
	if err := r.SetPathParam("environment_canonical", o.EnvironmentCanonical); err != nil {
		return err
	}

	// path param inpath_pipeline_name
	if err := r.SetPathParam("inpath_pipeline_name", o.InpathPipelineName); err != nil {
		return err
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param page_index
		var qrPageIndex uint32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatUint32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page_index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	// path param project_canonical
	if err := r.SetPathParam("project_canonical", o.ProjectCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
