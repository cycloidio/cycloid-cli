// Code generated by go-swagger; DO NOT EDIT.

package component_pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// DiffPipelineReader is a Reader for the DiffPipeline structure.
type DiffPipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *DiffPipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewDiffPipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewDiffPipelineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewDiffPipelineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewDiffPipelineLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewDiffPipelineUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewDiffPipelineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewDiffPipelineOK creates a DiffPipelineOK with default headers values
func NewDiffPipelineOK() *DiffPipelineOK {
	return &DiffPipelineOK{}
}

/*
DiffPipelineOK describes a response with status code 200, with default header values.

The diff between the provided pipeline configuration and the existing pipeline has been done.
*/
type DiffPipelineOK struct {
	Payload *DiffPipelineOKBody
}

// IsSuccess returns true when this diff pipeline o k response has a 2xx status code
func (o *DiffPipelineOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this diff pipeline o k response has a 3xx status code
func (o *DiffPipelineOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this diff pipeline o k response has a 4xx status code
func (o *DiffPipelineOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this diff pipeline o k response has a 5xx status code
func (o *DiffPipelineOK) IsServerError() bool {
	return false
}

// IsCode returns true when this diff pipeline o k response a status code equal to that given
func (o *DiffPipelineOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the diff pipeline o k response
func (o *DiffPipelineOK) Code() int {
	return 200
}

func (o *DiffPipelineOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineOK %s", 200, payload)
}

func (o *DiffPipelineOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineOK %s", 200, payload)
}

func (o *DiffPipelineOK) GetPayload() *DiffPipelineOKBody {
	return o.Payload
}

func (o *DiffPipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(DiffPipelineOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiffPipelineForbidden creates a DiffPipelineForbidden with default headers values
func NewDiffPipelineForbidden() *DiffPipelineForbidden {
	return &DiffPipelineForbidden{}
}

/*
DiffPipelineForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type DiffPipelineForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this diff pipeline forbidden response has a 2xx status code
func (o *DiffPipelineForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this diff pipeline forbidden response has a 3xx status code
func (o *DiffPipelineForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this diff pipeline forbidden response has a 4xx status code
func (o *DiffPipelineForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this diff pipeline forbidden response has a 5xx status code
func (o *DiffPipelineForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this diff pipeline forbidden response a status code equal to that given
func (o *DiffPipelineForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the diff pipeline forbidden response
func (o *DiffPipelineForbidden) Code() int {
	return 403
}

func (o *DiffPipelineForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineForbidden %s", 403, payload)
}

func (o *DiffPipelineForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineForbidden %s", 403, payload)
}

func (o *DiffPipelineForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *DiffPipelineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiffPipelineNotFound creates a DiffPipelineNotFound with default headers values
func NewDiffPipelineNotFound() *DiffPipelineNotFound {
	return &DiffPipelineNotFound{}
}

/*
DiffPipelineNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type DiffPipelineNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this diff pipeline not found response has a 2xx status code
func (o *DiffPipelineNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this diff pipeline not found response has a 3xx status code
func (o *DiffPipelineNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this diff pipeline not found response has a 4xx status code
func (o *DiffPipelineNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this diff pipeline not found response has a 5xx status code
func (o *DiffPipelineNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this diff pipeline not found response a status code equal to that given
func (o *DiffPipelineNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the diff pipeline not found response
func (o *DiffPipelineNotFound) Code() int {
	return 404
}

func (o *DiffPipelineNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineNotFound %s", 404, payload)
}

func (o *DiffPipelineNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineNotFound %s", 404, payload)
}

func (o *DiffPipelineNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *DiffPipelineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiffPipelineLengthRequired creates a DiffPipelineLengthRequired with default headers values
func NewDiffPipelineLengthRequired() *DiffPipelineLengthRequired {
	return &DiffPipelineLengthRequired{}
}

/*
DiffPipelineLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type DiffPipelineLengthRequired struct {
}

// IsSuccess returns true when this diff pipeline length required response has a 2xx status code
func (o *DiffPipelineLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this diff pipeline length required response has a 3xx status code
func (o *DiffPipelineLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this diff pipeline length required response has a 4xx status code
func (o *DiffPipelineLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this diff pipeline length required response has a 5xx status code
func (o *DiffPipelineLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this diff pipeline length required response a status code equal to that given
func (o *DiffPipelineLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the diff pipeline length required response
func (o *DiffPipelineLengthRequired) Code() int {
	return 411
}

func (o *DiffPipelineLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineLengthRequired", 411)
}

func (o *DiffPipelineLengthRequired) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineLengthRequired", 411)
}

func (o *DiffPipelineLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewDiffPipelineUnprocessableEntity creates a DiffPipelineUnprocessableEntity with default headers values
func NewDiffPipelineUnprocessableEntity() *DiffPipelineUnprocessableEntity {
	return &DiffPipelineUnprocessableEntity{}
}

/*
DiffPipelineUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type DiffPipelineUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this diff pipeline unprocessable entity response has a 2xx status code
func (o *DiffPipelineUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this diff pipeline unprocessable entity response has a 3xx status code
func (o *DiffPipelineUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this diff pipeline unprocessable entity response has a 4xx status code
func (o *DiffPipelineUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this diff pipeline unprocessable entity response has a 5xx status code
func (o *DiffPipelineUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this diff pipeline unprocessable entity response a status code equal to that given
func (o *DiffPipelineUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the diff pipeline unprocessable entity response
func (o *DiffPipelineUnprocessableEntity) Code() int {
	return 422
}

func (o *DiffPipelineUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineUnprocessableEntity %s", 422, payload)
}

func (o *DiffPipelineUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipelineUnprocessableEntity %s", 422, payload)
}

func (o *DiffPipelineUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *DiffPipelineUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewDiffPipelineDefault creates a DiffPipelineDefault with default headers values
func NewDiffPipelineDefault(code int) *DiffPipelineDefault {
	return &DiffPipelineDefault{
		_statusCode: code,
	}
}

/*
DiffPipelineDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type DiffPipelineDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this diff pipeline default response has a 2xx status code
func (o *DiffPipelineDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this diff pipeline default response has a 3xx status code
func (o *DiffPipelineDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this diff pipeline default response has a 4xx status code
func (o *DiffPipelineDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this diff pipeline default response has a 5xx status code
func (o *DiffPipelineDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this diff pipeline default response a status code equal to that given
func (o *DiffPipelineDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the diff pipeline default response
func (o *DiffPipelineDefault) Code() int {
	return o._statusCode
}

func (o *DiffPipelineDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipeline default %s", o._statusCode, payload)
}

func (o *DiffPipelineDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}/pipelines/{inpath_pipeline_name}/diff][%d] diffPipeline default %s", o._statusCode, payload)
}

func (o *DiffPipelineDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *DiffPipelineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
DiffPipelineOKBody diff pipeline o k body
swagger:model DiffPipelineOKBody
*/
type DiffPipelineOKBody struct {

	// data
	// Required: true
	Data *models.PipelineDiffs `json:"data"`
}

// Validate validates this diff pipeline o k body
func (o *DiffPipelineOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DiffPipelineOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("diffPipelineOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diffPipelineOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diffPipelineOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this diff pipeline o k body based on the context it is used
func (o *DiffPipelineOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *DiffPipelineOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("diffPipelineOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("diffPipelineOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *DiffPipelineOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *DiffPipelineOKBody) UnmarshalBinary(b []byte) error {
	var res DiffPipelineOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
