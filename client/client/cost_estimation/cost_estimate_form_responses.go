// Code generated by go-swagger; DO NOT EDIT.

package cost_estimation

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// CostEstimateFormReader is a Reader for the CostEstimateForm structure.
type CostEstimateFormReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CostEstimateFormReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCostEstimateFormOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCostEstimateFormForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCostEstimateFormUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCostEstimateFormDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCostEstimateFormOK creates a CostEstimateFormOK with default headers values
func NewCostEstimateFormOK() *CostEstimateFormOK {
	return &CostEstimateFormOK{}
}

/*
CostEstimateFormOK describes a response with status code 200, with default header values.

The result of estimating the costs of a environment.
*/
type CostEstimateFormOK struct {
	Payload *CostEstimateFormOKBody
}

// IsSuccess returns true when this cost estimate form o k response has a 2xx status code
func (o *CostEstimateFormOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this cost estimate form o k response has a 3xx status code
func (o *CostEstimateFormOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost estimate form o k response has a 4xx status code
func (o *CostEstimateFormOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this cost estimate form o k response has a 5xx status code
func (o *CostEstimateFormOK) IsServerError() bool {
	return false
}

// IsCode returns true when this cost estimate form o k response a status code equal to that given
func (o *CostEstimateFormOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the cost estimate form o k response
func (o *CostEstimateFormOK) Code() int {
	return 200
}

func (o *CostEstimateFormOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormOK %s", 200, payload)
}

func (o *CostEstimateFormOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormOK %s", 200, payload)
}

func (o *CostEstimateFormOK) GetPayload() *CostEstimateFormOKBody {
	return o.Payload
}

func (o *CostEstimateFormOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CostEstimateFormOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostEstimateFormForbidden creates a CostEstimateFormForbidden with default headers values
func NewCostEstimateFormForbidden() *CostEstimateFormForbidden {
	return &CostEstimateFormForbidden{}
}

/*
CostEstimateFormForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type CostEstimateFormForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this cost estimate form forbidden response has a 2xx status code
func (o *CostEstimateFormForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cost estimate form forbidden response has a 3xx status code
func (o *CostEstimateFormForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost estimate form forbidden response has a 4xx status code
func (o *CostEstimateFormForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this cost estimate form forbidden response has a 5xx status code
func (o *CostEstimateFormForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this cost estimate form forbidden response a status code equal to that given
func (o *CostEstimateFormForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the cost estimate form forbidden response
func (o *CostEstimateFormForbidden) Code() int {
	return 403
}

func (o *CostEstimateFormForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormForbidden %s", 403, payload)
}

func (o *CostEstimateFormForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormForbidden %s", 403, payload)
}

func (o *CostEstimateFormForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CostEstimateFormForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostEstimateFormUnprocessableEntity creates a CostEstimateFormUnprocessableEntity with default headers values
func NewCostEstimateFormUnprocessableEntity() *CostEstimateFormUnprocessableEntity {
	return &CostEstimateFormUnprocessableEntity{}
}

/*
CostEstimateFormUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type CostEstimateFormUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this cost estimate form unprocessable entity response has a 2xx status code
func (o *CostEstimateFormUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this cost estimate form unprocessable entity response has a 3xx status code
func (o *CostEstimateFormUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this cost estimate form unprocessable entity response has a 4xx status code
func (o *CostEstimateFormUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this cost estimate form unprocessable entity response has a 5xx status code
func (o *CostEstimateFormUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this cost estimate form unprocessable entity response a status code equal to that given
func (o *CostEstimateFormUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the cost estimate form unprocessable entity response
func (o *CostEstimateFormUnprocessableEntity) Code() int {
	return 422
}

func (o *CostEstimateFormUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormUnprocessableEntity %s", 422, payload)
}

func (o *CostEstimateFormUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateFormUnprocessableEntity %s", 422, payload)
}

func (o *CostEstimateFormUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CostEstimateFormUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCostEstimateFormDefault creates a CostEstimateFormDefault with default headers values
func NewCostEstimateFormDefault(code int) *CostEstimateFormDefault {
	return &CostEstimateFormDefault{
		_statusCode: code,
	}
}

/*
CostEstimateFormDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type CostEstimateFormDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this cost estimate form default response has a 2xx status code
func (o *CostEstimateFormDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this cost estimate form default response has a 3xx status code
func (o *CostEstimateFormDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this cost estimate form default response has a 4xx status code
func (o *CostEstimateFormDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this cost estimate form default response has a 5xx status code
func (o *CostEstimateFormDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this cost estimate form default response a status code equal to that given
func (o *CostEstimateFormDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the cost estimate form default response
func (o *CostEstimateFormDefault) Code() int {
	return o._statusCode
}

func (o *CostEstimateFormDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateForm default %s", o._statusCode, payload)
}

func (o *CostEstimateFormDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/forms/estimate][%d] costEstimateForm default %s", o._statusCode, payload)
}

func (o *CostEstimateFormDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CostEstimateFormDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CostEstimateFormBody cost estimate form body
swagger:model CostEstimateFormBody
*/
type CostEstimateFormBody struct {

	// component canonical
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: ^[\da-zA-Z]+(?:(?:[\da-zA-Z\-._]+)?[\da-zA-Z])?$
	ComponentCanonical *string `json:"component_canonical"`

	// It's the ref of the Stack, like 'cycloidio:stack-magento'
	// Required: true
	ServiceCatalogRef *string `json:"service_catalog_ref"`

	// use case
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: (^[a-z0-9]+(([a-z0-9\-_]+)?[a-z0-9]+)?$)
	UseCase *string `json:"use_case"`

	// vars
	// Required: true
	Vars models.FormVariables `json:"vars"`
}

// Validate validates this cost estimate form body
func (o *CostEstimateFormBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateComponentCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateServiceCatalogRef(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validateVars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CostEstimateFormBody) validateComponentCanonical(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"component_canonical", "body", o.ComponentCanonical); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"component_canonical", "body", *o.ComponentCanonical, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"component_canonical", "body", *o.ComponentCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"component_canonical", "body", *o.ComponentCanonical, `^[\da-zA-Z]+(?:(?:[\da-zA-Z\-._]+)?[\da-zA-Z])?$`); err != nil {
		return err
	}

	return nil
}

func (o *CostEstimateFormBody) validateServiceCatalogRef(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"service_catalog_ref", "body", o.ServiceCatalogRef); err != nil {
		return err
	}

	return nil
}

func (o *CostEstimateFormBody) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"use_case", "body", o.UseCase); err != nil {
		return err
	}

	if err := validate.MinLength("body"+"."+"use_case", "body", *o.UseCase, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("body"+"."+"use_case", "body", *o.UseCase, 100); err != nil {
		return err
	}

	if err := validate.Pattern("body"+"."+"use_case", "body", *o.UseCase, `(^[a-z0-9]+(([a-z0-9\-_]+)?[a-z0-9]+)?$)`); err != nil {
		return err
	}

	return nil
}

func (o *CostEstimateFormBody) validateVars(formats strfmt.Registry) error {

	if err := validate.Required("body"+"."+"vars", "body", o.Vars); err != nil {
		return err
	}

	if o.Vars != nil {
		if err := o.Vars.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("body" + "." + "vars")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("body" + "." + "vars")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cost estimate form body based on the context it is used
func (o *CostEstimateFormBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateVars(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CostEstimateFormBody) contextValidateVars(ctx context.Context, formats strfmt.Registry) error {

	if err := o.Vars.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("body" + "." + "vars")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("body" + "." + "vars")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CostEstimateFormBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CostEstimateFormBody) UnmarshalBinary(b []byte) error {
	var res CostEstimateFormBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}

/*
CostEstimateFormOKBody cost estimate form o k body
swagger:model CostEstimateFormOKBody
*/
type CostEstimateFormOKBody struct {

	// data
	// Required: true
	Data []*models.CostEstimationResult `json:"data"`
}

// Validate validates this cost estimate form o k body
func (o *CostEstimateFormOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CostEstimateFormOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("costEstimateFormOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costEstimateFormOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costEstimateFormOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this cost estimate form o k body based on the context it is used
func (o *CostEstimateFormOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CostEstimateFormOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("costEstimateFormOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("costEstimateFormOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *CostEstimateFormOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CostEstimateFormOKBody) UnmarshalBinary(b []byte) error {
	var res CostEstimateFormOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
