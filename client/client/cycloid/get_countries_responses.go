// Code generated by go-swagger; DO NOT EDIT.

package cycloid

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// GetCountriesReader is a Reader for the GetCountries structure.
type GetCountriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCountriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCountriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		result := NewGetCountriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCountriesOK creates a GetCountriesOK with default headers values
func NewGetCountriesOK() *GetCountriesOK {
	return &GetCountriesOK{}
}

/*
GetCountriesOK describes a response with status code 200, with default header values.

Cycloid supported countries
*/
type GetCountriesOK struct {
	Payload *GetCountriesOKBody
}

// IsSuccess returns true when this get countries o k response has a 2xx status code
func (o *GetCountriesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get countries o k response has a 3xx status code
func (o *GetCountriesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get countries o k response has a 4xx status code
func (o *GetCountriesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get countries o k response has a 5xx status code
func (o *GetCountriesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get countries o k response a status code equal to that given
func (o *GetCountriesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get countries o k response
func (o *GetCountriesOK) Code() int {
	return 200
}

func (o *GetCountriesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /countries][%d] getCountriesOK %s", 200, payload)
}

func (o *GetCountriesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /countries][%d] getCountriesOK %s", 200, payload)
}

func (o *GetCountriesOK) GetPayload() *GetCountriesOKBody {
	return o.Payload
}

func (o *GetCountriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCountriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCountriesDefault creates a GetCountriesDefault with default headers values
func NewGetCountriesDefault(code int) *GetCountriesDefault {
	return &GetCountriesDefault{
		_statusCode: code,
	}
}

/*
GetCountriesDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetCountriesDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get countries default response has a 2xx status code
func (o *GetCountriesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get countries default response has a 3xx status code
func (o *GetCountriesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get countries default response has a 4xx status code
func (o *GetCountriesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get countries default response has a 5xx status code
func (o *GetCountriesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get countries default response a status code equal to that given
func (o *GetCountriesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get countries default response
func (o *GetCountriesDefault) Code() int {
	return o._statusCode
}

func (o *GetCountriesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /countries][%d] getCountries default %s", o._statusCode, payload)
}

func (o *GetCountriesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /countries][%d] getCountries default %s", o._statusCode, payload)
}

func (o *GetCountriesDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCountriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCountriesOKBody get countries o k body
swagger:model GetCountriesOKBody
*/
type GetCountriesOKBody struct {

	// data
	// Required: true
	Data []*models.Country `json:"data"`
}

// Validate validates this get countries o k body
func (o *GetCountriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCountriesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getCountriesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCountriesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCountriesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this get countries o k body based on the context it is used
func (o *GetCountriesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCountriesOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCountriesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("getCountriesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCountriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCountriesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCountriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
