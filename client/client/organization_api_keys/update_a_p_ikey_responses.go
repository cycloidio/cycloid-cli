// Code generated by go-swagger; DO NOT EDIT.

package organization_api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateAPIkeyReader is a Reader for the UpdateAPIkey structure.
type UpdateAPIkeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIkeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAPIkeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateAPIkeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAPIkeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateAPIkeyLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAPIkeyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAPIkeyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAPIkeyOK creates a UpdateAPIkeyOK with default headers values
func NewUpdateAPIkeyOK() *UpdateAPIkeyOK {
	return &UpdateAPIkeyOK{}
}

/*UpdateAPIkeyOK handles this case with default header values.

API ey updated. The body contains information of the updated API key.
*/
type UpdateAPIkeyOK struct {
	Payload *UpdateAPIkeyOKBody
}

func (o *UpdateAPIkeyOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyOK  %+v", 200, o.Payload)
}

func (o *UpdateAPIkeyOK) GetPayload() *UpdateAPIkeyOKBody {
	return o.Payload
}

func (o *UpdateAPIkeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateAPIkeyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyForbidden creates a UpdateAPIkeyForbidden with default headers values
func NewUpdateAPIkeyForbidden() *UpdateAPIkeyForbidden {
	return &UpdateAPIkeyForbidden{}
}

/*UpdateAPIkeyForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateAPIkeyForbidden struct {
	Payload *models.ErrorPayload
}

func (o *UpdateAPIkeyForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyForbidden  %+v", 403, o.Payload)
}

func (o *UpdateAPIkeyForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyNotFound creates a UpdateAPIkeyNotFound with default headers values
func NewUpdateAPIkeyNotFound() *UpdateAPIkeyNotFound {
	return &UpdateAPIkeyNotFound{}
}

/*UpdateAPIkeyNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateAPIkeyNotFound struct {
	Payload *models.ErrorPayload
}

func (o *UpdateAPIkeyNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyNotFound  %+v", 404, o.Payload)
}

func (o *UpdateAPIkeyNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyLengthRequired creates a UpdateAPIkeyLengthRequired with default headers values
func NewUpdateAPIkeyLengthRequired() *UpdateAPIkeyLengthRequired {
	return &UpdateAPIkeyLengthRequired{}
}

/*UpdateAPIkeyLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateAPIkeyLengthRequired struct {
}

func (o *UpdateAPIkeyLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyLengthRequired ", 411)
}

func (o *UpdateAPIkeyLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAPIkeyUnprocessableEntity creates a UpdateAPIkeyUnprocessableEntity with default headers values
func NewUpdateAPIkeyUnprocessableEntity() *UpdateAPIkeyUnprocessableEntity {
	return &UpdateAPIkeyUnprocessableEntity{}
}

/*UpdateAPIkeyUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateAPIkeyUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *UpdateAPIkeyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateAPIkeyUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyDefault creates a UpdateAPIkeyDefault with default headers values
func NewUpdateAPIkeyDefault(code int) *UpdateAPIkeyDefault {
	return &UpdateAPIkeyDefault{
		_statusCode: code,
	}
}

/*UpdateAPIkeyDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateAPIkeyDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the update a p ikey default response
func (o *UpdateAPIkeyDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAPIkeyDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkey default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateAPIkeyDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateAPIkeyOKBody update a p ikey o k body
swagger:model UpdateAPIkeyOKBody
*/
type UpdateAPIkeyOKBody struct {

	// data
	// Required: true
	Data *models.APIKey `json:"data"`
}

// Validate validates this update a p ikey o k body
func (o *UpdateAPIkeyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAPIkeyOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateAPIkeyOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAPIkeyOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAPIkeyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAPIkeyOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateAPIkeyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
