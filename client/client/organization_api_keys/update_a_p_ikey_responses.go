// Code generated by go-swagger; DO NOT EDIT.

package organization_api_keys

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateAPIkeyReader is a Reader for the UpdateAPIkey structure.
type UpdateAPIkeyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAPIkeyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAPIkeyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateAPIkeyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAPIkeyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateAPIkeyLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAPIkeyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAPIkeyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAPIkeyOK creates a UpdateAPIkeyOK with default headers values
func NewUpdateAPIkeyOK() *UpdateAPIkeyOK {
	return &UpdateAPIkeyOK{}
}

/*
UpdateAPIkeyOK describes a response with status code 200, with default header values.

API ey updated. The body contains information of the updated API key.
*/
type UpdateAPIkeyOK struct {
	Payload *UpdateAPIkeyOKBody
}

// IsSuccess returns true when this update a p ikey o k response has a 2xx status code
func (o *UpdateAPIkeyOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update a p ikey o k response has a 3xx status code
func (o *UpdateAPIkeyOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a p ikey o k response has a 4xx status code
func (o *UpdateAPIkeyOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update a p ikey o k response has a 5xx status code
func (o *UpdateAPIkeyOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update a p ikey o k response a status code equal to that given
func (o *UpdateAPIkeyOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update a p ikey o k response
func (o *UpdateAPIkeyOK) Code() int {
	return 200
}

func (o *UpdateAPIkeyOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyOK %s", 200, payload)
}

func (o *UpdateAPIkeyOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyOK %s", 200, payload)
}

func (o *UpdateAPIkeyOK) GetPayload() *UpdateAPIkeyOKBody {
	return o.Payload
}

func (o *UpdateAPIkeyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateAPIkeyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyForbidden creates a UpdateAPIkeyForbidden with default headers values
func NewUpdateAPIkeyForbidden() *UpdateAPIkeyForbidden {
	return &UpdateAPIkeyForbidden{}
}

/*
UpdateAPIkeyForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateAPIkeyForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update a p ikey forbidden response has a 2xx status code
func (o *UpdateAPIkeyForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a p ikey forbidden response has a 3xx status code
func (o *UpdateAPIkeyForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a p ikey forbidden response has a 4xx status code
func (o *UpdateAPIkeyForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a p ikey forbidden response has a 5xx status code
func (o *UpdateAPIkeyForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update a p ikey forbidden response a status code equal to that given
func (o *UpdateAPIkeyForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update a p ikey forbidden response
func (o *UpdateAPIkeyForbidden) Code() int {
	return 403
}

func (o *UpdateAPIkeyForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyForbidden %s", 403, payload)
}

func (o *UpdateAPIkeyForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyForbidden %s", 403, payload)
}

func (o *UpdateAPIkeyForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyNotFound creates a UpdateAPIkeyNotFound with default headers values
func NewUpdateAPIkeyNotFound() *UpdateAPIkeyNotFound {
	return &UpdateAPIkeyNotFound{}
}

/*
UpdateAPIkeyNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateAPIkeyNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update a p ikey not found response has a 2xx status code
func (o *UpdateAPIkeyNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a p ikey not found response has a 3xx status code
func (o *UpdateAPIkeyNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a p ikey not found response has a 4xx status code
func (o *UpdateAPIkeyNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a p ikey not found response has a 5xx status code
func (o *UpdateAPIkeyNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update a p ikey not found response a status code equal to that given
func (o *UpdateAPIkeyNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update a p ikey not found response
func (o *UpdateAPIkeyNotFound) Code() int {
	return 404
}

func (o *UpdateAPIkeyNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyNotFound %s", 404, payload)
}

func (o *UpdateAPIkeyNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyNotFound %s", 404, payload)
}

func (o *UpdateAPIkeyNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyLengthRequired creates a UpdateAPIkeyLengthRequired with default headers values
func NewUpdateAPIkeyLengthRequired() *UpdateAPIkeyLengthRequired {
	return &UpdateAPIkeyLengthRequired{}
}

/*
UpdateAPIkeyLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateAPIkeyLengthRequired struct {
}

// IsSuccess returns true when this update a p ikey length required response has a 2xx status code
func (o *UpdateAPIkeyLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a p ikey length required response has a 3xx status code
func (o *UpdateAPIkeyLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a p ikey length required response has a 4xx status code
func (o *UpdateAPIkeyLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a p ikey length required response has a 5xx status code
func (o *UpdateAPIkeyLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this update a p ikey length required response a status code equal to that given
func (o *UpdateAPIkeyLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the update a p ikey length required response
func (o *UpdateAPIkeyLengthRequired) Code() int {
	return 411
}

func (o *UpdateAPIkeyLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyLengthRequired", 411)
}

func (o *UpdateAPIkeyLengthRequired) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyLengthRequired", 411)
}

func (o *UpdateAPIkeyLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateAPIkeyUnprocessableEntity creates a UpdateAPIkeyUnprocessableEntity with default headers values
func NewUpdateAPIkeyUnprocessableEntity() *UpdateAPIkeyUnprocessableEntity {
	return &UpdateAPIkeyUnprocessableEntity{}
}

/*
UpdateAPIkeyUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateAPIkeyUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update a p ikey unprocessable entity response has a 2xx status code
func (o *UpdateAPIkeyUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update a p ikey unprocessable entity response has a 3xx status code
func (o *UpdateAPIkeyUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update a p ikey unprocessable entity response has a 4xx status code
func (o *UpdateAPIkeyUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update a p ikey unprocessable entity response has a 5xx status code
func (o *UpdateAPIkeyUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update a p ikey unprocessable entity response a status code equal to that given
func (o *UpdateAPIkeyUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update a p ikey unprocessable entity response
func (o *UpdateAPIkeyUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateAPIkeyUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAPIkeyUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkeyUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAPIkeyUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAPIkeyDefault creates a UpdateAPIkeyDefault with default headers values
func NewUpdateAPIkeyDefault(code int) *UpdateAPIkeyDefault {
	return &UpdateAPIkeyDefault{
		_statusCode: code,
	}
}

/*
UpdateAPIkeyDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateAPIkeyDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update a p ikey default response has a 2xx status code
func (o *UpdateAPIkeyDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update a p ikey default response has a 3xx status code
func (o *UpdateAPIkeyDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update a p ikey default response has a 4xx status code
func (o *UpdateAPIkeyDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update a p ikey default response has a 5xx status code
func (o *UpdateAPIkeyDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update a p ikey default response a status code equal to that given
func (o *UpdateAPIkeyDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update a p ikey default response
func (o *UpdateAPIkeyDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAPIkeyDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkey default %s", o._statusCode, payload)
}

func (o *UpdateAPIkeyDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/api_keys/{api_key_canonical}][%d] updateAPIkey default %s", o._statusCode, payload)
}

func (o *UpdateAPIkeyDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAPIkeyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateAPIkeyOKBody update a p ikey o k body
swagger:model UpdateAPIkeyOKBody
*/
type UpdateAPIkeyOKBody struct {

	// data
	// Required: true
	Data *models.APIKey `json:"data"`
}

// Validate validates this update a p ikey o k body
func (o *UpdateAPIkeyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAPIkeyOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateAPIkeyOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAPIkeyOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAPIkeyOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update a p ikey o k body based on the context it is used
func (o *UpdateAPIkeyOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAPIkeyOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAPIkeyOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAPIkeyOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAPIkeyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAPIkeyOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateAPIkeyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
