// Code generated by go-swagger; DO NOT EDIT.

package organization_appearances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// ListAppearancesReader is a Reader for the ListAppearances structure.
type ListAppearancesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListAppearancesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListAppearancesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListAppearancesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListAppearancesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListAppearancesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListAppearancesOK creates a ListAppearancesOK with default headers values
func NewListAppearancesOK() *ListAppearancesOK {
	return &ListAppearancesOK{}
}

/*
ListAppearancesOK describes a response with status code 200, with default header values.

List of appearances which are available in the organization.
*/
type ListAppearancesOK struct {
	Payload *ListAppearancesOKBody
}

// IsSuccess returns true when this list appearances o k response has a 2xx status code
func (o *ListAppearancesOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list appearances o k response has a 3xx status code
func (o *ListAppearancesOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list appearances o k response has a 4xx status code
func (o *ListAppearancesOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list appearances o k response has a 5xx status code
func (o *ListAppearancesOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list appearances o k response a status code equal to that given
func (o *ListAppearancesOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list appearances o k response
func (o *ListAppearancesOK) Code() int {
	return 200
}

func (o *ListAppearancesOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesOK %s", 200, payload)
}

func (o *ListAppearancesOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesOK %s", 200, payload)
}

func (o *ListAppearancesOK) GetPayload() *ListAppearancesOKBody {
	return o.Payload
}

func (o *ListAppearancesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListAppearancesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAppearancesForbidden creates a ListAppearancesForbidden with default headers values
func NewListAppearancesForbidden() *ListAppearancesForbidden {
	return &ListAppearancesForbidden{}
}

/*
ListAppearancesForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type ListAppearancesForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list appearances forbidden response has a 2xx status code
func (o *ListAppearancesForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list appearances forbidden response has a 3xx status code
func (o *ListAppearancesForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list appearances forbidden response has a 4xx status code
func (o *ListAppearancesForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list appearances forbidden response has a 5xx status code
func (o *ListAppearancesForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list appearances forbidden response a status code equal to that given
func (o *ListAppearancesForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list appearances forbidden response
func (o *ListAppearancesForbidden) Code() int {
	return 403
}

func (o *ListAppearancesForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesForbidden %s", 403, payload)
}

func (o *ListAppearancesForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesForbidden %s", 403, payload)
}

func (o *ListAppearancesForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListAppearancesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAppearancesNotFound creates a ListAppearancesNotFound with default headers values
func NewListAppearancesNotFound() *ListAppearancesNotFound {
	return &ListAppearancesNotFound{}
}

/*
ListAppearancesNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type ListAppearancesNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list appearances not found response has a 2xx status code
func (o *ListAppearancesNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list appearances not found response has a 3xx status code
func (o *ListAppearancesNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list appearances not found response has a 4xx status code
func (o *ListAppearancesNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list appearances not found response has a 5xx status code
func (o *ListAppearancesNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list appearances not found response a status code equal to that given
func (o *ListAppearancesNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list appearances not found response
func (o *ListAppearancesNotFound) Code() int {
	return 404
}

func (o *ListAppearancesNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesNotFound %s", 404, payload)
}

func (o *ListAppearancesNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearancesNotFound %s", 404, payload)
}

func (o *ListAppearancesNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListAppearancesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListAppearancesDefault creates a ListAppearancesDefault with default headers values
func NewListAppearancesDefault(code int) *ListAppearancesDefault {
	return &ListAppearancesDefault{
		_statusCode: code,
	}
}

/*
ListAppearancesDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type ListAppearancesDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list appearances default response has a 2xx status code
func (o *ListAppearancesDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list appearances default response has a 3xx status code
func (o *ListAppearancesDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list appearances default response has a 4xx status code
func (o *ListAppearancesDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list appearances default response has a 5xx status code
func (o *ListAppearancesDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list appearances default response a status code equal to that given
func (o *ListAppearancesDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list appearances default response
func (o *ListAppearancesDefault) Code() int {
	return o._statusCode
}

func (o *ListAppearancesDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearances default %s", o._statusCode, payload)
}

func (o *ListAppearancesDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/appearances][%d] listAppearances default %s", o._statusCode, payload)
}

func (o *ListAppearancesDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListAppearancesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListAppearancesOKBody list appearances o k body
swagger:model ListAppearancesOKBody
*/
type ListAppearancesOKBody struct {

	// data
	// Required: true
	Data []*models.Appearance `json:"data"`

	// pagination
	// Required: true
	Pagination *models.Pagination `json:"pagination"`
}

// Validate validates this list appearances o k body
func (o *ListAppearancesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAppearancesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("listAppearancesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAppearancesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAppearancesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAppearancesOKBody) validatePagination(formats strfmt.Registry) error {

	if err := validate.Required("listAppearancesOK"+"."+"pagination", "body", o.Pagination); err != nil {
		return err
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listAppearancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listAppearancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list appearances o k body based on the context it is used
func (o *ListAppearancesOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListAppearancesOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listAppearancesOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listAppearancesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListAppearancesOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listAppearancesOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listAppearancesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListAppearancesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListAppearancesOKBody) UnmarshalBinary(b []byte) error {
	var res ListAppearancesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
