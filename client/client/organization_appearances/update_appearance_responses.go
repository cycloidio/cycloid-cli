// Code generated by go-swagger; DO NOT EDIT.

package organization_appearances

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateAppearanceReader is a Reader for the UpdateAppearance structure.
type UpdateAppearanceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateAppearanceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateAppearanceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateAppearanceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateAppearanceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateAppearanceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateAppearanceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateAppearanceOK creates a UpdateAppearanceOK with default headers values
func NewUpdateAppearanceOK() *UpdateAppearanceOK {
	return &UpdateAppearanceOK{}
}

/*
UpdateAppearanceOK describes a response with status code 200, with default header values.

Updated appearance belonging to the organization.
*/
type UpdateAppearanceOK struct {
	Payload *UpdateAppearanceOKBody
}

// IsSuccess returns true when this update appearance o k response has a 2xx status code
func (o *UpdateAppearanceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update appearance o k response has a 3xx status code
func (o *UpdateAppearanceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update appearance o k response has a 4xx status code
func (o *UpdateAppearanceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update appearance o k response has a 5xx status code
func (o *UpdateAppearanceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update appearance o k response a status code equal to that given
func (o *UpdateAppearanceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update appearance o k response
func (o *UpdateAppearanceOK) Code() int {
	return 200
}

func (o *UpdateAppearanceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceOK %s", 200, payload)
}

func (o *UpdateAppearanceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceOK %s", 200, payload)
}

func (o *UpdateAppearanceOK) GetPayload() *UpdateAppearanceOKBody {
	return o.Payload
}

func (o *UpdateAppearanceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateAppearanceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppearanceForbidden creates a UpdateAppearanceForbidden with default headers values
func NewUpdateAppearanceForbidden() *UpdateAppearanceForbidden {
	return &UpdateAppearanceForbidden{}
}

/*
UpdateAppearanceForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateAppearanceForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update appearance forbidden response has a 2xx status code
func (o *UpdateAppearanceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update appearance forbidden response has a 3xx status code
func (o *UpdateAppearanceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update appearance forbidden response has a 4xx status code
func (o *UpdateAppearanceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update appearance forbidden response has a 5xx status code
func (o *UpdateAppearanceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update appearance forbidden response a status code equal to that given
func (o *UpdateAppearanceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update appearance forbidden response
func (o *UpdateAppearanceForbidden) Code() int {
	return 403
}

func (o *UpdateAppearanceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceForbidden %s", 403, payload)
}

func (o *UpdateAppearanceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceForbidden %s", 403, payload)
}

func (o *UpdateAppearanceForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAppearanceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppearanceNotFound creates a UpdateAppearanceNotFound with default headers values
func NewUpdateAppearanceNotFound() *UpdateAppearanceNotFound {
	return &UpdateAppearanceNotFound{}
}

/*
UpdateAppearanceNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateAppearanceNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update appearance not found response has a 2xx status code
func (o *UpdateAppearanceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update appearance not found response has a 3xx status code
func (o *UpdateAppearanceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update appearance not found response has a 4xx status code
func (o *UpdateAppearanceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update appearance not found response has a 5xx status code
func (o *UpdateAppearanceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update appearance not found response a status code equal to that given
func (o *UpdateAppearanceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update appearance not found response
func (o *UpdateAppearanceNotFound) Code() int {
	return 404
}

func (o *UpdateAppearanceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceNotFound %s", 404, payload)
}

func (o *UpdateAppearanceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceNotFound %s", 404, payload)
}

func (o *UpdateAppearanceNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAppearanceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppearanceUnprocessableEntity creates a UpdateAppearanceUnprocessableEntity with default headers values
func NewUpdateAppearanceUnprocessableEntity() *UpdateAppearanceUnprocessableEntity {
	return &UpdateAppearanceUnprocessableEntity{}
}

/*
UpdateAppearanceUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateAppearanceUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update appearance unprocessable entity response has a 2xx status code
func (o *UpdateAppearanceUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update appearance unprocessable entity response has a 3xx status code
func (o *UpdateAppearanceUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update appearance unprocessable entity response has a 4xx status code
func (o *UpdateAppearanceUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update appearance unprocessable entity response has a 5xx status code
func (o *UpdateAppearanceUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update appearance unprocessable entity response a status code equal to that given
func (o *UpdateAppearanceUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update appearance unprocessable entity response
func (o *UpdateAppearanceUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateAppearanceUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAppearanceUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearanceUnprocessableEntity %s", 422, payload)
}

func (o *UpdateAppearanceUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAppearanceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateAppearanceDefault creates a UpdateAppearanceDefault with default headers values
func NewUpdateAppearanceDefault(code int) *UpdateAppearanceDefault {
	return &UpdateAppearanceDefault{
		_statusCode: code,
	}
}

/*
UpdateAppearanceDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateAppearanceDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update appearance default response has a 2xx status code
func (o *UpdateAppearanceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update appearance default response has a 3xx status code
func (o *UpdateAppearanceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update appearance default response has a 4xx status code
func (o *UpdateAppearanceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update appearance default response has a 5xx status code
func (o *UpdateAppearanceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update appearance default response a status code equal to that given
func (o *UpdateAppearanceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update appearance default response
func (o *UpdateAppearanceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateAppearanceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearance default %s", o._statusCode, payload)
}

func (o *UpdateAppearanceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/appearances/{appearance_canonical}][%d] updateAppearance default %s", o._statusCode, payload)
}

func (o *UpdateAppearanceDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateAppearanceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateAppearanceOKBody update appearance o k body
swagger:model UpdateAppearanceOKBody
*/
type UpdateAppearanceOKBody struct {

	// data
	// Required: true
	Data *models.Appearance `json:"data"`
}

// Validate validates this update appearance o k body
func (o *UpdateAppearanceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppearanceOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateAppearanceOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAppearanceOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAppearanceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update appearance o k body based on the context it is used
func (o *UpdateAppearanceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateAppearanceOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateAppearanceOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateAppearanceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateAppearanceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateAppearanceOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateAppearanceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
