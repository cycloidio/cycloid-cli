// Code generated by go-swagger; DO NOT EDIT.

package organization_authentications

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// NewUpdateAuthenticationParams creates a new UpdateAuthenticationParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewUpdateAuthenticationParams() *UpdateAuthenticationParams {
	return &UpdateAuthenticationParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateAuthenticationParamsWithTimeout creates a new UpdateAuthenticationParams object
// with the ability to set a timeout on a request.
func NewUpdateAuthenticationParamsWithTimeout(timeout time.Duration) *UpdateAuthenticationParams {
	return &UpdateAuthenticationParams{
		timeout: timeout,
	}
}

// NewUpdateAuthenticationParamsWithContext creates a new UpdateAuthenticationParams object
// with the ability to set a context for a request.
func NewUpdateAuthenticationParamsWithContext(ctx context.Context) *UpdateAuthenticationParams {
	return &UpdateAuthenticationParams{
		Context: ctx,
	}
}

// NewUpdateAuthenticationParamsWithHTTPClient creates a new UpdateAuthenticationParams object
// with the ability to set a custom HTTPClient for a request.
func NewUpdateAuthenticationParamsWithHTTPClient(client *http.Client) *UpdateAuthenticationParams {
	return &UpdateAuthenticationParams{
		HTTPClient: client,
	}
}

/*
UpdateAuthenticationParams contains all the parameters to send to the API endpoint

	for the update authentication operation.

	Typically these are written to a http.Request.
*/
type UpdateAuthenticationParams struct {

	/* AuthenticationType.

	   The type of the Authentication
	*/
	AuthenticationType string

	/* Body.

	   The information of the organization's authentication to update.
	*/
	Body *models.Authentication

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the update authentication params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthenticationParams) WithDefaults() *UpdateAuthenticationParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the update authentication params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *UpdateAuthenticationParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the update authentication params
func (o *UpdateAuthenticationParams) WithTimeout(timeout time.Duration) *UpdateAuthenticationParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update authentication params
func (o *UpdateAuthenticationParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update authentication params
func (o *UpdateAuthenticationParams) WithContext(ctx context.Context) *UpdateAuthenticationParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update authentication params
func (o *UpdateAuthenticationParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update authentication params
func (o *UpdateAuthenticationParams) WithHTTPClient(client *http.Client) *UpdateAuthenticationParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update authentication params
func (o *UpdateAuthenticationParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAuthenticationType adds the authenticationType to the update authentication params
func (o *UpdateAuthenticationParams) WithAuthenticationType(authenticationType string) *UpdateAuthenticationParams {
	o.SetAuthenticationType(authenticationType)
	return o
}

// SetAuthenticationType adds the authenticationType to the update authentication params
func (o *UpdateAuthenticationParams) SetAuthenticationType(authenticationType string) {
	o.AuthenticationType = authenticationType
}

// WithBody adds the body to the update authentication params
func (o *UpdateAuthenticationParams) WithBody(body *models.Authentication) *UpdateAuthenticationParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update authentication params
func (o *UpdateAuthenticationParams) SetBody(body *models.Authentication) {
	o.Body = body
}

// WithOrganizationCanonical adds the organizationCanonical to the update authentication params
func (o *UpdateAuthenticationParams) WithOrganizationCanonical(organizationCanonical string) *UpdateAuthenticationParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the update authentication params
func (o *UpdateAuthenticationParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateAuthenticationParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param authentication_type
	if err := r.SetPathParam("authentication_type", o.AuthenticationType); err != nil {
		return err
	}
	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
