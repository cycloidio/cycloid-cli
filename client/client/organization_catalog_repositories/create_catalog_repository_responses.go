// Code generated by go-swagger; DO NOT EDIT.

package organization_catalog_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// CreateCatalogRepositoryReader is a Reader for the CreateCatalogRepository structure.
type CreateCatalogRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateCatalogRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateCatalogRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCreateCatalogRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewCreateCatalogRepositoryLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateCatalogRepositoryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateCatalogRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateCatalogRepositoryOK creates a CreateCatalogRepositoryOK with default headers values
func NewCreateCatalogRepositoryOK() *CreateCatalogRepositoryOK {
	return &CreateCatalogRepositoryOK{}
}

/*CreateCatalogRepositoryOK handles this case with default header values.

Success creation
*/
type CreateCatalogRepositoryOK struct {
	Payload *CreateCatalogRepositoryOKBody
}

func (o *CreateCatalogRepositoryOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories][%d] createCatalogRepositoryOK  %+v", 200, o.Payload)
}

func (o *CreateCatalogRepositoryOK) GetPayload() *CreateCatalogRepositoryOKBody {
	return o.Payload
}

func (o *CreateCatalogRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateCatalogRepositoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCatalogRepositoryNotFound creates a CreateCatalogRepositoryNotFound with default headers values
func NewCreateCatalogRepositoryNotFound() *CreateCatalogRepositoryNotFound {
	return &CreateCatalogRepositoryNotFound{}
}

/*CreateCatalogRepositoryNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type CreateCatalogRepositoryNotFound struct {
	Payload *models.ErrorPayload
}

func (o *CreateCatalogRepositoryNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories][%d] createCatalogRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *CreateCatalogRepositoryNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateCatalogRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCatalogRepositoryLengthRequired creates a CreateCatalogRepositoryLengthRequired with default headers values
func NewCreateCatalogRepositoryLengthRequired() *CreateCatalogRepositoryLengthRequired {
	return &CreateCatalogRepositoryLengthRequired{}
}

/*CreateCatalogRepositoryLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type CreateCatalogRepositoryLengthRequired struct {
}

func (o *CreateCatalogRepositoryLengthRequired) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories][%d] createCatalogRepositoryLengthRequired ", 411)
}

func (o *CreateCatalogRepositoryLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateCatalogRepositoryUnprocessableEntity creates a CreateCatalogRepositoryUnprocessableEntity with default headers values
func NewCreateCatalogRepositoryUnprocessableEntity() *CreateCatalogRepositoryUnprocessableEntity {
	return &CreateCatalogRepositoryUnprocessableEntity{}
}

/*CreateCatalogRepositoryUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type CreateCatalogRepositoryUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *CreateCatalogRepositoryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories][%d] createCatalogRepositoryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CreateCatalogRepositoryUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateCatalogRepositoryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateCatalogRepositoryDefault creates a CreateCatalogRepositoryDefault with default headers values
func NewCreateCatalogRepositoryDefault(code int) *CreateCatalogRepositoryDefault {
	return &CreateCatalogRepositoryDefault{
		_statusCode: code,
	}
}

/*CreateCatalogRepositoryDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type CreateCatalogRepositoryDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the create catalog repository default response
func (o *CreateCatalogRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *CreateCatalogRepositoryDefault) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories][%d] createCatalogRepository default  %+v", o._statusCode, o.Payload)
}

func (o *CreateCatalogRepositoryDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateCatalogRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateCatalogRepositoryOKBody create catalog repository o k body
swagger:model CreateCatalogRepositoryOKBody
*/
type CreateCatalogRepositoryOKBody struct {

	// data
	// Required: true
	Data *models.CatalogRepository `json:"data"`
}

// Validate validates this create catalog repository o k body
func (o *CreateCatalogRepositoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateCatalogRepositoryOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("createCatalogRepositoryOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createCatalogRepositoryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateCatalogRepositoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateCatalogRepositoryOKBody) UnmarshalBinary(b []byte) error {
	var res CreateCatalogRepositoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
