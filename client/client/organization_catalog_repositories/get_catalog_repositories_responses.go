// Code generated by go-swagger; DO NOT EDIT.

package organization_catalog_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetCatalogRepositoriesReader is a Reader for the GetCatalogRepositories structure.
type GetCatalogRepositoriesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogRepositoriesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCatalogRepositoriesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetCatalogRepositoriesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetCatalogRepositoriesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCatalogRepositoriesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCatalogRepositoriesOK creates a GetCatalogRepositoriesOK with default headers values
func NewGetCatalogRepositoriesOK() *GetCatalogRepositoriesOK {
	return &GetCatalogRepositoriesOK{}
}

/*GetCatalogRepositoriesOK handles this case with default header values.

List of the private stacks.
*/
type GetCatalogRepositoriesOK struct {
	Payload *GetCatalogRepositoriesOKBody
}

func (o *GetCatalogRepositoriesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories][%d] getCatalogRepositoriesOK  %+v", 200, o.Payload)
}

func (o *GetCatalogRepositoriesOK) GetPayload() *GetCatalogRepositoriesOKBody {
	return o.Payload
}

func (o *GetCatalogRepositoriesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCatalogRepositoriesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoriesForbidden creates a GetCatalogRepositoriesForbidden with default headers values
func NewGetCatalogRepositoriesForbidden() *GetCatalogRepositoriesForbidden {
	return &GetCatalogRepositoriesForbidden{}
}

/*GetCatalogRepositoriesForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetCatalogRepositoriesForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetCatalogRepositoriesForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories][%d] getCatalogRepositoriesForbidden  %+v", 403, o.Payload)
}

func (o *GetCatalogRepositoriesForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoriesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoriesUnprocessableEntity creates a GetCatalogRepositoriesUnprocessableEntity with default headers values
func NewGetCatalogRepositoriesUnprocessableEntity() *GetCatalogRepositoriesUnprocessableEntity {
	return &GetCatalogRepositoriesUnprocessableEntity{}
}

/*GetCatalogRepositoriesUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetCatalogRepositoriesUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *GetCatalogRepositoriesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories][%d] getCatalogRepositoriesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetCatalogRepositoriesUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoriesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoriesDefault creates a GetCatalogRepositoriesDefault with default headers values
func NewGetCatalogRepositoriesDefault(code int) *GetCatalogRepositoriesDefault {
	return &GetCatalogRepositoriesDefault{
		_statusCode: code,
	}
}

/*GetCatalogRepositoriesDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetCatalogRepositoriesDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get catalog repositories default response
func (o *GetCatalogRepositoriesDefault) Code() int {
	return o._statusCode
}

func (o *GetCatalogRepositoriesDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories][%d] getCatalogRepositories default  %+v", o._statusCode, o.Payload)
}

func (o *GetCatalogRepositoriesDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoriesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCatalogRepositoriesOKBody get catalog repositories o k body
swagger:model GetCatalogRepositoriesOKBody
*/
type GetCatalogRepositoriesOKBody struct {

	// data
	// Required: true
	Data []*models.CatalogRepository `json:"data"`
}

// Validate validates this get catalog repositories o k body
func (o *GetCatalogRepositoriesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCatalogRepositoriesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getCatalogRepositoriesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getCatalogRepositoriesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCatalogRepositoriesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCatalogRepositoriesOKBody) UnmarshalBinary(b []byte) error {
	var res GetCatalogRepositoriesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
