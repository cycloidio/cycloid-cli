// Code generated by go-swagger; DO NOT EDIT.

package organization_catalog_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetCatalogRepositoryReader is a Reader for the GetCatalogRepository structure.
type GetCatalogRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCatalogRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCatalogRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetCatalogRepositoryForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetCatalogRepositoryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCatalogRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCatalogRepositoryOK creates a GetCatalogRepositoryOK with default headers values
func NewGetCatalogRepositoryOK() *GetCatalogRepositoryOK {
	return &GetCatalogRepositoryOK{}
}

/*GetCatalogRepositoryOK handles this case with default header values.

Organization Catalog Repositories.
*/
type GetCatalogRepositoryOK struct {
	Payload *GetCatalogRepositoryOKBody
}

func (o *GetCatalogRepositoryOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}][%d] getCatalogRepositoryOK  %+v", 200, o.Payload)
}

func (o *GetCatalogRepositoryOK) GetPayload() *GetCatalogRepositoryOKBody {
	return o.Payload
}

func (o *GetCatalogRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCatalogRepositoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoryForbidden creates a GetCatalogRepositoryForbidden with default headers values
func NewGetCatalogRepositoryForbidden() *GetCatalogRepositoryForbidden {
	return &GetCatalogRepositoryForbidden{}
}

/*GetCatalogRepositoryForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetCatalogRepositoryForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetCatalogRepositoryForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}][%d] getCatalogRepositoryForbidden  %+v", 403, o.Payload)
}

func (o *GetCatalogRepositoryForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoryForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoryUnprocessableEntity creates a GetCatalogRepositoryUnprocessableEntity with default headers values
func NewGetCatalogRepositoryUnprocessableEntity() *GetCatalogRepositoryUnprocessableEntity {
	return &GetCatalogRepositoryUnprocessableEntity{}
}

/*GetCatalogRepositoryUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetCatalogRepositoryUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *GetCatalogRepositoryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}][%d] getCatalogRepositoryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetCatalogRepositoryUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCatalogRepositoryDefault creates a GetCatalogRepositoryDefault with default headers values
func NewGetCatalogRepositoryDefault(code int) *GetCatalogRepositoryDefault {
	return &GetCatalogRepositoryDefault{
		_statusCode: code,
	}
}

/*GetCatalogRepositoryDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetCatalogRepositoryDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get catalog repository default response
func (o *GetCatalogRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *GetCatalogRepositoryDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}][%d] getCatalogRepository default  %+v", o._statusCode, o.Payload)
}

func (o *GetCatalogRepositoryDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCatalogRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetCatalogRepositoryOKBody get catalog repository o k body
swagger:model GetCatalogRepositoryOKBody
*/
type GetCatalogRepositoryOKBody struct {

	// data
	// Required: true
	Data *models.CatalogRepository `json:"data"`
}

// Validate validates this get catalog repository o k body
func (o *GetCatalogRepositoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCatalogRepositoryOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getCatalogRepositoryOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCatalogRepositoryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCatalogRepositoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCatalogRepositoryOKBody) UnmarshalBinary(b []byte) error {
	var res GetCatalogRepositoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
