// Code generated by go-swagger; DO NOT EDIT.

package organization_catalog_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organization catalog repositories API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization catalog repositories API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateCatalogRepository Creates a catalog repository
*/
func (a *Client) CreateCatalogRepository(params *CreateCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*CreateCatalogRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createCatalogRepository",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCatalogRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCatalogRepository delete a Catalog Repository
*/
func (a *Client) DeleteCatalogRepository(params *DeleteCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteCatalogRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteCatalogRepository",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCatalogRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCatalogRepositories Return all the private stacks
*/
func (a *Client) GetCatalogRepositories(params *GetCatalogRepositoriesParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogRepositoriesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogRepositoriesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogRepositories",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogRepositoriesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogRepositoriesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCatalogRepositoriesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCatalogRepository Return the Catalog Repository
*/
func (a *Client) GetCatalogRepository(params *GetCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*GetCatalogRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getCatalogRepository",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCatalogRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RefreshCatalogRepository Refresh a catalog repository
*/
func (a *Client) RefreshCatalogRepository(params *RefreshCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshCatalogRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshCatalogRepository",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshCatalogRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RefreshCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCatalogRepository Update a Catalog Repository
*/
func (a *Client) UpdateCatalogRepository(params *UpdateCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateCatalogRepositoryOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateCatalogRepository",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCatalogRepositoryOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateCatalogRepository Validate a Catalog Repository
*/
func (a *Client) ValidateCatalogRepository(params *ValidateCatalogRepositoryParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateCatalogRepositoryNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateCatalogRepositoryParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateCatalogRepository",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateCatalogRepositoryReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateCatalogRepositoryNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateCatalogRepositoryDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
