// Code generated by go-swagger; DO NOT EDIT.

package organization_catalog_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// RefreshCatalogRepositoryReader is a Reader for the RefreshCatalogRepository structure.
type RefreshCatalogRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RefreshCatalogRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewRefreshCatalogRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewRefreshCatalogRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewRefreshCatalogRepositoryLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewRefreshCatalogRepositoryUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRefreshCatalogRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRefreshCatalogRepositoryOK creates a RefreshCatalogRepositoryOK with default headers values
func NewRefreshCatalogRepositoryOK() *RefreshCatalogRepositoryOK {
	return &RefreshCatalogRepositoryOK{}
}

/*RefreshCatalogRepositoryOK handles this case with default header values.

Success refresh
*/
type RefreshCatalogRepositoryOK struct {
	Payload *RefreshCatalogRepositoryOKBody
}

func (o *RefreshCatalogRepositoryOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh][%d] refreshCatalogRepositoryOK  %+v", 200, o.Payload)
}

func (o *RefreshCatalogRepositoryOK) GetPayload() *RefreshCatalogRepositoryOKBody {
	return o.Payload
}

func (o *RefreshCatalogRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(RefreshCatalogRepositoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshCatalogRepositoryNotFound creates a RefreshCatalogRepositoryNotFound with default headers values
func NewRefreshCatalogRepositoryNotFound() *RefreshCatalogRepositoryNotFound {
	return &RefreshCatalogRepositoryNotFound{}
}

/*RefreshCatalogRepositoryNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type RefreshCatalogRepositoryNotFound struct {
	Payload *models.ErrorPayload
}

func (o *RefreshCatalogRepositoryNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh][%d] refreshCatalogRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *RefreshCatalogRepositoryNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RefreshCatalogRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshCatalogRepositoryLengthRequired creates a RefreshCatalogRepositoryLengthRequired with default headers values
func NewRefreshCatalogRepositoryLengthRequired() *RefreshCatalogRepositoryLengthRequired {
	return &RefreshCatalogRepositoryLengthRequired{}
}

/*RefreshCatalogRepositoryLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type RefreshCatalogRepositoryLengthRequired struct {
}

func (o *RefreshCatalogRepositoryLengthRequired) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh][%d] refreshCatalogRepositoryLengthRequired ", 411)
}

func (o *RefreshCatalogRepositoryLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRefreshCatalogRepositoryUnprocessableEntity creates a RefreshCatalogRepositoryUnprocessableEntity with default headers values
func NewRefreshCatalogRepositoryUnprocessableEntity() *RefreshCatalogRepositoryUnprocessableEntity {
	return &RefreshCatalogRepositoryUnprocessableEntity{}
}

/*RefreshCatalogRepositoryUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type RefreshCatalogRepositoryUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *RefreshCatalogRepositoryUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh][%d] refreshCatalogRepositoryUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *RefreshCatalogRepositoryUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RefreshCatalogRepositoryUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRefreshCatalogRepositoryDefault creates a RefreshCatalogRepositoryDefault with default headers values
func NewRefreshCatalogRepositoryDefault(code int) *RefreshCatalogRepositoryDefault {
	return &RefreshCatalogRepositoryDefault{
		_statusCode: code,
	}
}

/*RefreshCatalogRepositoryDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type RefreshCatalogRepositoryDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the refresh catalog repository default response
func (o *RefreshCatalogRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *RefreshCatalogRepositoryDefault) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/catalog_repositories/{catalog_repository_canonical}/refresh][%d] refreshCatalogRepository default  %+v", o._statusCode, o.Payload)
}

func (o *RefreshCatalogRepositoryDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RefreshCatalogRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*RefreshCatalogRepositoryOKBody refresh catalog repository o k body
swagger:model RefreshCatalogRepositoryOKBody
*/
type RefreshCatalogRepositoryOKBody struct {

	// data
	// Required: true
	Data *models.StackChanges `json:"data"`
}

// Validate validates this refresh catalog repository o k body
func (o *RefreshCatalogRepositoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *RefreshCatalogRepositoryOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("refreshCatalogRepositoryOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("refreshCatalogRepositoryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *RefreshCatalogRepositoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *RefreshCatalogRepositoryOKBody) UnmarshalBinary(b []byte) error {
	var res RefreshCatalogRepositoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
