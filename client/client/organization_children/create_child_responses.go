// Code generated by go-swagger; DO NOT EDIT.

package organization_children

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// CreateChildReader is a Reader for the CreateChild structure.
type CreateChildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateChildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateChildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization_canonical}/children] createChild", response, response.Code())
	}
}

// NewCreateChildOK creates a CreateChildOK with default headers values
func NewCreateChildOK() *CreateChildOK {
	return &CreateChildOK{}
}

/*
CreateChildOK describes a response with status code 200, with default header values.

Organization created. The body contains the information of the new created organization.
*/
type CreateChildOK struct {
	Payload *CreateChildOKBody
}

// IsSuccess returns true when this create child o k response has a 2xx status code
func (o *CreateChildOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create child o k response has a 3xx status code
func (o *CreateChildOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create child o k response has a 4xx status code
func (o *CreateChildOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create child o k response has a 5xx status code
func (o *CreateChildOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create child o k response a status code equal to that given
func (o *CreateChildOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create child o k response
func (o *CreateChildOK) Code() int {
	return 200
}

func (o *CreateChildOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/children][%d] createChildOK %s", 200, payload)
}

func (o *CreateChildOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/children][%d] createChildOK %s", 200, payload)
}

func (o *CreateChildOK) GetPayload() *CreateChildOKBody {
	return o.Payload
}

func (o *CreateChildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateChildOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
CreateChildOKBody create child o k body
swagger:model CreateChildOKBody
*/
type CreateChildOKBody struct {

	// data
	// Required: true
	Data *models.Organization `json:"data"`
}

// Validate validates this create child o k body
func (o *CreateChildOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChildOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("createChildOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createChildOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createChildOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this create child o k body based on the context it is used
func (o *CreateChildOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateChildOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createChildOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("createChildOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateChildOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateChildOKBody) UnmarshalBinary(b []byte) error {
	var res CreateChildOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
