// Code generated by go-swagger; DO NOT EDIT.

package organization_children

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// CreateOrgChildReader is a Reader for the CreateOrgChild structure.
type CreateOrgChildReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateOrgChildReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateOrgChildOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewCreateOrgChildOK creates a CreateOrgChildOK with default headers values
func NewCreateOrgChildOK() *CreateOrgChildOK {
	return &CreateOrgChildOK{}
}

/*CreateOrgChildOK handles this case with default header values.

Organization created. The body contains the information of the new created organization.
*/
type CreateOrgChildOK struct {
	Payload *CreateOrgChildOKBody
}

func (o *CreateOrgChildOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/children][%d] createOrgChildOK  %+v", 200, o.Payload)
}

func (o *CreateOrgChildOK) GetPayload() *CreateOrgChildOKBody {
	return o.Payload
}

func (o *CreateOrgChildOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CreateOrgChildOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CreateOrgChildOKBody create org child o k body
swagger:model CreateOrgChildOKBody
*/
type CreateOrgChildOKBody struct {

	// data
	// Required: true
	Data *models.Organization `json:"data"`
}

// Validate validates this create org child o k body
func (o *CreateOrgChildOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CreateOrgChildOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("createOrgChildOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("createOrgChildOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CreateOrgChildOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CreateOrgChildOKBody) UnmarshalBinary(b []byte) error {
	var res CreateOrgChildOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
