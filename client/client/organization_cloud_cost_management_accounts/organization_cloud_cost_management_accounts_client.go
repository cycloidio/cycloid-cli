// Code generated by go-swagger; DO NOT EDIT.

package organization_cloud_cost_management_accounts

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization cloud cost management accounts API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new organization cloud cost management accounts API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new organization cloud cost management accounts API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for organization cloud cost management accounts API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateCloudCostManagementAccount(params *CreateCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudCostManagementAccountOK, error)

	CreateCloudCostManagementAccountChild(params *CreateCloudCostManagementAccountChildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudCostManagementAccountChildOK, error)

	DeleteCloudCostManagementAccount(params *DeleteCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCloudCostManagementAccountNoContent, error)

	GetCloudCostManagementAccount(params *GetCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountOK, error)

	GetCloudCostManagementAccounts(params *GetCloudCostManagementAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountsOK, error)

	GetCloudCostManagementAccountsHasParent(params *GetCloudCostManagementAccountsHasParentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountsHasParentOK, error)

	GetCloudCostManagementLinkedAccounts(params *GetCloudCostManagementLinkedAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementLinkedAccountsOK, error)

	UpdateCloudCostManagementAccount(params *UpdateCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCloudCostManagementAccountOK, error)

	UpdateCloudCostManagementLinkedAccount(params *UpdateCloudCostManagementLinkedAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCloudCostManagementLinkedAccountOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateCloudCostManagementAccount Create a new Cloud Cost Management account.
*/
func (a *Client) CreateCloudCostManagementAccount(params *CreateCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudCostManagementAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudCostManagementAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCloudCostManagementAccount",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudCostManagementAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudCostManagementAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCloudCostManagementAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateCloudCostManagementAccountChild Create a new Cloud Cost Management account.
*/
func (a *Client) CreateCloudCostManagementAccountChild(params *CreateCloudCostManagementAccountChildParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateCloudCostManagementAccountChildOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateCloudCostManagementAccountChildParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createCloudCostManagementAccountChild",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/child-accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateCloudCostManagementAccountChildReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateCloudCostManagementAccountChildOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateCloudCostManagementAccountChildDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteCloudCostManagementAccount Delete the CloudCostManagementAccount.
*/
func (a *Client) DeleteCloudCostManagementAccount(params *DeleteCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteCloudCostManagementAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteCloudCostManagementAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteCloudCostManagementAccount",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteCloudCostManagementAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteCloudCostManagementAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteCloudCostManagementAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCloudCostManagementAccount Get the information of the CloudCostManagementAccount.
*/
func (a *Client) GetCloudCostManagementAccount(params *GetCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudCostManagementAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudCostManagementAccount",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudCostManagementAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudCostManagementAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCloudCostManagementAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCloudCostManagementAccounts Return a list of Cloud Cost Management accounts which matches the scope specified by the filter.
*/
func (a *Client) GetCloudCostManagementAccounts(params *GetCloudCostManagementAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudCostManagementAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudCostManagementAccounts",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudCostManagementAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudCostManagementAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCloudCostManagementAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCloudCostManagementAccountsHasParent Return whether account under provided credentials is a child account
*/
func (a *Client) GetCloudCostManagementAccountsHasParent(params *GetCloudCostManagementAccountsHasParentParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementAccountsHasParentOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudCostManagementAccountsHasParentParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudCostManagementAccountsHasParent",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/has_parent",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudCostManagementAccountsHasParentReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudCostManagementAccountsHasParentOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCloudCostManagementAccountsHasParentDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetCloudCostManagementLinkedAccounts Return a list of cloud provider accounts linked to a specific Cloud Cost Management account.
*/
func (a *Client) GetCloudCostManagementLinkedAccounts(params *GetCloudCostManagementLinkedAccountsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetCloudCostManagementLinkedAccountsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetCloudCostManagementLinkedAccountsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getCloudCostManagementLinkedAccounts",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}/linked_accounts",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetCloudCostManagementLinkedAccountsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetCloudCostManagementLinkedAccountsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetCloudCostManagementLinkedAccountsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCloudCostManagementAccount Update an existing CloudCostManagementAccount
*/
func (a *Client) UpdateCloudCostManagementAccount(params *UpdateCloudCostManagementAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCloudCostManagementAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudCostManagementAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCloudCostManagementAccount",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudCostManagementAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudCostManagementAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCloudCostManagementAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateCloudCostManagementLinkedAccount Update a Cloud Cost Management linked account
*/
func (a *Client) UpdateCloudCostManagementLinkedAccount(params *UpdateCloudCostManagementLinkedAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateCloudCostManagementLinkedAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateCloudCostManagementLinkedAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateCloudCostManagementLinkedAccount",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/cloud_cost_management/accounts/{cloud_cost_management_account_canonical}/linked_accounts/{cloud_provider_account_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateCloudCostManagementLinkedAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateCloudCostManagementLinkedAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateCloudCostManagementLinkedAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
