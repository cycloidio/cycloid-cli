// Code generated by go-swagger; DO NOT EDIT.

package organization_cloud_cost_management_dashboard

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetCloudCostManagementDashboardParams creates a new GetCloudCostManagementDashboardParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetCloudCostManagementDashboardParams() *GetCloudCostManagementDashboardParams {
	return &GetCloudCostManagementDashboardParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetCloudCostManagementDashboardParamsWithTimeout creates a new GetCloudCostManagementDashboardParams object
// with the ability to set a timeout on a request.
func NewGetCloudCostManagementDashboardParamsWithTimeout(timeout time.Duration) *GetCloudCostManagementDashboardParams {
	return &GetCloudCostManagementDashboardParams{
		timeout: timeout,
	}
}

// NewGetCloudCostManagementDashboardParamsWithContext creates a new GetCloudCostManagementDashboardParams object
// with the ability to set a context for a request.
func NewGetCloudCostManagementDashboardParamsWithContext(ctx context.Context) *GetCloudCostManagementDashboardParams {
	return &GetCloudCostManagementDashboardParams{
		Context: ctx,
	}
}

// NewGetCloudCostManagementDashboardParamsWithHTTPClient creates a new GetCloudCostManagementDashboardParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetCloudCostManagementDashboardParamsWithHTTPClient(client *http.Client) *GetCloudCostManagementDashboardParams {
	return &GetCloudCostManagementDashboardParams{
		HTTPClient: client,
	}
}

/*
GetCloudCostManagementDashboardParams contains all the parameters to send to the API endpoint

	for the get cloud cost management dashboard operation.

	Typically these are written to a http.Request.
*/
type GetCloudCostManagementDashboardParams struct {

	/* Begin.

	   The unix timestamp in milliseconds, which indicate the start of the time range.

	   Format: uint64
	*/
	Begin *uint64

	/* Currency.

	   The currency required for the results.
	*/
	Currency string

	/* End.

	   The unix timestamp in milliseconds, which indicate the end of the time range.

	   Format: uint64
	*/
	End *uint64

	/* Granularity.

	   Sets the cost granularity, it can be month, week, day.
	*/
	Granularity string

	/* LinkedAccounts.

	   The ids of the linked accounts that you can use to filter your results
	*/
	LinkedAccounts []string

	/* MasterAccounts.

	   The ids of the master accounts that you can use to filter your results
	*/
	MasterAccounts []string

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* Projects.

	   The names of the projects that you can use to filter your results
	*/
	Projects []string

	/* RecordTypes.

	   The type of records that you can use to filter your results. For example usage or credit.
	*/
	RecordTypes []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get cloud cost management dashboard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCloudCostManagementDashboardParams) WithDefaults() *GetCloudCostManagementDashboardParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get cloud cost management dashboard params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetCloudCostManagementDashboardParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithTimeout(timeout time.Duration) *GetCloudCostManagementDashboardParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithContext(ctx context.Context) *GetCloudCostManagementDashboardParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithHTTPClient(client *http.Client) *GetCloudCostManagementDashboardParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithBegin(begin *uint64) *GetCloudCostManagementDashboardParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithCurrency adds the currency to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithCurrency(currency string) *GetCloudCostManagementDashboardParams {
	o.SetCurrency(currency)
	return o
}

// SetCurrency adds the currency to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetCurrency(currency string) {
	o.Currency = currency
}

// WithEnd adds the end to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithEnd(end *uint64) *GetCloudCostManagementDashboardParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetEnd(end *uint64) {
	o.End = end
}

// WithGranularity adds the granularity to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithGranularity(granularity string) *GetCloudCostManagementDashboardParams {
	o.SetGranularity(granularity)
	return o
}

// SetGranularity adds the granularity to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetGranularity(granularity string) {
	o.Granularity = granularity
}

// WithLinkedAccounts adds the linkedAccounts to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithLinkedAccounts(linkedAccounts []string) *GetCloudCostManagementDashboardParams {
	o.SetLinkedAccounts(linkedAccounts)
	return o
}

// SetLinkedAccounts adds the linkedAccounts to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetLinkedAccounts(linkedAccounts []string) {
	o.LinkedAccounts = linkedAccounts
}

// WithMasterAccounts adds the masterAccounts to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithMasterAccounts(masterAccounts []string) *GetCloudCostManagementDashboardParams {
	o.SetMasterAccounts(masterAccounts)
	return o
}

// SetMasterAccounts adds the masterAccounts to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetMasterAccounts(masterAccounts []string) {
	o.MasterAccounts = masterAccounts
}

// WithOrganizationCanonical adds the organizationCanonical to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithOrganizationCanonical(organizationCanonical string) *GetCloudCostManagementDashboardParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjects adds the projects to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithProjects(projects []string) *GetCloudCostManagementDashboardParams {
	o.SetProjects(projects)
	return o
}

// SetProjects adds the projects to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetProjects(projects []string) {
	o.Projects = projects
}

// WithRecordTypes adds the recordTypes to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) WithRecordTypes(recordTypes []string) *GetCloudCostManagementDashboardParams {
	o.SetRecordTypes(recordTypes)
	return o
}

// SetRecordTypes adds the recordTypes to the get cloud cost management dashboard params
func (o *GetCloudCostManagementDashboardParams) SetRecordTypes(recordTypes []string) {
	o.RecordTypes = recordTypes
}

// WriteToRequest writes these params to a swagger request
func (o *GetCloudCostManagementDashboardParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64

		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {

			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}
	}

	// query param currency
	qrCurrency := o.Currency
	qCurrency := qrCurrency
	if qCurrency != "" {

		if err := r.SetQueryParam("currency", qCurrency); err != nil {
			return err
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd uint64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	// query param granularity
	qrGranularity := o.Granularity
	qGranularity := qrGranularity
	if qGranularity != "" {

		if err := r.SetQueryParam("granularity", qGranularity); err != nil {
			return err
		}
	}

	if o.LinkedAccounts != nil {

		// binding items for linked_accounts
		joinedLinkedAccounts := o.bindParamLinkedAccounts(reg)

		// query array param linked_accounts
		if err := r.SetQueryParam("linked_accounts", joinedLinkedAccounts...); err != nil {
			return err
		}
	}

	if o.MasterAccounts != nil {

		// binding items for master_accounts
		joinedMasterAccounts := o.bindParamMasterAccounts(reg)

		// query array param master_accounts
		if err := r.SetQueryParam("master_accounts", joinedMasterAccounts...); err != nil {
			return err
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.Projects != nil {

		// binding items for projects
		joinedProjects := o.bindParamProjects(reg)

		// query array param projects
		if err := r.SetQueryParam("projects", joinedProjects...); err != nil {
			return err
		}
	}

	if o.RecordTypes != nil {

		// binding items for record_types
		joinedRecordTypes := o.bindParamRecordTypes(reg)

		// query array param record_types
		if err := r.SetQueryParam("record_types", joinedRecordTypes...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetCloudCostManagementDashboard binds the parameter linked_accounts
func (o *GetCloudCostManagementDashboardParams) bindParamLinkedAccounts(formats strfmt.Registry) []string {
	linkedAccountsIR := o.LinkedAccounts

	var linkedAccountsIC []string
	for _, linkedAccountsIIR := range linkedAccountsIR { // explode []string

		linkedAccountsIIV := linkedAccountsIIR // string as string
		linkedAccountsIC = append(linkedAccountsIC, linkedAccountsIIV)
	}

	// items.CollectionFormat: "multi"
	linkedAccountsIS := swag.JoinByFormat(linkedAccountsIC, "multi")

	return linkedAccountsIS
}

// bindParamGetCloudCostManagementDashboard binds the parameter master_accounts
func (o *GetCloudCostManagementDashboardParams) bindParamMasterAccounts(formats strfmt.Registry) []string {
	masterAccountsIR := o.MasterAccounts

	var masterAccountsIC []string
	for _, masterAccountsIIR := range masterAccountsIR { // explode []string

		masterAccountsIIV := masterAccountsIIR // string as string
		masterAccountsIC = append(masterAccountsIC, masterAccountsIIV)
	}

	// items.CollectionFormat: "multi"
	masterAccountsIS := swag.JoinByFormat(masterAccountsIC, "multi")

	return masterAccountsIS
}

// bindParamGetCloudCostManagementDashboard binds the parameter projects
func (o *GetCloudCostManagementDashboardParams) bindParamProjects(formats strfmt.Registry) []string {
	projectsIR := o.Projects

	var projectsIC []string
	for _, projectsIIR := range projectsIR { // explode []string

		projectsIIV := projectsIIR // string as string
		projectsIC = append(projectsIC, projectsIIV)
	}

	// items.CollectionFormat: "multi"
	projectsIS := swag.JoinByFormat(projectsIC, "multi")

	return projectsIS
}

// bindParamGetCloudCostManagementDashboard binds the parameter record_types
func (o *GetCloudCostManagementDashboardParams) bindParamRecordTypes(formats strfmt.Registry) []string {
	recordTypesIR := o.RecordTypes

	var recordTypesIC []string
	for _, recordTypesIIR := range recordTypesIR { // explode []string

		recordTypesIIV := recordTypesIIR // string as string
		recordTypesIC = append(recordTypesIC, recordTypesIIV)
	}

	// items.CollectionFormat: "multi"
	recordTypesIS := swag.JoinByFormat(recordTypesIC, "multi")

	return recordTypesIS
}
