// Code generated by go-swagger; DO NOT EDIT.

package organization_cloud_cost_management_provider_histograms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// GetCloudCostManagementProviderReader is a Reader for the GetCloudCostManagementProvider structure.
type GetCloudCostManagementProviderReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetCloudCostManagementProviderReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetCloudCostManagementProviderOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetCloudCostManagementProviderForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetCloudCostManagementProviderUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetCloudCostManagementProviderDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetCloudCostManagementProviderOK creates a GetCloudCostManagementProviderOK with default headers values
func NewGetCloudCostManagementProviderOK() *GetCloudCostManagementProviderOK {
	return &GetCloudCostManagementProviderOK{}
}

/*
GetCloudCostManagementProviderOK describes a response with status code 200, with default header values.

Cloud Cost Management histogram for a period of time and a single provider.
*/
type GetCloudCostManagementProviderOK struct {
	Payload *GetCloudCostManagementProviderOKBody
}

// IsSuccess returns true when this get cloud cost management provider o k response has a 2xx status code
func (o *GetCloudCostManagementProviderOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get cloud cost management provider o k response has a 3xx status code
func (o *GetCloudCostManagementProviderOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud cost management provider o k response has a 4xx status code
func (o *GetCloudCostManagementProviderOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get cloud cost management provider o k response has a 5xx status code
func (o *GetCloudCostManagementProviderOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud cost management provider o k response a status code equal to that given
func (o *GetCloudCostManagementProviderOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get cloud cost management provider o k response
func (o *GetCloudCostManagementProviderOK) Code() int {
	return 200
}

func (o *GetCloudCostManagementProviderOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderOK %s", 200, payload)
}

func (o *GetCloudCostManagementProviderOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderOK %s", 200, payload)
}

func (o *GetCloudCostManagementProviderOK) GetPayload() *GetCloudCostManagementProviderOKBody {
	return o.Payload
}

func (o *GetCloudCostManagementProviderOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetCloudCostManagementProviderOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudCostManagementProviderForbidden creates a GetCloudCostManagementProviderForbidden with default headers values
func NewGetCloudCostManagementProviderForbidden() *GetCloudCostManagementProviderForbidden {
	return &GetCloudCostManagementProviderForbidden{}
}

/*
GetCloudCostManagementProviderForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetCloudCostManagementProviderForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get cloud cost management provider forbidden response has a 2xx status code
func (o *GetCloudCostManagementProviderForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud cost management provider forbidden response has a 3xx status code
func (o *GetCloudCostManagementProviderForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud cost management provider forbidden response has a 4xx status code
func (o *GetCloudCostManagementProviderForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cloud cost management provider forbidden response has a 5xx status code
func (o *GetCloudCostManagementProviderForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud cost management provider forbidden response a status code equal to that given
func (o *GetCloudCostManagementProviderForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get cloud cost management provider forbidden response
func (o *GetCloudCostManagementProviderForbidden) Code() int {
	return 403
}

func (o *GetCloudCostManagementProviderForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderForbidden %s", 403, payload)
}

func (o *GetCloudCostManagementProviderForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderForbidden %s", 403, payload)
}

func (o *GetCloudCostManagementProviderForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCloudCostManagementProviderForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudCostManagementProviderUnprocessableEntity creates a GetCloudCostManagementProviderUnprocessableEntity with default headers values
func NewGetCloudCostManagementProviderUnprocessableEntity() *GetCloudCostManagementProviderUnprocessableEntity {
	return &GetCloudCostManagementProviderUnprocessableEntity{}
}

/*
GetCloudCostManagementProviderUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetCloudCostManagementProviderUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get cloud cost management provider unprocessable entity response has a 2xx status code
func (o *GetCloudCostManagementProviderUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get cloud cost management provider unprocessable entity response has a 3xx status code
func (o *GetCloudCostManagementProviderUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get cloud cost management provider unprocessable entity response has a 4xx status code
func (o *GetCloudCostManagementProviderUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get cloud cost management provider unprocessable entity response has a 5xx status code
func (o *GetCloudCostManagementProviderUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get cloud cost management provider unprocessable entity response a status code equal to that given
func (o *GetCloudCostManagementProviderUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get cloud cost management provider unprocessable entity response
func (o *GetCloudCostManagementProviderUnprocessableEntity) Code() int {
	return 422
}

func (o *GetCloudCostManagementProviderUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderUnprocessableEntity %s", 422, payload)
}

func (o *GetCloudCostManagementProviderUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProviderUnprocessableEntity %s", 422, payload)
}

func (o *GetCloudCostManagementProviderUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCloudCostManagementProviderUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetCloudCostManagementProviderDefault creates a GetCloudCostManagementProviderDefault with default headers values
func NewGetCloudCostManagementProviderDefault(code int) *GetCloudCostManagementProviderDefault {
	return &GetCloudCostManagementProviderDefault{
		_statusCode: code,
	}
}

/*
GetCloudCostManagementProviderDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetCloudCostManagementProviderDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get cloud cost management provider default response has a 2xx status code
func (o *GetCloudCostManagementProviderDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get cloud cost management provider default response has a 3xx status code
func (o *GetCloudCostManagementProviderDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get cloud cost management provider default response has a 4xx status code
func (o *GetCloudCostManagementProviderDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get cloud cost management provider default response has a 5xx status code
func (o *GetCloudCostManagementProviderDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get cloud cost management provider default response a status code equal to that given
func (o *GetCloudCostManagementProviderDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get cloud cost management provider default response
func (o *GetCloudCostManagementProviderDefault) Code() int {
	return o._statusCode
}

func (o *GetCloudCostManagementProviderDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProvider default %s", o._statusCode, payload)
}

func (o *GetCloudCostManagementProviderDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/cloud_cost_management/{provider_canonical}][%d] getCloudCostManagementProvider default %s", o._statusCode, payload)
}

func (o *GetCloudCostManagementProviderDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetCloudCostManagementProviderDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetCloudCostManagementProviderOKBody get cloud cost management provider o k body
swagger:model GetCloudCostManagementProviderOKBody
*/
type GetCloudCostManagementProviderOKBody struct {

	// data
	// Required: true
	Data *models.CloudCostManagementProviderDetails `json:"data"`
}

// Validate validates this get cloud cost management provider o k body
func (o *GetCloudCostManagementProviderOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCloudCostManagementProviderOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getCloudCostManagementProviderOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCloudCostManagementProviderOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCloudCostManagementProviderOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this get cloud cost management provider o k body based on the context it is used
func (o *GetCloudCostManagementProviderOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetCloudCostManagementProviderOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getCloudCostManagementProviderOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("getCloudCostManagementProviderOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetCloudCostManagementProviderOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetCloudCostManagementProviderOKBody) UnmarshalBinary(b []byte) error {
	var res GetCloudCostManagementProviderOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
