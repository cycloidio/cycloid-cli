// Code generated by go-swagger; DO NOT EDIT.

package organization_components

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateComponentReader is a Reader for the UpdateComponent structure.
type UpdateComponentReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateComponentReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateComponentOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateComponentForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateComponentNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateComponentUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateComponentDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateComponentOK creates a UpdateComponentOK with default headers values
func NewUpdateComponentOK() *UpdateComponentOK {
	return &UpdateComponentOK{}
}

/*
UpdateComponentOK describes a response with status code 200, with default header values.

Component
*/
type UpdateComponentOK struct {
	Payload *models.Component
}

// IsSuccess returns true when this update component o k response has a 2xx status code
func (o *UpdateComponentOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update component o k response has a 3xx status code
func (o *UpdateComponentOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component o k response has a 4xx status code
func (o *UpdateComponentOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update component o k response has a 5xx status code
func (o *UpdateComponentOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update component o k response a status code equal to that given
func (o *UpdateComponentOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update component o k response
func (o *UpdateComponentOK) Code() int {
	return 200
}

func (o *UpdateComponentOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentOK %s", 200, payload)
}

func (o *UpdateComponentOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentOK %s", 200, payload)
}

func (o *UpdateComponentOK) GetPayload() *models.Component {
	return o.Payload
}

func (o *UpdateComponentOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.Component)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentForbidden creates a UpdateComponentForbidden with default headers values
func NewUpdateComponentForbidden() *UpdateComponentForbidden {
	return &UpdateComponentForbidden{}
}

/*
UpdateComponentForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateComponentForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update component forbidden response has a 2xx status code
func (o *UpdateComponentForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component forbidden response has a 3xx status code
func (o *UpdateComponentForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component forbidden response has a 4xx status code
func (o *UpdateComponentForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component forbidden response has a 5xx status code
func (o *UpdateComponentForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update component forbidden response a status code equal to that given
func (o *UpdateComponentForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update component forbidden response
func (o *UpdateComponentForbidden) Code() int {
	return 403
}

func (o *UpdateComponentForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentForbidden %s", 403, payload)
}

func (o *UpdateComponentForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentForbidden %s", 403, payload)
}

func (o *UpdateComponentForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateComponentForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentNotFound creates a UpdateComponentNotFound with default headers values
func NewUpdateComponentNotFound() *UpdateComponentNotFound {
	return &UpdateComponentNotFound{}
}

/*
UpdateComponentNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateComponentNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update component not found response has a 2xx status code
func (o *UpdateComponentNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component not found response has a 3xx status code
func (o *UpdateComponentNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component not found response has a 4xx status code
func (o *UpdateComponentNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component not found response has a 5xx status code
func (o *UpdateComponentNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update component not found response a status code equal to that given
func (o *UpdateComponentNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update component not found response
func (o *UpdateComponentNotFound) Code() int {
	return 404
}

func (o *UpdateComponentNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentNotFound %s", 404, payload)
}

func (o *UpdateComponentNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentNotFound %s", 404, payload)
}

func (o *UpdateComponentNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateComponentNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentUnprocessableEntity creates a UpdateComponentUnprocessableEntity with default headers values
func NewUpdateComponentUnprocessableEntity() *UpdateComponentUnprocessableEntity {
	return &UpdateComponentUnprocessableEntity{}
}

/*
UpdateComponentUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateComponentUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update component unprocessable entity response has a 2xx status code
func (o *UpdateComponentUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update component unprocessable entity response has a 3xx status code
func (o *UpdateComponentUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update component unprocessable entity response has a 4xx status code
func (o *UpdateComponentUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update component unprocessable entity response has a 5xx status code
func (o *UpdateComponentUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update component unprocessable entity response a status code equal to that given
func (o *UpdateComponentUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update component unprocessable entity response
func (o *UpdateComponentUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateComponentUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentUnprocessableEntity %s", 422, payload)
}

func (o *UpdateComponentUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponentUnprocessableEntity %s", 422, payload)
}

func (o *UpdateComponentUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateComponentUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateComponentDefault creates a UpdateComponentDefault with default headers values
func NewUpdateComponentDefault(code int) *UpdateComponentDefault {
	return &UpdateComponentDefault{
		_statusCode: code,
	}
}

/*
UpdateComponentDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateComponentDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update component default response has a 2xx status code
func (o *UpdateComponentDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update component default response has a 3xx status code
func (o *UpdateComponentDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update component default response has a 4xx status code
func (o *UpdateComponentDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update component default response has a 5xx status code
func (o *UpdateComponentDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update component default response a status code equal to that given
func (o *UpdateComponentDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update component default response
func (o *UpdateComponentDefault) Code() int {
	return o._statusCode
}

func (o *UpdateComponentDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponent default %s", o._statusCode, payload)
}

func (o *UpdateComponentDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/components/{component_canonical}][%d] updateComponent default %s", o._statusCode, payload)
}

func (o *UpdateComponentDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateComponentDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
