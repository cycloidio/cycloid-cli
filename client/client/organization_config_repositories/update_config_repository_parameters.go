// Code generated by go-swagger; DO NOT EDIT.

package organization_config_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// NewUpdateConfigRepositoryParams creates a new UpdateConfigRepositoryParams object
// with the default values initialized.
func NewUpdateConfigRepositoryParams() *UpdateConfigRepositoryParams {
	var ()
	return &UpdateConfigRepositoryParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewUpdateConfigRepositoryParamsWithTimeout creates a new UpdateConfigRepositoryParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewUpdateConfigRepositoryParamsWithTimeout(timeout time.Duration) *UpdateConfigRepositoryParams {
	var ()
	return &UpdateConfigRepositoryParams{

		timeout: timeout,
	}
}

// NewUpdateConfigRepositoryParamsWithContext creates a new UpdateConfigRepositoryParams object
// with the default values initialized, and the ability to set a context for a request
func NewUpdateConfigRepositoryParamsWithContext(ctx context.Context) *UpdateConfigRepositoryParams {
	var ()
	return &UpdateConfigRepositoryParams{

		Context: ctx,
	}
}

// NewUpdateConfigRepositoryParamsWithHTTPClient creates a new UpdateConfigRepositoryParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewUpdateConfigRepositoryParamsWithHTTPClient(client *http.Client) *UpdateConfigRepositoryParams {
	var ()
	return &UpdateConfigRepositoryParams{
		HTTPClient: client,
	}
}

/*UpdateConfigRepositoryParams contains all the parameters to send to the API endpoint
for the update config repository operation typically these are written to a http.Request
*/
type UpdateConfigRepositoryParams struct {

	/*Body
	  The information of the config repository to create.

	*/
	Body *models.UpdateConfigRepository
	/*ConfigRepositoryID
	  Organization Config Repositories ID

	*/
	ConfigRepositoryID uint32
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the update config repository params
func (o *UpdateConfigRepositoryParams) WithTimeout(timeout time.Duration) *UpdateConfigRepositoryParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the update config repository params
func (o *UpdateConfigRepositoryParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the update config repository params
func (o *UpdateConfigRepositoryParams) WithContext(ctx context.Context) *UpdateConfigRepositoryParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the update config repository params
func (o *UpdateConfigRepositoryParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the update config repository params
func (o *UpdateConfigRepositoryParams) WithHTTPClient(client *http.Client) *UpdateConfigRepositoryParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the update config repository params
func (o *UpdateConfigRepositoryParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the update config repository params
func (o *UpdateConfigRepositoryParams) WithBody(body *models.UpdateConfigRepository) *UpdateConfigRepositoryParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the update config repository params
func (o *UpdateConfigRepositoryParams) SetBody(body *models.UpdateConfigRepository) {
	o.Body = body
}

// WithConfigRepositoryID adds the configRepositoryID to the update config repository params
func (o *UpdateConfigRepositoryParams) WithConfigRepositoryID(configRepositoryID uint32) *UpdateConfigRepositoryParams {
	o.SetConfigRepositoryID(configRepositoryID)
	return o
}

// SetConfigRepositoryID adds the configRepositoryId to the update config repository params
func (o *UpdateConfigRepositoryParams) SetConfigRepositoryID(configRepositoryID uint32) {
	o.ConfigRepositoryID = configRepositoryID
}

// WithOrganizationCanonical adds the organizationCanonical to the update config repository params
func (o *UpdateConfigRepositoryParams) WithOrganizationCanonical(organizationCanonical string) *UpdateConfigRepositoryParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the update config repository params
func (o *UpdateConfigRepositoryParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *UpdateConfigRepositoryParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	// path param config_repository_id
	if err := r.SetPathParam("config_repository_id", swag.FormatUint32(o.ConfigRepositoryID)); err != nil {
		return err
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
