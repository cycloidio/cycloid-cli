// Code generated by go-swagger; DO NOT EDIT.

package organization_config_repositories

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// UpdateConfigRepositoryReader is a Reader for the UpdateConfigRepository structure.
type UpdateConfigRepositoryReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateConfigRepositoryReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateConfigRepositoryOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewUpdateConfigRepositoryNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateConfigRepositoryLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateConfigRepositoryDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateConfigRepositoryOK creates a UpdateConfigRepositoryOK with default headers values
func NewUpdateConfigRepositoryOK() *UpdateConfigRepositoryOK {
	return &UpdateConfigRepositoryOK{}
}

/*UpdateConfigRepositoryOK handles this case with default header values.

Success creation
*/
type UpdateConfigRepositoryOK struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *UpdateConfigRepositoryOKBody
}

func (o *UpdateConfigRepositoryOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/config_repositories/{config_repository_id}][%d] updateConfigRepositoryOK  %+v", 200, o.Payload)
}

func (o *UpdateConfigRepositoryOK) GetPayload() *UpdateConfigRepositoryOKBody {
	return o.Payload
}

func (o *UpdateConfigRepositoryOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(UpdateConfigRepositoryOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigRepositoryNotFound creates a UpdateConfigRepositoryNotFound with default headers values
func NewUpdateConfigRepositoryNotFound() *UpdateConfigRepositoryNotFound {
	return &UpdateConfigRepositoryNotFound{}
}

/*UpdateConfigRepositoryNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateConfigRepositoryNotFound struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

func (o *UpdateConfigRepositoryNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/config_repositories/{config_repository_id}][%d] updateConfigRepositoryNotFound  %+v", 404, o.Payload)
}

func (o *UpdateConfigRepositoryNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateConfigRepositoryNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateConfigRepositoryLengthRequired creates a UpdateConfigRepositoryLengthRequired with default headers values
func NewUpdateConfigRepositoryLengthRequired() *UpdateConfigRepositoryLengthRequired {
	return &UpdateConfigRepositoryLengthRequired{}
}

/*UpdateConfigRepositoryLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateConfigRepositoryLengthRequired struct {
}

func (o *UpdateConfigRepositoryLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/config_repositories/{config_repository_id}][%d] updateConfigRepositoryLengthRequired ", 411)
}

func (o *UpdateConfigRepositoryLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateConfigRepositoryDefault creates a UpdateConfigRepositoryDefault with default headers values
func NewUpdateConfigRepositoryDefault(code int) *UpdateConfigRepositoryDefault {
	return &UpdateConfigRepositoryDefault{
		_statusCode: code,
	}
}

/*UpdateConfigRepositoryDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateConfigRepositoryDefault struct {
	_statusCode int

	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

// Code gets the status code for the update config repository default response
func (o *UpdateConfigRepositoryDefault) Code() int {
	return o._statusCode
}

func (o *UpdateConfigRepositoryDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/config_repositories/{config_repository_id}][%d] updateConfigRepository default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateConfigRepositoryDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateConfigRepositoryDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateConfigRepositoryOKBody update config repository o k body
swagger:model UpdateConfigRepositoryOKBody
*/
type UpdateConfigRepositoryOKBody struct {

	// data
	// Required: true
	Data *models.ConfigRepository `json:"data"`
}

// Validate validates this update config repository o k body
func (o *UpdateConfigRepositoryOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateConfigRepositoryOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateConfigRepositoryOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateConfigRepositoryOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateConfigRepositoryOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateConfigRepositoryOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateConfigRepositoryOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
