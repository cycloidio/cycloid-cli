// Code generated by go-swagger; DO NOT EDIT.

package organization_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewListCredentialsParams creates a new ListCredentialsParams object
// with the default values initialized.
func NewListCredentialsParams() *ListCredentialsParams {
	var (
		pageIndexDefault = uint32(1)
		pageSizeDefault  = uint32(1000)
	)
	return &ListCredentialsParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewListCredentialsParamsWithTimeout creates a new ListCredentialsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewListCredentialsParamsWithTimeout(timeout time.Duration) *ListCredentialsParams {
	var (
		pageIndexDefault = uint32(1)
		pageSizeDefault  = uint32(1000)
	)
	return &ListCredentialsParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,

		timeout: timeout,
	}
}

// NewListCredentialsParamsWithContext creates a new ListCredentialsParams object
// with the default values initialized, and the ability to set a context for a request
func NewListCredentialsParamsWithContext(ctx context.Context) *ListCredentialsParams {
	var (
		pageIndexDefault = uint32(1)
		pageSizeDefault  = uint32(1000)
	)
	return &ListCredentialsParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,

		Context: ctx,
	}
}

// NewListCredentialsParamsWithHTTPClient creates a new ListCredentialsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewListCredentialsParamsWithHTTPClient(client *http.Client) *ListCredentialsParams {
	var (
		pageIndexDefault = uint32(1)
		pageSizeDefault  = uint32(1000)
	)
	return &ListCredentialsParams{
		PageIndex:  &pageIndexDefault,
		PageSize:   &pageSizeDefault,
		HTTPClient: client,
	}
}

/*ListCredentialsParams contains all the parameters to send to the API endpoint
for the list credentials operation typically these are written to a http.Request
*/
type ListCredentialsParams struct {

	/*CredentialType
	  A Credential type

	*/
	CredentialType *string
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*PageIndex
	  The page number to request. The first page is 1.

	*/
	PageIndex *uint32
	/*PageSize
	  The number of items at most which the response can have.

	*/
	PageSize *uint32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the list credentials params
func (o *ListCredentialsParams) WithTimeout(timeout time.Duration) *ListCredentialsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the list credentials params
func (o *ListCredentialsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the list credentials params
func (o *ListCredentialsParams) WithContext(ctx context.Context) *ListCredentialsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the list credentials params
func (o *ListCredentialsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the list credentials params
func (o *ListCredentialsParams) WithHTTPClient(client *http.Client) *ListCredentialsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the list credentials params
func (o *ListCredentialsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialType adds the credentialType to the list credentials params
func (o *ListCredentialsParams) WithCredentialType(credentialType *string) *ListCredentialsParams {
	o.SetCredentialType(credentialType)
	return o
}

// SetCredentialType adds the credentialType to the list credentials params
func (o *ListCredentialsParams) SetCredentialType(credentialType *string) {
	o.CredentialType = credentialType
}

// WithOrganizationCanonical adds the organizationCanonical to the list credentials params
func (o *ListCredentialsParams) WithOrganizationCanonical(organizationCanonical string) *ListCredentialsParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the list credentials params
func (o *ListCredentialsParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithPageIndex adds the pageIndex to the list credentials params
func (o *ListCredentialsParams) WithPageIndex(pageIndex *uint32) *ListCredentialsParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the list credentials params
func (o *ListCredentialsParams) SetPageIndex(pageIndex *uint32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the list credentials params
func (o *ListCredentialsParams) WithPageSize(pageSize *uint32) *ListCredentialsParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the list credentials params
func (o *ListCredentialsParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *ListCredentialsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CredentialType != nil {

		// query param credential_type
		var qrCredentialType string
		if o.CredentialType != nil {
			qrCredentialType = *o.CredentialType
		}
		qCredentialType := qrCredentialType
		if qCredentialType != "" {
			if err := r.SetQueryParam("credential_type", qCredentialType); err != nil {
				return err
			}
		}

	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param page_index
		var qrPageIndex uint32
		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatUint32(qrPageIndex)
		if qPageIndex != "" {
			if err := r.SetQueryParam("page_index", qPageIndex); err != nil {
				return err
			}
		}

	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32
		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {
			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
