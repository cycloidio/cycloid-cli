// Code generated by go-swagger; DO NOT EDIT.

package organization_credentials

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateCredentialReader is a Reader for the UpdateCredential structure.
type UpdateCredentialReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateCredentialReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateCredentialOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateCredentialForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateCredentialNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateCredentialLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateCredentialUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateCredentialDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateCredentialOK creates a UpdateCredentialOK with default headers values
func NewUpdateCredentialOK() *UpdateCredentialOK {
	return &UpdateCredentialOK{}
}

/*
UpdateCredentialOK describes a response with status code 200, with default header values.

Credential updated.
*/
type UpdateCredentialOK struct {
	Payload *UpdateCredentialOKBody
}

// IsSuccess returns true when this update credential o k response has a 2xx status code
func (o *UpdateCredentialOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update credential o k response has a 3xx status code
func (o *UpdateCredentialOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update credential o k response has a 4xx status code
func (o *UpdateCredentialOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update credential o k response has a 5xx status code
func (o *UpdateCredentialOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update credential o k response a status code equal to that given
func (o *UpdateCredentialOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update credential o k response
func (o *UpdateCredentialOK) Code() int {
	return 200
}

func (o *UpdateCredentialOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialOK %s", 200, payload)
}

func (o *UpdateCredentialOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialOK %s", 200, payload)
}

func (o *UpdateCredentialOK) GetPayload() *UpdateCredentialOKBody {
	return o.Payload
}

func (o *UpdateCredentialOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateCredentialOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCredentialForbidden creates a UpdateCredentialForbidden with default headers values
func NewUpdateCredentialForbidden() *UpdateCredentialForbidden {
	return &UpdateCredentialForbidden{}
}

/*
UpdateCredentialForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateCredentialForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update credential forbidden response has a 2xx status code
func (o *UpdateCredentialForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update credential forbidden response has a 3xx status code
func (o *UpdateCredentialForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update credential forbidden response has a 4xx status code
func (o *UpdateCredentialForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update credential forbidden response has a 5xx status code
func (o *UpdateCredentialForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update credential forbidden response a status code equal to that given
func (o *UpdateCredentialForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update credential forbidden response
func (o *UpdateCredentialForbidden) Code() int {
	return 403
}

func (o *UpdateCredentialForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialForbidden %s", 403, payload)
}

func (o *UpdateCredentialForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialForbidden %s", 403, payload)
}

func (o *UpdateCredentialForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateCredentialForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCredentialNotFound creates a UpdateCredentialNotFound with default headers values
func NewUpdateCredentialNotFound() *UpdateCredentialNotFound {
	return &UpdateCredentialNotFound{}
}

/*
UpdateCredentialNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateCredentialNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update credential not found response has a 2xx status code
func (o *UpdateCredentialNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update credential not found response has a 3xx status code
func (o *UpdateCredentialNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update credential not found response has a 4xx status code
func (o *UpdateCredentialNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update credential not found response has a 5xx status code
func (o *UpdateCredentialNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update credential not found response a status code equal to that given
func (o *UpdateCredentialNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update credential not found response
func (o *UpdateCredentialNotFound) Code() int {
	return 404
}

func (o *UpdateCredentialNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialNotFound %s", 404, payload)
}

func (o *UpdateCredentialNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialNotFound %s", 404, payload)
}

func (o *UpdateCredentialNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateCredentialNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCredentialLengthRequired creates a UpdateCredentialLengthRequired with default headers values
func NewUpdateCredentialLengthRequired() *UpdateCredentialLengthRequired {
	return &UpdateCredentialLengthRequired{}
}

/*
UpdateCredentialLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateCredentialLengthRequired struct {
}

// IsSuccess returns true when this update credential length required response has a 2xx status code
func (o *UpdateCredentialLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update credential length required response has a 3xx status code
func (o *UpdateCredentialLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update credential length required response has a 4xx status code
func (o *UpdateCredentialLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this update credential length required response has a 5xx status code
func (o *UpdateCredentialLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this update credential length required response a status code equal to that given
func (o *UpdateCredentialLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the update credential length required response
func (o *UpdateCredentialLengthRequired) Code() int {
	return 411
}

func (o *UpdateCredentialLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialLengthRequired", 411)
}

func (o *UpdateCredentialLengthRequired) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialLengthRequired", 411)
}

func (o *UpdateCredentialLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateCredentialUnprocessableEntity creates a UpdateCredentialUnprocessableEntity with default headers values
func NewUpdateCredentialUnprocessableEntity() *UpdateCredentialUnprocessableEntity {
	return &UpdateCredentialUnprocessableEntity{}
}

/*
UpdateCredentialUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateCredentialUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update credential unprocessable entity response has a 2xx status code
func (o *UpdateCredentialUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update credential unprocessable entity response has a 3xx status code
func (o *UpdateCredentialUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update credential unprocessable entity response has a 4xx status code
func (o *UpdateCredentialUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update credential unprocessable entity response has a 5xx status code
func (o *UpdateCredentialUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update credential unprocessable entity response a status code equal to that given
func (o *UpdateCredentialUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update credential unprocessable entity response
func (o *UpdateCredentialUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateCredentialUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCredentialUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredentialUnprocessableEntity %s", 422, payload)
}

func (o *UpdateCredentialUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateCredentialUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateCredentialDefault creates a UpdateCredentialDefault with default headers values
func NewUpdateCredentialDefault(code int) *UpdateCredentialDefault {
	return &UpdateCredentialDefault{
		_statusCode: code,
	}
}

/*
UpdateCredentialDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateCredentialDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update credential default response has a 2xx status code
func (o *UpdateCredentialDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update credential default response has a 3xx status code
func (o *UpdateCredentialDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update credential default response has a 4xx status code
func (o *UpdateCredentialDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update credential default response has a 5xx status code
func (o *UpdateCredentialDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update credential default response a status code equal to that given
func (o *UpdateCredentialDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update credential default response
func (o *UpdateCredentialDefault) Code() int {
	return o._statusCode
}

func (o *UpdateCredentialDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredential default %s", o._statusCode, payload)
}

func (o *UpdateCredentialDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/credentials/{credential_canonical}][%d] updateCredential default %s", o._statusCode, payload)
}

func (o *UpdateCredentialDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateCredentialDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateCredentialOKBody update credential o k body
swagger:model UpdateCredentialOKBody
*/
type UpdateCredentialOKBody struct {

	// data
	// Required: true
	Data *models.Credential `json:"data"`
}

// Validate validates this update credential o k body
func (o *UpdateCredentialOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCredentialOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateCredentialOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateCredentialOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateCredentialOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update credential o k body based on the context it is used
func (o *UpdateCredentialOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateCredentialOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateCredentialOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateCredentialOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateCredentialOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateCredentialOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateCredentialOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
