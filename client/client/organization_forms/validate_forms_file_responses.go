// Code generated by go-swagger; DO NOT EDIT.

package organization_forms

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// ValidateFormsFileReader is a Reader for the ValidateFormsFile structure.
type ValidateFormsFileReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ValidateFormsFileReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewValidateFormsFileOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewValidateFormsFileForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewValidateFormsFileNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewValidateFormsFileUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewValidateFormsFileDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewValidateFormsFileOK creates a ValidateFormsFileOK with default headers values
func NewValidateFormsFileOK() *ValidateFormsFileOK {
	return &ValidateFormsFileOK{}
}

/*
ValidateFormsFileOK describes a response with status code 200, with default header values.

The result of validating the provided configuration
*/
type ValidateFormsFileOK struct {
	Payload *ValidateFormsFileOKBody
}

// IsSuccess returns true when this validate forms file o k response has a 2xx status code
func (o *ValidateFormsFileOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this validate forms file o k response has a 3xx status code
func (o *ValidateFormsFileOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate forms file o k response has a 4xx status code
func (o *ValidateFormsFileOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this validate forms file o k response has a 5xx status code
func (o *ValidateFormsFileOK) IsServerError() bool {
	return false
}

// IsCode returns true when this validate forms file o k response a status code equal to that given
func (o *ValidateFormsFileOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the validate forms file o k response
func (o *ValidateFormsFileOK) Code() int {
	return 200
}

func (o *ValidateFormsFileOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileOK %s", 200, payload)
}

func (o *ValidateFormsFileOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileOK %s", 200, payload)
}

func (o *ValidateFormsFileOK) GetPayload() *ValidateFormsFileOKBody {
	return o.Payload
}

func (o *ValidateFormsFileOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ValidateFormsFileOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateFormsFileForbidden creates a ValidateFormsFileForbidden with default headers values
func NewValidateFormsFileForbidden() *ValidateFormsFileForbidden {
	return &ValidateFormsFileForbidden{}
}

/*
ValidateFormsFileForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type ValidateFormsFileForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this validate forms file forbidden response has a 2xx status code
func (o *ValidateFormsFileForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate forms file forbidden response has a 3xx status code
func (o *ValidateFormsFileForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate forms file forbidden response has a 4xx status code
func (o *ValidateFormsFileForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate forms file forbidden response has a 5xx status code
func (o *ValidateFormsFileForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this validate forms file forbidden response a status code equal to that given
func (o *ValidateFormsFileForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the validate forms file forbidden response
func (o *ValidateFormsFileForbidden) Code() int {
	return 403
}

func (o *ValidateFormsFileForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileForbidden %s", 403, payload)
}

func (o *ValidateFormsFileForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileForbidden %s", 403, payload)
}

func (o *ValidateFormsFileForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ValidateFormsFileForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateFormsFileNotFound creates a ValidateFormsFileNotFound with default headers values
func NewValidateFormsFileNotFound() *ValidateFormsFileNotFound {
	return &ValidateFormsFileNotFound{}
}

/*
ValidateFormsFileNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type ValidateFormsFileNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this validate forms file not found response has a 2xx status code
func (o *ValidateFormsFileNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate forms file not found response has a 3xx status code
func (o *ValidateFormsFileNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate forms file not found response has a 4xx status code
func (o *ValidateFormsFileNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate forms file not found response has a 5xx status code
func (o *ValidateFormsFileNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this validate forms file not found response a status code equal to that given
func (o *ValidateFormsFileNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the validate forms file not found response
func (o *ValidateFormsFileNotFound) Code() int {
	return 404
}

func (o *ValidateFormsFileNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileNotFound %s", 404, payload)
}

func (o *ValidateFormsFileNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileNotFound %s", 404, payload)
}

func (o *ValidateFormsFileNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ValidateFormsFileNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateFormsFileUnprocessableEntity creates a ValidateFormsFileUnprocessableEntity with default headers values
func NewValidateFormsFileUnprocessableEntity() *ValidateFormsFileUnprocessableEntity {
	return &ValidateFormsFileUnprocessableEntity{}
}

/*
ValidateFormsFileUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type ValidateFormsFileUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this validate forms file unprocessable entity response has a 2xx status code
func (o *ValidateFormsFileUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this validate forms file unprocessable entity response has a 3xx status code
func (o *ValidateFormsFileUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this validate forms file unprocessable entity response has a 4xx status code
func (o *ValidateFormsFileUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this validate forms file unprocessable entity response has a 5xx status code
func (o *ValidateFormsFileUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this validate forms file unprocessable entity response a status code equal to that given
func (o *ValidateFormsFileUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the validate forms file unprocessable entity response
func (o *ValidateFormsFileUnprocessableEntity) Code() int {
	return 422
}

func (o *ValidateFormsFileUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileUnprocessableEntity %s", 422, payload)
}

func (o *ValidateFormsFileUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFileUnprocessableEntity %s", 422, payload)
}

func (o *ValidateFormsFileUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ValidateFormsFileUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewValidateFormsFileDefault creates a ValidateFormsFileDefault with default headers values
func NewValidateFormsFileDefault(code int) *ValidateFormsFileDefault {
	return &ValidateFormsFileDefault{
		_statusCode: code,
	}
}

/*
ValidateFormsFileDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type ValidateFormsFileDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this validate forms file default response has a 2xx status code
func (o *ValidateFormsFileDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this validate forms file default response has a 3xx status code
func (o *ValidateFormsFileDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this validate forms file default response has a 4xx status code
func (o *ValidateFormsFileDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this validate forms file default response has a 5xx status code
func (o *ValidateFormsFileDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this validate forms file default response a status code equal to that given
func (o *ValidateFormsFileDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the validate forms file default response
func (o *ValidateFormsFileDefault) Code() int {
	return o._statusCode
}

func (o *ValidateFormsFileDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFile default %s", o._statusCode, payload)
}

func (o *ValidateFormsFileDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/forms/validate][%d] validateFormsFile default %s", o._statusCode, payload)
}

func (o *ValidateFormsFileDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ValidateFormsFileDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ValidateFormsFileOKBody validate forms file o k body
swagger:model ValidateFormsFileOKBody
*/
type ValidateFormsFileOKBody struct {

	// data
	// Required: true
	Data *models.FormsValidationResult `json:"data"`
}

// Validate validates this validate forms file o k body
func (o *ValidateFormsFileOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateFormsFileOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("validateFormsFileOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateFormsFileOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validateFormsFileOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this validate forms file o k body based on the context it is used
func (o *ValidateFormsFileOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ValidateFormsFileOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("validateFormsFileOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("validateFormsFileOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ValidateFormsFileOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ValidateFormsFileOKBody) UnmarshalBinary(b []byte) error {
	var res ValidateFormsFileOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
