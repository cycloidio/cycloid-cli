// Code generated by go-swagger; DO NOT EDIT.

package organization_infra_imports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// RetryInfraImportReader is a Reader for the RetryInfraImport structure.
type RetryInfraImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryInfraImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRetryInfraImportAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRetryInfraImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetryInfraImportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRetryInfraImportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRetryInfraImportAccepted creates a RetryInfraImportAccepted with default headers values
func NewRetryInfraImportAccepted() *RetryInfraImportAccepted {
	return &RetryInfraImportAccepted{}
}

/*
RetryInfraImportAccepted describes a response with status code 202, with default header values.

The request to retry the import has been accepted and processing in the background
*/
type RetryInfraImportAccepted struct {
}

// IsSuccess returns true when this retry infra import accepted response has a 2xx status code
func (o *RetryInfraImportAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry infra import accepted response has a 3xx status code
func (o *RetryInfraImportAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry infra import accepted response has a 4xx status code
func (o *RetryInfraImportAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry infra import accepted response has a 5xx status code
func (o *RetryInfraImportAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this retry infra import accepted response a status code equal to that given
func (o *RetryInfraImportAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the retry infra import accepted response
func (o *RetryInfraImportAccepted) Code() int {
	return 202
}

func (o *RetryInfraImportAccepted) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportAccepted", 202)
}

func (o *RetryInfraImportAccepted) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportAccepted", 202)
}

func (o *RetryInfraImportAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetryInfraImportForbidden creates a RetryInfraImportForbidden with default headers values
func NewRetryInfraImportForbidden() *RetryInfraImportForbidden {
	return &RetryInfraImportForbidden{}
}

/*
RetryInfraImportForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type RetryInfraImportForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry infra import forbidden response has a 2xx status code
func (o *RetryInfraImportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry infra import forbidden response has a 3xx status code
func (o *RetryInfraImportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry infra import forbidden response has a 4xx status code
func (o *RetryInfraImportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry infra import forbidden response has a 5xx status code
func (o *RetryInfraImportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retry infra import forbidden response a status code equal to that given
func (o *RetryInfraImportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retry infra import forbidden response
func (o *RetryInfraImportForbidden) Code() int {
	return 403
}

func (o *RetryInfraImportForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportForbidden %s", 403, payload)
}

func (o *RetryInfraImportForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportForbidden %s", 403, payload)
}

func (o *RetryInfraImportForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryInfraImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryInfraImportNotFound creates a RetryInfraImportNotFound with default headers values
func NewRetryInfraImportNotFound() *RetryInfraImportNotFound {
	return &RetryInfraImportNotFound{}
}

/*
RetryInfraImportNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type RetryInfraImportNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry infra import not found response has a 2xx status code
func (o *RetryInfraImportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry infra import not found response has a 3xx status code
func (o *RetryInfraImportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry infra import not found response has a 4xx status code
func (o *RetryInfraImportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry infra import not found response has a 5xx status code
func (o *RetryInfraImportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry infra import not found response a status code equal to that given
func (o *RetryInfraImportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry infra import not found response
func (o *RetryInfraImportNotFound) Code() int {
	return 404
}

func (o *RetryInfraImportNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportNotFound %s", 404, payload)
}

func (o *RetryInfraImportNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImportNotFound %s", 404, payload)
}

func (o *RetryInfraImportNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryInfraImportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryInfraImportDefault creates a RetryInfraImportDefault with default headers values
func NewRetryInfraImportDefault(code int) *RetryInfraImportDefault {
	return &RetryInfraImportDefault{
		_statusCode: code,
	}
}

/*
RetryInfraImportDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type RetryInfraImportDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry infra import default response has a 2xx status code
func (o *RetryInfraImportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this retry infra import default response has a 3xx status code
func (o *RetryInfraImportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this retry infra import default response has a 4xx status code
func (o *RetryInfraImportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this retry infra import default response has a 5xx status code
func (o *RetryInfraImportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this retry infra import default response a status code equal to that given
func (o *RetryInfraImportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the retry infra import default response
func (o *RetryInfraImportDefault) Code() int {
	return o._statusCode
}

func (o *RetryInfraImportDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImport default %s", o._statusCode, payload)
}

func (o *RetryInfraImportDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/import/retry][%d] retryInfraImport default %s", o._statusCode, payload)
}

func (o *RetryInfraImportDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryInfraImportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
