// Code generated by go-swagger; DO NOT EDIT.

package organization_infra_imports

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// RetryServiceCatalogImportReader is a Reader for the RetryServiceCatalogImport structure.
type RetryServiceCatalogImportReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *RetryServiceCatalogImportReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 202:
		result := NewRetryServiceCatalogImportAccepted()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewRetryServiceCatalogImportForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewRetryServiceCatalogImportNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewRetryServiceCatalogImportDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewRetryServiceCatalogImportAccepted creates a RetryServiceCatalogImportAccepted with default headers values
func NewRetryServiceCatalogImportAccepted() *RetryServiceCatalogImportAccepted {
	return &RetryServiceCatalogImportAccepted{}
}

/*
RetryServiceCatalogImportAccepted describes a response with status code 202, with default header values.

The request to retry the Stack import has been accepted and processing in the background
*/
type RetryServiceCatalogImportAccepted struct {
}

// IsSuccess returns true when this retry service catalog import accepted response has a 2xx status code
func (o *RetryServiceCatalogImportAccepted) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this retry service catalog import accepted response has a 3xx status code
func (o *RetryServiceCatalogImportAccepted) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry service catalog import accepted response has a 4xx status code
func (o *RetryServiceCatalogImportAccepted) IsClientError() bool {
	return false
}

// IsServerError returns true when this retry service catalog import accepted response has a 5xx status code
func (o *RetryServiceCatalogImportAccepted) IsServerError() bool {
	return false
}

// IsCode returns true when this retry service catalog import accepted response a status code equal to that given
func (o *RetryServiceCatalogImportAccepted) IsCode(code int) bool {
	return code == 202
}

// Code gets the status code for the retry service catalog import accepted response
func (o *RetryServiceCatalogImportAccepted) Code() int {
	return 202
}

func (o *RetryServiceCatalogImportAccepted) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportAccepted", 202)
}

func (o *RetryServiceCatalogImportAccepted) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportAccepted", 202)
}

func (o *RetryServiceCatalogImportAccepted) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewRetryServiceCatalogImportForbidden creates a RetryServiceCatalogImportForbidden with default headers values
func NewRetryServiceCatalogImportForbidden() *RetryServiceCatalogImportForbidden {
	return &RetryServiceCatalogImportForbidden{}
}

/*
RetryServiceCatalogImportForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type RetryServiceCatalogImportForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry service catalog import forbidden response has a 2xx status code
func (o *RetryServiceCatalogImportForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry service catalog import forbidden response has a 3xx status code
func (o *RetryServiceCatalogImportForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry service catalog import forbidden response has a 4xx status code
func (o *RetryServiceCatalogImportForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry service catalog import forbidden response has a 5xx status code
func (o *RetryServiceCatalogImportForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this retry service catalog import forbidden response a status code equal to that given
func (o *RetryServiceCatalogImportForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the retry service catalog import forbidden response
func (o *RetryServiceCatalogImportForbidden) Code() int {
	return 403
}

func (o *RetryServiceCatalogImportForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportForbidden %s", 403, payload)
}

func (o *RetryServiceCatalogImportForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportForbidden %s", 403, payload)
}

func (o *RetryServiceCatalogImportForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryServiceCatalogImportForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryServiceCatalogImportNotFound creates a RetryServiceCatalogImportNotFound with default headers values
func NewRetryServiceCatalogImportNotFound() *RetryServiceCatalogImportNotFound {
	return &RetryServiceCatalogImportNotFound{}
}

/*
RetryServiceCatalogImportNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type RetryServiceCatalogImportNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry service catalog import not found response has a 2xx status code
func (o *RetryServiceCatalogImportNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this retry service catalog import not found response has a 3xx status code
func (o *RetryServiceCatalogImportNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this retry service catalog import not found response has a 4xx status code
func (o *RetryServiceCatalogImportNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this retry service catalog import not found response has a 5xx status code
func (o *RetryServiceCatalogImportNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this retry service catalog import not found response a status code equal to that given
func (o *RetryServiceCatalogImportNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the retry service catalog import not found response
func (o *RetryServiceCatalogImportNotFound) Code() int {
	return 404
}

func (o *RetryServiceCatalogImportNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportNotFound %s", 404, payload)
}

func (o *RetryServiceCatalogImportNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImportNotFound %s", 404, payload)
}

func (o *RetryServiceCatalogImportNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryServiceCatalogImportNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewRetryServiceCatalogImportDefault creates a RetryServiceCatalogImportDefault with default headers values
func NewRetryServiceCatalogImportDefault(code int) *RetryServiceCatalogImportDefault {
	return &RetryServiceCatalogImportDefault{
		_statusCode: code,
	}
}

/*
RetryServiceCatalogImportDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type RetryServiceCatalogImportDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this retry service catalog import default response has a 2xx status code
func (o *RetryServiceCatalogImportDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this retry service catalog import default response has a 3xx status code
func (o *RetryServiceCatalogImportDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this retry service catalog import default response has a 4xx status code
func (o *RetryServiceCatalogImportDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this retry service catalog import default response has a 5xx status code
func (o *RetryServiceCatalogImportDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this retry service catalog import default response a status code equal to that given
func (o *RetryServiceCatalogImportDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the retry service catalog import default response
func (o *RetryServiceCatalogImportDefault) Code() int {
	return o._statusCode
}

func (o *RetryServiceCatalogImportDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImport default %s", o._statusCode, payload)
}

func (o *RetryServiceCatalogImportDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/import/retry][%d] retryServiceCatalogImport default %s", o._statusCode, payload)
}

func (o *RetryServiceCatalogImportDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *RetryServiceCatalogImportDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
