// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// GetRunningInfraAWSSubnetsReader is a Reader for the GetRunningInfraAWSSubnets structure.
type GetRunningInfraAWSSubnetsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRunningInfraAWSSubnetsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRunningInfraAWSSubnetsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRunningInfraAWSSubnetsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRunningInfraAWSSubnetsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetRunningInfraAWSSubnetsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRunningInfraAWSSubnetsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRunningInfraAWSSubnetsOK creates a GetRunningInfraAWSSubnetsOK with default headers values
func NewGetRunningInfraAWSSubnetsOK() *GetRunningInfraAWSSubnetsOK {
	return &GetRunningInfraAWSSubnetsOK{}
}

/*
GetRunningInfraAWSSubnetsOK describes a response with status code 200, with default header values.

The list of AWS subnets instances which matches the scope specified by the filter.
*/
type GetRunningInfraAWSSubnetsOK struct {
	Payload *GetRunningInfraAWSSubnetsOKBody
}

// IsSuccess returns true when this get running infra a w s subnets o k response has a 2xx status code
func (o *GetRunningInfraAWSSubnetsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get running infra a w s subnets o k response has a 3xx status code
func (o *GetRunningInfraAWSSubnetsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get running infra a w s subnets o k response has a 4xx status code
func (o *GetRunningInfraAWSSubnetsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get running infra a w s subnets o k response has a 5xx status code
func (o *GetRunningInfraAWSSubnetsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get running infra a w s subnets o k response a status code equal to that given
func (o *GetRunningInfraAWSSubnetsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get running infra a w s subnets o k response
func (o *GetRunningInfraAWSSubnetsOK) Code() int {
	return 200
}

func (o *GetRunningInfraAWSSubnetsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsOK %s", 200, payload)
}

func (o *GetRunningInfraAWSSubnetsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsOK %s", 200, payload)
}

func (o *GetRunningInfraAWSSubnetsOK) GetPayload() *GetRunningInfraAWSSubnetsOKBody {
	return o.Payload
}

func (o *GetRunningInfraAWSSubnetsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRunningInfraAWSSubnetsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunningInfraAWSSubnetsForbidden creates a GetRunningInfraAWSSubnetsForbidden with default headers values
func NewGetRunningInfraAWSSubnetsForbidden() *GetRunningInfraAWSSubnetsForbidden {
	return &GetRunningInfraAWSSubnetsForbidden{}
}

/*
GetRunningInfraAWSSubnetsForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetRunningInfraAWSSubnetsForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get running infra a w s subnets forbidden response has a 2xx status code
func (o *GetRunningInfraAWSSubnetsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get running infra a w s subnets forbidden response has a 3xx status code
func (o *GetRunningInfraAWSSubnetsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get running infra a w s subnets forbidden response has a 4xx status code
func (o *GetRunningInfraAWSSubnetsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get running infra a w s subnets forbidden response has a 5xx status code
func (o *GetRunningInfraAWSSubnetsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get running infra a w s subnets forbidden response a status code equal to that given
func (o *GetRunningInfraAWSSubnetsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get running infra a w s subnets forbidden response
func (o *GetRunningInfraAWSSubnetsForbidden) Code() int {
	return 403
}

func (o *GetRunningInfraAWSSubnetsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsForbidden %s", 403, payload)
}

func (o *GetRunningInfraAWSSubnetsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsForbidden %s", 403, payload)
}

func (o *GetRunningInfraAWSSubnetsForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRunningInfraAWSSubnetsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunningInfraAWSSubnetsNotFound creates a GetRunningInfraAWSSubnetsNotFound with default headers values
func NewGetRunningInfraAWSSubnetsNotFound() *GetRunningInfraAWSSubnetsNotFound {
	return &GetRunningInfraAWSSubnetsNotFound{}
}

/*
GetRunningInfraAWSSubnetsNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type GetRunningInfraAWSSubnetsNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get running infra a w s subnets not found response has a 2xx status code
func (o *GetRunningInfraAWSSubnetsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get running infra a w s subnets not found response has a 3xx status code
func (o *GetRunningInfraAWSSubnetsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get running infra a w s subnets not found response has a 4xx status code
func (o *GetRunningInfraAWSSubnetsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this get running infra a w s subnets not found response has a 5xx status code
func (o *GetRunningInfraAWSSubnetsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this get running infra a w s subnets not found response a status code equal to that given
func (o *GetRunningInfraAWSSubnetsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the get running infra a w s subnets not found response
func (o *GetRunningInfraAWSSubnetsNotFound) Code() int {
	return 404
}

func (o *GetRunningInfraAWSSubnetsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsNotFound %s", 404, payload)
}

func (o *GetRunningInfraAWSSubnetsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsNotFound %s", 404, payload)
}

func (o *GetRunningInfraAWSSubnetsNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRunningInfraAWSSubnetsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunningInfraAWSSubnetsUnprocessableEntity creates a GetRunningInfraAWSSubnetsUnprocessableEntity with default headers values
func NewGetRunningInfraAWSSubnetsUnprocessableEntity() *GetRunningInfraAWSSubnetsUnprocessableEntity {
	return &GetRunningInfraAWSSubnetsUnprocessableEntity{}
}

/*
GetRunningInfraAWSSubnetsUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetRunningInfraAWSSubnetsUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get running infra a w s subnets unprocessable entity response has a 2xx status code
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get running infra a w s subnets unprocessable entity response has a 3xx status code
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get running infra a w s subnets unprocessable entity response has a 4xx status code
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get running infra a w s subnets unprocessable entity response has a 5xx status code
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get running infra a w s subnets unprocessable entity response a status code equal to that given
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get running infra a w s subnets unprocessable entity response
func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) Code() int {
	return 422
}

func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsUnprocessableEntity %s", 422, payload)
}

func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnetsUnprocessableEntity %s", 422, payload)
}

func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRunningInfraAWSSubnetsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRunningInfraAWSSubnetsDefault creates a GetRunningInfraAWSSubnetsDefault with default headers values
func NewGetRunningInfraAWSSubnetsDefault(code int) *GetRunningInfraAWSSubnetsDefault {
	return &GetRunningInfraAWSSubnetsDefault{
		_statusCode: code,
	}
}

/*
GetRunningInfraAWSSubnetsDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetRunningInfraAWSSubnetsDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get running infra a w s subnets default response has a 2xx status code
func (o *GetRunningInfraAWSSubnetsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get running infra a w s subnets default response has a 3xx status code
func (o *GetRunningInfraAWSSubnetsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get running infra a w s subnets default response has a 4xx status code
func (o *GetRunningInfraAWSSubnetsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get running infra a w s subnets default response has a 5xx status code
func (o *GetRunningInfraAWSSubnetsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get running infra a w s subnets default response a status code equal to that given
func (o *GetRunningInfraAWSSubnetsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get running infra a w s subnets default response
func (o *GetRunningInfraAWSSubnetsDefault) Code() int {
	return o._statusCode
}

func (o *GetRunningInfraAWSSubnetsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnets default %s", o._statusCode, payload)
}

func (o *GetRunningInfraAWSSubnetsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infrastructures/aws/subnets][%d] getRunningInfraAWSSubnets default %s", o._statusCode, payload)
}

func (o *GetRunningInfraAWSSubnetsDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRunningInfraAWSSubnetsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetRunningInfraAWSSubnetsOKBody Although this response contains a collection of items, it doesn't have pagination because the AWS SDK, to request the subnets resources, doesn't provide any pagination mechanism.
swagger:model GetRunningInfraAWSSubnetsOKBody
*/
type GetRunningInfraAWSSubnetsOKBody struct {

	// data
	// Required: true
	Data []models.AWSInfrastructureResourceSubnet `json:"data"`
}

// Validate validates this get running infra a w s subnets o k body
func (o *GetRunningInfraAWSSubnetsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRunningInfraAWSSubnetsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getRunningInfraAWSSubnetsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this get running infra a w s subnets o k body based on context it is used
func (o *GetRunningInfraAWSSubnetsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetRunningInfraAWSSubnetsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRunningInfraAWSSubnetsOKBody) UnmarshalBinary(b []byte) error {
	var res GetRunningInfraAWSSubnetsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
