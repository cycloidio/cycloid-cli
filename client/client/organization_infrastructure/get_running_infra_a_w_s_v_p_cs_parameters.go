// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetRunningInfraAWSVPCsParams creates a new GetRunningInfraAWSVPCsParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetRunningInfraAWSVPCsParams() *GetRunningInfraAWSVPCsParams {
	return &GetRunningInfraAWSVPCsParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetRunningInfraAWSVPCsParamsWithTimeout creates a new GetRunningInfraAWSVPCsParams object
// with the ability to set a timeout on a request.
func NewGetRunningInfraAWSVPCsParamsWithTimeout(timeout time.Duration) *GetRunningInfraAWSVPCsParams {
	return &GetRunningInfraAWSVPCsParams{
		timeout: timeout,
	}
}

// NewGetRunningInfraAWSVPCsParamsWithContext creates a new GetRunningInfraAWSVPCsParams object
// with the ability to set a context for a request.
func NewGetRunningInfraAWSVPCsParamsWithContext(ctx context.Context) *GetRunningInfraAWSVPCsParams {
	return &GetRunningInfraAWSVPCsParams{
		Context: ctx,
	}
}

// NewGetRunningInfraAWSVPCsParamsWithHTTPClient creates a new GetRunningInfraAWSVPCsParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetRunningInfraAWSVPCsParamsWithHTTPClient(client *http.Client) *GetRunningInfraAWSVPCsParams {
	return &GetRunningInfraAWSVPCsParams{
		HTTPClient: client,
	}
}

/*
GetRunningInfraAWSVPCsParams contains all the parameters to send to the API endpoint

	for the get running infra a w s v p cs operation.

	Typically these are written to a http.Request.
*/
type GetRunningInfraAWSVPCsParams struct {

	/* CredentialCanonical.

	   A Credential canonical
	*/
	CredentialCanonical string

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* ProjectCanonical.

	   A list of projects' canonical to filter from
	*/
	ProjectCanonical *string

	/* Tag.

	   An amazon tag, represented as `key|value` and where `key` or `value` could be omitted but not both, in order to select resources which has a `key` or a `value` whatever is its counterpart. `key` nor `value` can contains the `|` character. The parameter can be specified several times in order to request resources which match with at least one of the `tag|value` pairs
	*/
	Tag []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get running infra a w s v p cs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunningInfraAWSVPCsParams) WithDefaults() *GetRunningInfraAWSVPCsParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get running infra a w s v p cs params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetRunningInfraAWSVPCsParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithTimeout(timeout time.Duration) *GetRunningInfraAWSVPCsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithContext(ctx context.Context) *GetRunningInfraAWSVPCsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithHTTPClient(client *http.Client) *GetRunningInfraAWSVPCsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCredentialCanonical adds the credentialCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithCredentialCanonical(credentialCanonical string) *GetRunningInfraAWSVPCsParams {
	o.SetCredentialCanonical(credentialCanonical)
	return o
}

// SetCredentialCanonical adds the credentialCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetCredentialCanonical(credentialCanonical string) {
	o.CredentialCanonical = credentialCanonical
}

// WithOrganizationCanonical adds the organizationCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithOrganizationCanonical(organizationCanonical string) *GetRunningInfraAWSVPCsParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjectCanonical adds the projectCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithProjectCanonical(projectCanonical *string) *GetRunningInfraAWSVPCsParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetProjectCanonical(projectCanonical *string) {
	o.ProjectCanonical = projectCanonical
}

// WithTag adds the tag to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) WithTag(tag []string) *GetRunningInfraAWSVPCsParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the get running infra a w s v p cs params
func (o *GetRunningInfraAWSVPCsParams) SetTag(tag []string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *GetRunningInfraAWSVPCsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param credential_canonical
	qrCredentialCanonical := o.CredentialCanonical
	qCredentialCanonical := qrCredentialCanonical
	if qCredentialCanonical != "" {

		if err := r.SetQueryParam("credential_canonical", qCredentialCanonical); err != nil {
			return err
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.ProjectCanonical != nil {

		// query param project_canonical
		var qrProjectCanonical string

		if o.ProjectCanonical != nil {
			qrProjectCanonical = *o.ProjectCanonical
		}
		qProjectCanonical := qrProjectCanonical
		if qProjectCanonical != "" {

			if err := r.SetQueryParam("project_canonical", qProjectCanonical); err != nil {
				return err
			}
		}
	}

	if o.Tag != nil {

		// binding items for tag
		joinedTag := o.bindParamTag(reg)

		// query array param tag
		if err := r.SetQueryParam("tag", joinedTag...); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// bindParamGetRunningInfraAWSVPCs binds the parameter tag
func (o *GetRunningInfraAWSVPCsParams) bindParamTag(formats strfmt.Registry) []string {
	tagIR := o.Tag

	var tagIC []string
	for _, tagIIR := range tagIR { // explode []string

		tagIIV := tagIIR // string as string
		tagIC = append(tagIC, tagIIV)
	}

	// items.CollectionFormat: "multi"
	tagIS := swag.JoinByFormat(tagIC, "multi")

	return tagIS
}
