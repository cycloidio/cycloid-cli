// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization infrastructure API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new organization infrastructure API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new organization infrastructure API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for organization infrastructure API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	GetRunningInfraAWS(params *GetRunningInfraAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSOK, error)

	GetRunningInfraAWSBuckets(params *GetRunningInfraAWSBucketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSBucketsOK, error)

	GetRunningInfraAWSDBInstances(params *GetRunningInfraAWSDBInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSDBInstancesOK, error)

	GetRunningInfraAWSElasticacheClusters(params *GetRunningInfraAWSElasticacheClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSElasticacheClustersOK, error)

	GetRunningInfraAWSImages(params *GetRunningInfraAWSImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSImagesOK, error)

	GetRunningInfraAWSInstances(params *GetRunningInfraAWSInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSInstancesOK, error)

	GetRunningInfraAWSLoadBalancersV1(params *GetRunningInfraAWSLoadBalancersV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSLoadBalancersV1OK, error)

	GetRunningInfraAWSLoadBalancersV2(params *GetRunningInfraAWSLoadBalancersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSLoadBalancersV2OK, error)

	GetRunningInfraAWSSecurityGroups(params *GetRunningInfraAWSSecurityGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSecurityGroupsOK, error)

	GetRunningInfraAWSSnapshots(params *GetRunningInfraAWSSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSnapshotsOK, error)

	GetRunningInfraAWSSubnets(params *GetRunningInfraAWSSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSubnetsOK, error)

	GetRunningInfraAWSVPCs(params *GetRunningInfraAWSVPCsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSVPCsOK, error)

	GetRunningInfraAWSVolumes(params *GetRunningInfraAWSVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSVolumesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
GetRunningInfraAWS Get the number of resources classified by types, of the running AWS infrastructure of the organization and associated AWS account (credential). The parameters allow to select the scope of the request to one project of the organization and/or a set of type of resource.
*/
func (a *Client) GetRunningInfraAWS(params *GetRunningInfraAWSParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWS",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSBuckets Get the list of S3 buckets of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSBuckets(params *GetRunningInfraAWSBucketsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSBucketsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSBucketsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSBuckets",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/buckets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSBucketsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSBucketsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSBucketsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSDBInstances Get the list of RDS DB instances of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSDBInstances(params *GetRunningInfraAWSDBInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSDBInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSDBInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSDBInstances",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/db_instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSDBInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSDBInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSDBInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSElasticacheClusters Get the list of Elasticache clusters of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSElasticacheClusters(params *GetRunningInfraAWSElasticacheClustersParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSElasticacheClustersOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSElasticacheClustersParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSElasticacheClusters",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/elasticache_clusters",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSElasticacheClustersReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSElasticacheClustersOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSElasticacheClustersDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSImages Get the list of images of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSImages(params *GetRunningInfraAWSImagesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSImagesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSImagesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSImages",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/images",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSImagesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSImagesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSImagesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSInstances Get the list of instances of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSInstances(params *GetRunningInfraAWSInstancesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSInstancesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSInstancesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSInstances",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/instances",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSInstancesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSInstancesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSInstancesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSLoadBalancersV1 Get the list of load balancers (ELB) of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSLoadBalancersV1(params *GetRunningInfraAWSLoadBalancersV1Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSLoadBalancersV1OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSLoadBalancersV1Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSLoadBalancersV1",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/load_balancers_v1",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSLoadBalancersV1Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSLoadBalancersV1OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSLoadBalancersV1Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSLoadBalancersV2 Get the list of load balancers (ELB v2 or a.k.a ALB)  of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSLoadBalancersV2(params *GetRunningInfraAWSLoadBalancersV2Params, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSLoadBalancersV2OK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSLoadBalancersV2Params()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSLoadBalancersV2",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/load_balancers_v2",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSLoadBalancersV2Reader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSLoadBalancersV2OK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSLoadBalancersV2Default)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSSecurityGroups Get the list of security groups of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSSecurityGroups(params *GetRunningInfraAWSSecurityGroupsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSecurityGroupsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSSecurityGroupsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSSecurityGroups",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/security_groups",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSSecurityGroupsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSSecurityGroupsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSSecurityGroupsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSSnapshots Get the list of snapshots of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSSnapshots(params *GetRunningInfraAWSSnapshotsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSnapshotsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSSnapshotsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSSnapshots",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/snapshots",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSSnapshotsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSSnapshotsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSSnapshotsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSSubnets Get the list of subnets of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSSubnets(params *GetRunningInfraAWSSubnetsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSSubnetsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSSubnetsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSSubnets",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/subnets",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSSubnetsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSSubnetsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSSubnetsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSVPCs Get the list of VPCs of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSVPCs(params *GetRunningInfraAWSVPCsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSVPCsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSVPCsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSVPCs",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/vpcs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSVPCsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSVPCsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSVPCsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetRunningInfraAWSVolumes Get the list of volumes of the running AWS infrastructure and associated with the AWS account (credential). The parameters allow to select the scope of the request to one project of the organization.
*/
func (a *Client) GetRunningInfraAWSVolumes(params *GetRunningInfraAWSVolumesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetRunningInfraAWSVolumesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetRunningInfraAWSVolumesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getRunningInfraAWSVolumes",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infrastructures/aws/volumes",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetRunningInfraAWSVolumesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetRunningInfraAWSVolumesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetRunningInfraAWSVolumesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
