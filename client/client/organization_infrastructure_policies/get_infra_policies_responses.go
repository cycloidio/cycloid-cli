// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetInfraPoliciesReader is a Reader for the GetInfraPolicies structure.
type GetInfraPoliciesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetInfraPoliciesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetInfraPoliciesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetInfraPoliciesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetInfraPoliciesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetInfraPoliciesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetInfraPoliciesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetInfraPoliciesOK creates a GetInfraPoliciesOK with default headers values
func NewGetInfraPoliciesOK() *GetInfraPoliciesOK {
	return &GetInfraPoliciesOK{}
}

/*GetInfraPoliciesOK handles this case with default header values.

List of infrastructure policies.
*/
type GetInfraPoliciesOK struct {
	Payload *GetInfraPoliciesOKBody
}

func (o *GetInfraPoliciesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infra_policies][%d] getInfraPoliciesOK  %+v", 200, o.Payload)
}

func (o *GetInfraPoliciesOK) GetPayload() *GetInfraPoliciesOKBody {
	return o.Payload
}

func (o *GetInfraPoliciesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetInfraPoliciesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfraPoliciesForbidden creates a GetInfraPoliciesForbidden with default headers values
func NewGetInfraPoliciesForbidden() *GetInfraPoliciesForbidden {
	return &GetInfraPoliciesForbidden{}
}

/*GetInfraPoliciesForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetInfraPoliciesForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetInfraPoliciesForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infra_policies][%d] getInfraPoliciesForbidden  %+v", 403, o.Payload)
}

func (o *GetInfraPoliciesForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetInfraPoliciesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfraPoliciesNotFound creates a GetInfraPoliciesNotFound with default headers values
func NewGetInfraPoliciesNotFound() *GetInfraPoliciesNotFound {
	return &GetInfraPoliciesNotFound{}
}

/*GetInfraPoliciesNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type GetInfraPoliciesNotFound struct {
	Payload *models.ErrorPayload
}

func (o *GetInfraPoliciesNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infra_policies][%d] getInfraPoliciesNotFound  %+v", 404, o.Payload)
}

func (o *GetInfraPoliciesNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetInfraPoliciesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfraPoliciesUnprocessableEntity creates a GetInfraPoliciesUnprocessableEntity with default headers values
func NewGetInfraPoliciesUnprocessableEntity() *GetInfraPoliciesUnprocessableEntity {
	return &GetInfraPoliciesUnprocessableEntity{}
}

/*GetInfraPoliciesUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetInfraPoliciesUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *GetInfraPoliciesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infra_policies][%d] getInfraPoliciesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetInfraPoliciesUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetInfraPoliciesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetInfraPoliciesDefault creates a GetInfraPoliciesDefault with default headers values
func NewGetInfraPoliciesDefault(code int) *GetInfraPoliciesDefault {
	return &GetInfraPoliciesDefault{
		_statusCode: code,
	}
}

/*GetInfraPoliciesDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetInfraPoliciesDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get infra policies default response
func (o *GetInfraPoliciesDefault) Code() int {
	return o._statusCode
}

func (o *GetInfraPoliciesDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/infra_policies][%d] getInfraPolicies default  %+v", o._statusCode, o.Payload)
}

func (o *GetInfraPoliciesDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetInfraPoliciesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetInfraPoliciesOKBody get infra policies o k body
swagger:model GetInfraPoliciesOKBody
*/
type GetInfraPoliciesOKBody struct {

	// data
	// Required: true
	Data []*models.InfraPolicy `json:"data"`

	// pagination
	Pagination *models.Pagination `json:"pagination,omitempty"`
}

// Validate validates this get infra policies o k body
func (o *GetInfraPoliciesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetInfraPoliciesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getInfraPoliciesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("getInfraPoliciesOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *GetInfraPoliciesOKBody) validatePagination(formats strfmt.Registry) error {

	if swag.IsZero(o.Pagination) { // not required
		return nil
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getInfraPoliciesOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetInfraPoliciesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetInfraPoliciesOKBody) UnmarshalBinary(b []byte) error {
	var res GetInfraPoliciesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
