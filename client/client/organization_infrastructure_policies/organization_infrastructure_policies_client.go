// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organization infrastructure policies API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization infrastructure policies API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateInfraPolicy Create a new policy.
*/
func (a *Client) CreateInfraPolicy(params *CreateInfraPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*CreateInfraPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInfraPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createInfraPolicy",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/infra_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInfraPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInfraPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateInfraPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInfraPolicy Delete the InfraPolicy.
*/
func (a *Client) DeleteInfraPolicy(params *DeleteInfraPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteInfraPolicyNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInfraPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteInfraPolicy",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInfraPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInfraPolicyNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInfraPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfraPolicies Return a list of infrastructure policies which matches the scope specified by the filter.
*/
func (a *Client) GetInfraPolicies(params *GetInfraPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfraPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfraPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfraPolicies",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infra_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfraPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfraPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfraPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInfraPolicy Get the information of the InfraPolicy.
*/
func (a *Client) GetInfraPolicy(params *GetInfraPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*GetInfraPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInfraPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getInfraPolicy",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInfraPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInfraPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInfraPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateInfraPolicy Update an existing InfraPolicy
*/
func (a *Client) UpdateInfraPolicy(params *UpdateInfraPolicyParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateInfraPolicyOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInfraPolicyParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateInfraPolicy",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInfraPolicyReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInfraPolicyOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateInfraPolicyDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateProjectInfraPolicies Check the InfraPolicies assigned to the Project and the Environment to identify if some are not respected.
*/
func (a *Client) ValidateProjectInfraPolicies(params *ValidateProjectInfraPoliciesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateProjectInfraPoliciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateProjectInfraPoliciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateProjectInfraPolicies",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/projects/{project_canonical}/environments/{environment_canonical}/validate_infra_policies",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateProjectInfraPoliciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateProjectInfraPoliciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateProjectInfraPoliciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
