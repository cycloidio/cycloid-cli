// Code generated by go-swagger; DO NOT EDIT.

package organization_infrastructure_policies

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateInfraPolicyReader is a Reader for the UpdateInfraPolicy structure.
type UpdateInfraPolicyReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInfraPolicyReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInfraPolicyOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateInfraPolicyForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInfraPolicyNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateInfraPolicyUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateInfraPolicyDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateInfraPolicyOK creates a UpdateInfraPolicyOK with default headers values
func NewUpdateInfraPolicyOK() *UpdateInfraPolicyOK {
	return &UpdateInfraPolicyOK{}
}

/*UpdateInfraPolicyOK handles this case with default header values.

InfraPolicy updated.
*/
type UpdateInfraPolicyOK struct {
	Payload *UpdateInfraPolicyOKBody
}

func (o *UpdateInfraPolicyOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}][%d] updateInfraPolicyOK  %+v", 200, o.Payload)
}

func (o *UpdateInfraPolicyOK) GetPayload() *UpdateInfraPolicyOKBody {
	return o.Payload
}

func (o *UpdateInfraPolicyOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateInfraPolicyOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInfraPolicyForbidden creates a UpdateInfraPolicyForbidden with default headers values
func NewUpdateInfraPolicyForbidden() *UpdateInfraPolicyForbidden {
	return &UpdateInfraPolicyForbidden{}
}

/*UpdateInfraPolicyForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateInfraPolicyForbidden struct {
	Payload *models.ErrorPayload
}

func (o *UpdateInfraPolicyForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}][%d] updateInfraPolicyForbidden  %+v", 403, o.Payload)
}

func (o *UpdateInfraPolicyForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInfraPolicyForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInfraPolicyNotFound creates a UpdateInfraPolicyNotFound with default headers values
func NewUpdateInfraPolicyNotFound() *UpdateInfraPolicyNotFound {
	return &UpdateInfraPolicyNotFound{}
}

/*UpdateInfraPolicyNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateInfraPolicyNotFound struct {
	Payload *models.ErrorPayload
}

func (o *UpdateInfraPolicyNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}][%d] updateInfraPolicyNotFound  %+v", 404, o.Payload)
}

func (o *UpdateInfraPolicyNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInfraPolicyNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInfraPolicyUnprocessableEntity creates a UpdateInfraPolicyUnprocessableEntity with default headers values
func NewUpdateInfraPolicyUnprocessableEntity() *UpdateInfraPolicyUnprocessableEntity {
	return &UpdateInfraPolicyUnprocessableEntity{}
}

/*UpdateInfraPolicyUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateInfraPolicyUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *UpdateInfraPolicyUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}][%d] updateInfraPolicyUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateInfraPolicyUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInfraPolicyUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInfraPolicyDefault creates a UpdateInfraPolicyDefault with default headers values
func NewUpdateInfraPolicyDefault(code int) *UpdateInfraPolicyDefault {
	return &UpdateInfraPolicyDefault{
		_statusCode: code,
	}
}

/*UpdateInfraPolicyDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateInfraPolicyDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the update infra policy default response
func (o *UpdateInfraPolicyDefault) Code() int {
	return o._statusCode
}

func (o *UpdateInfraPolicyDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/infra_policies/{infra_policy_canonical}][%d] updateInfraPolicy default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateInfraPolicyDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInfraPolicyDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateInfraPolicyOKBody update infra policy o k body
swagger:model UpdateInfraPolicyOKBody
*/
type UpdateInfraPolicyOKBody struct {

	// data
	// Required: true
	Data *models.InfraPolicy `json:"data"`
}

// Validate validates this update infra policy o k body
func (o *UpdateInfraPolicyOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInfraPolicyOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateInfraPolicyOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInfraPolicyOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInfraPolicyOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInfraPolicyOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateInfraPolicyOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
