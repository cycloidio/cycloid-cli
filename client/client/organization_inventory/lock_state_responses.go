// Code generated by go-swagger; DO NOT EDIT.

package organization_inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// LockStateReader is a Reader for the LockState structure.
type LockStateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LockStateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLockStateOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewLockStateForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewLockStateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewLockStateLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLockStateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLockStateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLockStateOK creates a LockStateOK with default headers values
func NewLockStateOK() *LockStateOK {
	return &LockStateOK{}
}

/*
LockStateOK describes a response with status code 200, with default header values.

Lock ID of the Organization Inventory State
*/
type LockStateOK struct {
	Payload *LockStateOKBody
}

// IsSuccess returns true when this lock state o k response has a 2xx status code
func (o *LockStateOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this lock state o k response has a 3xx status code
func (o *LockStateOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lock state o k response has a 4xx status code
func (o *LockStateOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this lock state o k response has a 5xx status code
func (o *LockStateOK) IsServerError() bool {
	return false
}

// IsCode returns true when this lock state o k response a status code equal to that given
func (o *LockStateOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the lock state o k response
func (o *LockStateOK) Code() int {
	return 200
}

func (o *LockStateOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateOK %s", 200, payload)
}

func (o *LockStateOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateOK %s", 200, payload)
}

func (o *LockStateOK) GetPayload() *LockStateOKBody {
	return o.Payload
}

func (o *LockStateOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LockStateOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockStateForbidden creates a LockStateForbidden with default headers values
func NewLockStateForbidden() *LockStateForbidden {
	return &LockStateForbidden{}
}

/*
LockStateForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type LockStateForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this lock state forbidden response has a 2xx status code
func (o *LockStateForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lock state forbidden response has a 3xx status code
func (o *LockStateForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lock state forbidden response has a 4xx status code
func (o *LockStateForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this lock state forbidden response has a 5xx status code
func (o *LockStateForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this lock state forbidden response a status code equal to that given
func (o *LockStateForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the lock state forbidden response
func (o *LockStateForbidden) Code() int {
	return 403
}

func (o *LockStateForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateForbidden %s", 403, payload)
}

func (o *LockStateForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateForbidden %s", 403, payload)
}

func (o *LockStateForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LockStateForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockStateNotFound creates a LockStateNotFound with default headers values
func NewLockStateNotFound() *LockStateNotFound {
	return &LockStateNotFound{}
}

/*
LockStateNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type LockStateNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this lock state not found response has a 2xx status code
func (o *LockStateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lock state not found response has a 3xx status code
func (o *LockStateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lock state not found response has a 4xx status code
func (o *LockStateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this lock state not found response has a 5xx status code
func (o *LockStateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this lock state not found response a status code equal to that given
func (o *LockStateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the lock state not found response
func (o *LockStateNotFound) Code() int {
	return 404
}

func (o *LockStateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateNotFound %s", 404, payload)
}

func (o *LockStateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateNotFound %s", 404, payload)
}

func (o *LockStateNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LockStateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockStateLengthRequired creates a LockStateLengthRequired with default headers values
func NewLockStateLengthRequired() *LockStateLengthRequired {
	return &LockStateLengthRequired{}
}

/*
LockStateLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type LockStateLengthRequired struct {
}

// IsSuccess returns true when this lock state length required response has a 2xx status code
func (o *LockStateLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lock state length required response has a 3xx status code
func (o *LockStateLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lock state length required response has a 4xx status code
func (o *LockStateLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this lock state length required response has a 5xx status code
func (o *LockStateLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this lock state length required response a status code equal to that given
func (o *LockStateLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the lock state length required response
func (o *LockStateLengthRequired) Code() int {
	return 411
}

func (o *LockStateLengthRequired) Error() string {
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateLengthRequired", 411)
}

func (o *LockStateLengthRequired) String() string {
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateLengthRequired", 411)
}

func (o *LockStateLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewLockStateUnprocessableEntity creates a LockStateUnprocessableEntity with default headers values
func NewLockStateUnprocessableEntity() *LockStateUnprocessableEntity {
	return &LockStateUnprocessableEntity{}
}

/*
LockStateUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type LockStateUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this lock state unprocessable entity response has a 2xx status code
func (o *LockStateUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this lock state unprocessable entity response has a 3xx status code
func (o *LockStateUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this lock state unprocessable entity response has a 4xx status code
func (o *LockStateUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this lock state unprocessable entity response has a 5xx status code
func (o *LockStateUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this lock state unprocessable entity response a status code equal to that given
func (o *LockStateUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the lock state unprocessable entity response
func (o *LockStateUnprocessableEntity) Code() int {
	return 422
}

func (o *LockStateUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateUnprocessableEntity %s", 422, payload)
}

func (o *LockStateUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockStateUnprocessableEntity %s", 422, payload)
}

func (o *LockStateUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LockStateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLockStateDefault creates a LockStateDefault with default headers values
func NewLockStateDefault(code int) *LockStateDefault {
	return &LockStateDefault{
		_statusCode: code,
	}
}

/*
LockStateDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type LockStateDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this lock state default response has a 2xx status code
func (o *LockStateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this lock state default response has a 3xx status code
func (o *LockStateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this lock state default response has a 4xx status code
func (o *LockStateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this lock state default response has a 5xx status code
func (o *LockStateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this lock state default response a status code equal to that given
func (o *LockStateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the lock state default response
func (o *LockStateDefault) Code() int {
	return o._statusCode
}

func (o *LockStateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockState default %s", o._statusCode, payload)
}

func (o *LockStateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /inventory/lock][%d] lockState default %s", o._statusCode, payload)
}

func (o *LockStateDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LockStateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
LockStateOKBody The Inventory from the Project's environment
swagger:model LockStateOKBody
*/
type LockStateOKBody struct {

	// data
	// Required: true
	Data *models.StateLock `json:"data"`
}

// Validate validates this lock state o k body
func (o *LockStateOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LockStateOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("lockStateOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockStateOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockStateOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this lock state o k body based on the context it is used
func (o *LockStateOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LockStateOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("lockStateOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("lockStateOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LockStateOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LockStateOKBody) UnmarshalBinary(b []byte) error {
	var res LockStateOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
