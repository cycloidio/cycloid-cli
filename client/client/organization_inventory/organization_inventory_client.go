// Code generated by go-swagger; DO NOT EDIT.

package organization_inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new organization inventory API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new organization inventory API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new organization inventory API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for organization inventory API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateInventoryResource(params *CreateInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInventoryResourceNoContent, error)

	CreateOrUpdateState(params *CreateOrUpdateStateParams, opts ...ClientOption) (*CreateOrUpdateStateNoContent, error)

	DeleteInventoryResource(params *DeleteInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInventoryResourceNoContent, error)

	GetInventoryResource(params *GetInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryResourceOK, error)

	GetState(params *GetStateParams, opts ...ClientOption) (*GetStateOK, error)

	ListInventoryOutputs(params *ListInventoryOutputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInventoryOutputsOK, error)

	ListInventoryResources(params *ListInventoryResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInventoryResourcesOK, error)

	ListResourceLabels(params *ListResourceLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourceLabelsOK, error)

	ListResourceTypes(params *ListResourceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourceTypesOK, error)

	LockState(params *LockStateParams, opts ...ClientOption) (*LockStateOK, error)

	UnlockState(params *UnlockStateParams, opts ...ClientOption) (*UnlockStateNoContent, error)

	UpdateInventoryResource(params *UpdateInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInventoryResourceOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateInventoryResource Create an Inventory Resource
*/
func (a *Client) CreateInventoryResource(params *CreateInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateInventoryResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateInventoryResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createInventoryResource",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateInventoryResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateInventoryResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateInventoryResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateOrUpdateState Create or update an Inventory State
*/
func (a *Client) CreateOrUpdateState(params *CreateOrUpdateStateParams, opts ...ClientOption) (*CreateOrUpdateStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOrUpdateStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOrUpdateState",
		Method:             "POST",
		PathPattern:        "/inventory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOrUpdateStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOrUpdateStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOrUpdateStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteInventoryResource Delete an Inventory Resource
*/
func (a *Client) DeleteInventoryResource(params *DeleteInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteInventoryResourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteInventoryResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteInventoryResource",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteInventoryResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteInventoryResourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteInventoryResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetInventoryResource Get the inventory resource by the ID
*/
func (a *Client) GetInventoryResource(params *GetInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetInventoryResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetInventoryResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getInventoryResource",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetInventoryResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetInventoryResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetInventoryResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetState Get the state
*/
func (a *Client) GetState(params *GetStateParams, opts ...ClientOption) (*GetStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getState",
		Method:             "GET",
		PathPattern:        "/inventory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListInventoryOutputs List the outputs of terraform states of an organization. Can be filtered by: * output_key * output_attribute * project_canonical * environment_canonical * component_canonical * service_catalog_canonical
*/
func (a *Client) ListInventoryOutputs(params *ListInventoryOutputsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInventoryOutputsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInventoryOutputsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInventoryOutputs",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/inventory/outputs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInventoryOutputsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInventoryOutputsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListInventoryOutputsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListInventoryResources List the inventory resources
*/
func (a *Client) ListInventoryResources(params *ListInventoryResourcesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListInventoryResourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListInventoryResourcesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listInventoryResources",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/inventory",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListInventoryResourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListInventoryResourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListInventoryResourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListResourceLabels List Resource Labels
*/
func (a *Client) ListResourceLabels(params *ListResourceLabelsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourceLabelsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceLabelsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceLabels",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resource_labels",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceLabelsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceLabelsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceLabelsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListResourceTypes List Resource Types
*/
func (a *Client) ListResourceTypes(params *ListResourceTypesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListResourceTypesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListResourceTypesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listResourceTypes",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resource_types",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListResourceTypesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListResourceTypesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListResourceTypesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LockState Locks an Inventory State
*/
func (a *Client) LockState(params *LockStateParams, opts ...ClientOption) (*LockStateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLockStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "lockState",
		Method:             "POST",
		PathPattern:        "/inventory/lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LockStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LockStateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LockStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UnlockState unlocks an State of Inventory
*/
func (a *Client) UnlockState(params *UnlockStateParams, opts ...ClientOption) (*UnlockStateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUnlockStateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "unlockState",
		Method:             "DELETE",
		PathPattern:        "/inventory/lock",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UnlockStateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UnlockStateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UnlockStateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateInventoryResource Create an Inventory Resource
*/
func (a *Client) UpdateInventoryResource(params *UpdateInventoryResourceParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateInventoryResourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateInventoryResourceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateInventoryResource",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateInventoryResourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateInventoryResourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateInventoryResourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
