// Code generated by go-swagger; DO NOT EDIT.

package organization_inventory

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateInventoryResourceReader is a Reader for the UpdateInventoryResource structure.
type UpdateInventoryResourceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateInventoryResourceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateInventoryResourceOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateInventoryResourceForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateInventoryResourceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateInventoryResourceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateInventoryResourceOK creates a UpdateInventoryResourceOK with default headers values
func NewUpdateInventoryResourceOK() *UpdateInventoryResourceOK {
	return &UpdateInventoryResourceOK{}
}

/*
UpdateInventoryResourceOK describes a response with status code 200, with default header values.

The updated Inventory Resource
*/
type UpdateInventoryResourceOK struct {
	Payload *UpdateInventoryResourceOKBody
}

// IsSuccess returns true when this update inventory resource o k response has a 2xx status code
func (o *UpdateInventoryResourceOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update inventory resource o k response has a 3xx status code
func (o *UpdateInventoryResourceOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inventory resource o k response has a 4xx status code
func (o *UpdateInventoryResourceOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update inventory resource o k response has a 5xx status code
func (o *UpdateInventoryResourceOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update inventory resource o k response a status code equal to that given
func (o *UpdateInventoryResourceOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update inventory resource o k response
func (o *UpdateInventoryResourceOK) Code() int {
	return 200
}

func (o *UpdateInventoryResourceOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceOK %s", 200, payload)
}

func (o *UpdateInventoryResourceOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceOK %s", 200, payload)
}

func (o *UpdateInventoryResourceOK) GetPayload() *UpdateInventoryResourceOKBody {
	return o.Payload
}

func (o *UpdateInventoryResourceOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateInventoryResourceOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryResourceForbidden creates a UpdateInventoryResourceForbidden with default headers values
func NewUpdateInventoryResourceForbidden() *UpdateInventoryResourceForbidden {
	return &UpdateInventoryResourceForbidden{}
}

/*
UpdateInventoryResourceForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateInventoryResourceForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update inventory resource forbidden response has a 2xx status code
func (o *UpdateInventoryResourceForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inventory resource forbidden response has a 3xx status code
func (o *UpdateInventoryResourceForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inventory resource forbidden response has a 4xx status code
func (o *UpdateInventoryResourceForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inventory resource forbidden response has a 5xx status code
func (o *UpdateInventoryResourceForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update inventory resource forbidden response a status code equal to that given
func (o *UpdateInventoryResourceForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update inventory resource forbidden response
func (o *UpdateInventoryResourceForbidden) Code() int {
	return 403
}

func (o *UpdateInventoryResourceForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceForbidden %s", 403, payload)
}

func (o *UpdateInventoryResourceForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceForbidden %s", 403, payload)
}

func (o *UpdateInventoryResourceForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInventoryResourceForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryResourceNotFound creates a UpdateInventoryResourceNotFound with default headers values
func NewUpdateInventoryResourceNotFound() *UpdateInventoryResourceNotFound {
	return &UpdateInventoryResourceNotFound{}
}

/*
UpdateInventoryResourceNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateInventoryResourceNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update inventory resource not found response has a 2xx status code
func (o *UpdateInventoryResourceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update inventory resource not found response has a 3xx status code
func (o *UpdateInventoryResourceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update inventory resource not found response has a 4xx status code
func (o *UpdateInventoryResourceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update inventory resource not found response has a 5xx status code
func (o *UpdateInventoryResourceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update inventory resource not found response a status code equal to that given
func (o *UpdateInventoryResourceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update inventory resource not found response
func (o *UpdateInventoryResourceNotFound) Code() int {
	return 404
}

func (o *UpdateInventoryResourceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceNotFound %s", 404, payload)
}

func (o *UpdateInventoryResourceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResourceNotFound %s", 404, payload)
}

func (o *UpdateInventoryResourceNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInventoryResourceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateInventoryResourceDefault creates a UpdateInventoryResourceDefault with default headers values
func NewUpdateInventoryResourceDefault(code int) *UpdateInventoryResourceDefault {
	return &UpdateInventoryResourceDefault{
		_statusCode: code,
	}
}

/*
UpdateInventoryResourceDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateInventoryResourceDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update inventory resource default response has a 2xx status code
func (o *UpdateInventoryResourceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update inventory resource default response has a 3xx status code
func (o *UpdateInventoryResourceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update inventory resource default response has a 4xx status code
func (o *UpdateInventoryResourceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update inventory resource default response has a 5xx status code
func (o *UpdateInventoryResourceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update inventory resource default response a status code equal to that given
func (o *UpdateInventoryResourceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update inventory resource default response
func (o *UpdateInventoryResourceDefault) Code() int {
	return o._statusCode
}

func (o *UpdateInventoryResourceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResource default %s", o._statusCode, payload)
}

func (o *UpdateInventoryResourceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/inventory/resources/{inventory_resource_id}][%d] updateInventoryResource default %s", o._statusCode, payload)
}

func (o *UpdateInventoryResourceDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateInventoryResourceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateInventoryResourceOKBody update inventory resource o k body
swagger:model UpdateInventoryResourceOKBody
*/
type UpdateInventoryResourceOKBody struct {

	// data
	// Required: true
	Data *models.InventoryResource `json:"data"`
}

// Validate validates this update inventory resource o k body
func (o *UpdateInventoryResourceOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInventoryResourceOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateInventoryResourceOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInventoryResourceOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateInventoryResourceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update inventory resource o k body based on the context it is used
func (o *UpdateInventoryResourceOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateInventoryResourceOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateInventoryResourceOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateInventoryResourceOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateInventoryResourceOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateInventoryResourceOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateInventoryResourceOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
