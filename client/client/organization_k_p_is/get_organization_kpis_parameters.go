// Code generated by go-swagger; DO NOT EDIT.

package organization_k_p_is

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrganizationKpisParams creates a new GetOrganizationKpisParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrganizationKpisParams() *GetOrganizationKpisParams {
	return &GetOrganizationKpisParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrganizationKpisParamsWithTimeout creates a new GetOrganizationKpisParams object
// with the ability to set a timeout on a request.
func NewGetOrganizationKpisParamsWithTimeout(timeout time.Duration) *GetOrganizationKpisParams {
	return &GetOrganizationKpisParams{
		timeout: timeout,
	}
}

// NewGetOrganizationKpisParamsWithContext creates a new GetOrganizationKpisParams object
// with the ability to set a context for a request.
func NewGetOrganizationKpisParamsWithContext(ctx context.Context) *GetOrganizationKpisParams {
	return &GetOrganizationKpisParams{
		Context: ctx,
	}
}

// NewGetOrganizationKpisParamsWithHTTPClient creates a new GetOrganizationKpisParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrganizationKpisParamsWithHTTPClient(client *http.Client) *GetOrganizationKpisParams {
	return &GetOrganizationKpisParams{
		HTTPClient: client,
	}
}

/*
GetOrganizationKpisParams contains all the parameters to send to the API endpoint

	for the get organization kpis operation.

	Typically these are written to a http.Request.
*/
type GetOrganizationKpisParams struct {

	/* Begin.

	   The unix timestamp in milliseconds, which indicate the start of the time range.

	   Format: uint64
	*/
	Begin *uint64

	/* End.

	   The unix timestamp in milliseconds, which indicate the end of the time range.

	   Format: uint64
	*/
	End *uint64

	/* Favorite.

	   Flag to retrieve favorite data from the members favorite list.

	*/
	Favorite *bool

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* PageIndex.

	   The page number to request. The first page is 1.

	   Format: uint32
	   Default: 1
	*/
	PageIndex *uint32

	/* PageSize.

	   The number of items at most which the response can have.

	   Format: uint32
	   Default: 1000
	*/
	PageSize *uint32

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get organization kpis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationKpisParams) WithDefaults() *GetOrganizationKpisParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get organization kpis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrganizationKpisParams) SetDefaults() {
	var (
		pageIndexDefault = uint32(1)

		pageSizeDefault = uint32(1000)
	)

	val := GetOrganizationKpisParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get organization kpis params
func (o *GetOrganizationKpisParams) WithTimeout(timeout time.Duration) *GetOrganizationKpisParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get organization kpis params
func (o *GetOrganizationKpisParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get organization kpis params
func (o *GetOrganizationKpisParams) WithContext(ctx context.Context) *GetOrganizationKpisParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get organization kpis params
func (o *GetOrganizationKpisParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get organization kpis params
func (o *GetOrganizationKpisParams) WithHTTPClient(client *http.Client) *GetOrganizationKpisParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get organization kpis params
func (o *GetOrganizationKpisParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get organization kpis params
func (o *GetOrganizationKpisParams) WithBegin(begin *uint64) *GetOrganizationKpisParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get organization kpis params
func (o *GetOrganizationKpisParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithEnd adds the end to the get organization kpis params
func (o *GetOrganizationKpisParams) WithEnd(end *uint64) *GetOrganizationKpisParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get organization kpis params
func (o *GetOrganizationKpisParams) SetEnd(end *uint64) {
	o.End = end
}

// WithFavorite adds the favorite to the get organization kpis params
func (o *GetOrganizationKpisParams) WithFavorite(favorite *bool) *GetOrganizationKpisParams {
	o.SetFavorite(favorite)
	return o
}

// SetFavorite adds the favorite to the get organization kpis params
func (o *GetOrganizationKpisParams) SetFavorite(favorite *bool) {
	o.Favorite = favorite
}

// WithOrganizationCanonical adds the organizationCanonical to the get organization kpis params
func (o *GetOrganizationKpisParams) WithOrganizationCanonical(organizationCanonical string) *GetOrganizationKpisParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get organization kpis params
func (o *GetOrganizationKpisParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithPageIndex adds the pageIndex to the get organization kpis params
func (o *GetOrganizationKpisParams) WithPageIndex(pageIndex *uint32) *GetOrganizationKpisParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the get organization kpis params
func (o *GetOrganizationKpisParams) SetPageIndex(pageIndex *uint32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the get organization kpis params
func (o *GetOrganizationKpisParams) WithPageSize(pageSize *uint32) *GetOrganizationKpisParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get organization kpis params
func (o *GetOrganizationKpisParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrganizationKpisParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64

		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {

			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd uint64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.Favorite != nil {

		// query param favorite
		var qrFavorite bool

		if o.Favorite != nil {
			qrFavorite = *o.Favorite
		}
		qFavorite := swag.FormatBool(qrFavorite)
		if qFavorite != "" {

			if err := r.SetQueryParam("favorite", qFavorite); err != nil {
				return err
			}
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param page_index
		var qrPageIndex uint32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatUint32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page_index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
