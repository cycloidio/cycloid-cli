// Code generated by go-swagger; DO NOT EDIT.

package organization_kpis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetKpisParams creates a new GetKpisParams object
// with the default values initialized.
func NewGetKpisParams() *GetKpisParams {
	var ()
	return &GetKpisParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetKpisParamsWithTimeout creates a new GetKpisParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetKpisParamsWithTimeout(timeout time.Duration) *GetKpisParams {
	var ()
	return &GetKpisParams{

		timeout: timeout,
	}
}

// NewGetKpisParamsWithContext creates a new GetKpisParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetKpisParamsWithContext(ctx context.Context) *GetKpisParams {
	var ()
	return &GetKpisParams{

		Context: ctx,
	}
}

// NewGetKpisParamsWithHTTPClient creates a new GetKpisParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetKpisParamsWithHTTPClient(client *http.Client) *GetKpisParams {
	var ()
	return &GetKpisParams{
		HTTPClient: client,
	}
}

/*GetKpisParams contains all the parameters to send to the API endpoint
for the get kpis operation typically these are written to a http.Request
*/
type GetKpisParams struct {

	/*Begin
	  The unix timestamp in seconds, which indicate the start of the time range.

	*/
	Begin *uint64
	/*End
	  The unix timestamp in seconds, which indicate the end of the time range.

	*/
	End *uint64
	/*Environment
	  The environment canonical to use a query filter

	*/
	Environment *string
	/*FetchData
	  Flag to retrieve KPIs' data upon retrieveing KPIs themselves


	*/
	FetchData *bool
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*Project
	  A canonical of a project used for filtering.

	*/
	Project *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get kpis params
func (o *GetKpisParams) WithTimeout(timeout time.Duration) *GetKpisParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get kpis params
func (o *GetKpisParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get kpis params
func (o *GetKpisParams) WithContext(ctx context.Context) *GetKpisParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get kpis params
func (o *GetKpisParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get kpis params
func (o *GetKpisParams) WithHTTPClient(client *http.Client) *GetKpisParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get kpis params
func (o *GetKpisParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get kpis params
func (o *GetKpisParams) WithBegin(begin *uint64) *GetKpisParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get kpis params
func (o *GetKpisParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithEnd adds the end to the get kpis params
func (o *GetKpisParams) WithEnd(end *uint64) *GetKpisParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get kpis params
func (o *GetKpisParams) SetEnd(end *uint64) {
	o.End = end
}

// WithEnvironment adds the environment to the get kpis params
func (o *GetKpisParams) WithEnvironment(environment *string) *GetKpisParams {
	o.SetEnvironment(environment)
	return o
}

// SetEnvironment adds the environment to the get kpis params
func (o *GetKpisParams) SetEnvironment(environment *string) {
	o.Environment = environment
}

// WithFetchData adds the fetchData to the get kpis params
func (o *GetKpisParams) WithFetchData(fetchData *bool) *GetKpisParams {
	o.SetFetchData(fetchData)
	return o
}

// SetFetchData adds the fetchData to the get kpis params
func (o *GetKpisParams) SetFetchData(fetchData *bool) {
	o.FetchData = fetchData
}

// WithOrganizationCanonical adds the organizationCanonical to the get kpis params
func (o *GetKpisParams) WithOrganizationCanonical(organizationCanonical string) *GetKpisParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get kpis params
func (o *GetKpisParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProject adds the project to the get kpis params
func (o *GetKpisParams) WithProject(project *string) *GetKpisParams {
	o.SetProject(project)
	return o
}

// SetProject adds the project to the get kpis params
func (o *GetKpisParams) SetProject(project *string) {
	o.Project = project
}

// WriteToRequest writes these params to a swagger request
func (o *GetKpisParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64
		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {
			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param end
		var qrEnd uint64
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	if o.Environment != nil {

		// query param environment
		var qrEnvironment string
		if o.Environment != nil {
			qrEnvironment = *o.Environment
		}
		qEnvironment := qrEnvironment
		if qEnvironment != "" {
			if err := r.SetQueryParam("environment", qEnvironment); err != nil {
				return err
			}
		}

	}

	if o.FetchData != nil {

		// query param fetch_data
		var qrFetchData bool
		if o.FetchData != nil {
			qrFetchData = *o.FetchData
		}
		qFetchData := swag.FormatBool(qrFetchData)
		if qFetchData != "" {
			if err := r.SetQueryParam("fetch_data", qFetchData); err != nil {
				return err
			}
		}

	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.Project != nil {

		// query param project
		var qrProject string
		if o.Project != nil {
			qrProject = *o.Project
		}
		qProject := qrProject
		if qProject != "" {
			if err := r.SetQueryParam("project", qProject); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
