// Code generated by go-swagger; DO NOT EDIT.

package organization_kpis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetKpisParams creates a new GetKpisParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetKpisParams() *GetKpisParams {
	return &GetKpisParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetKpisParamsWithTimeout creates a new GetKpisParams object
// with the ability to set a timeout on a request.
func NewGetKpisParamsWithTimeout(timeout time.Duration) *GetKpisParams {
	return &GetKpisParams{
		timeout: timeout,
	}
}

// NewGetKpisParamsWithContext creates a new GetKpisParams object
// with the ability to set a context for a request.
func NewGetKpisParamsWithContext(ctx context.Context) *GetKpisParams {
	return &GetKpisParams{
		Context: ctx,
	}
}

// NewGetKpisParamsWithHTTPClient creates a new GetKpisParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetKpisParamsWithHTTPClient(client *http.Client) *GetKpisParams {
	return &GetKpisParams{
		HTTPClient: client,
	}
}

/*
GetKpisParams contains all the parameters to send to the API endpoint

	for the get kpis operation.

	Typically these are written to a http.Request.
*/
type GetKpisParams struct {

	/* Begin.

	   The unix timestamp in seconds, which indicate the start of the time range.

	   Format: uint64
	*/
	Begin *uint64

	/* End.

	   The unix timestamp in seconds, which indicate the end of the time range.

	   Format: uint64
	*/
	End *uint64

	/* EnvironmentCanonical.

	   A list of environments' canonical to filter from
	*/
	EnvironmentCanonical *string

	/* Favorite.

	   Flag to retrieve favorite data from the members favorite list.

	*/
	Favorite *bool

	/* FetchData.

	   Flag to retrieve KPIs' data upon retrieving KPIs themselves

	*/
	FetchData *bool

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* PageIndex.

	   The page number to request. The first page is 1.

	   Format: uint32
	   Default: 1
	*/
	PageIndex *uint32

	/* PageSize.

	   The number of items at most which the response can have.

	   Format: uint32
	   Default: 1000
	*/
	PageSize *uint32

	/* ProjectCanonical.

	   A list of projects' canonical to filter from
	*/
	ProjectCanonical *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get kpis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKpisParams) WithDefaults() *GetKpisParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get kpis params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetKpisParams) SetDefaults() {
	var (
		pageIndexDefault = uint32(1)

		pageSizeDefault = uint32(1000)
	)

	val := GetKpisParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get kpis params
func (o *GetKpisParams) WithTimeout(timeout time.Duration) *GetKpisParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get kpis params
func (o *GetKpisParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get kpis params
func (o *GetKpisParams) WithContext(ctx context.Context) *GetKpisParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get kpis params
func (o *GetKpisParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get kpis params
func (o *GetKpisParams) WithHTTPClient(client *http.Client) *GetKpisParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get kpis params
func (o *GetKpisParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get kpis params
func (o *GetKpisParams) WithBegin(begin *uint64) *GetKpisParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get kpis params
func (o *GetKpisParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithEnd adds the end to the get kpis params
func (o *GetKpisParams) WithEnd(end *uint64) *GetKpisParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get kpis params
func (o *GetKpisParams) SetEnd(end *uint64) {
	o.End = end
}

// WithEnvironmentCanonical adds the environmentCanonical to the get kpis params
func (o *GetKpisParams) WithEnvironmentCanonical(environmentCanonical *string) *GetKpisParams {
	o.SetEnvironmentCanonical(environmentCanonical)
	return o
}

// SetEnvironmentCanonical adds the environmentCanonical to the get kpis params
func (o *GetKpisParams) SetEnvironmentCanonical(environmentCanonical *string) {
	o.EnvironmentCanonical = environmentCanonical
}

// WithFavorite adds the favorite to the get kpis params
func (o *GetKpisParams) WithFavorite(favorite *bool) *GetKpisParams {
	o.SetFavorite(favorite)
	return o
}

// SetFavorite adds the favorite to the get kpis params
func (o *GetKpisParams) SetFavorite(favorite *bool) {
	o.Favorite = favorite
}

// WithFetchData adds the fetchData to the get kpis params
func (o *GetKpisParams) WithFetchData(fetchData *bool) *GetKpisParams {
	o.SetFetchData(fetchData)
	return o
}

// SetFetchData adds the fetchData to the get kpis params
func (o *GetKpisParams) SetFetchData(fetchData *bool) {
	o.FetchData = fetchData
}

// WithOrganizationCanonical adds the organizationCanonical to the get kpis params
func (o *GetKpisParams) WithOrganizationCanonical(organizationCanonical string) *GetKpisParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get kpis params
func (o *GetKpisParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithPageIndex adds the pageIndex to the get kpis params
func (o *GetKpisParams) WithPageIndex(pageIndex *uint32) *GetKpisParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the get kpis params
func (o *GetKpisParams) SetPageIndex(pageIndex *uint32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the get kpis params
func (o *GetKpisParams) WithPageSize(pageSize *uint32) *GetKpisParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get kpis params
func (o *GetKpisParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WithProjectCanonical adds the projectCanonical to the get kpis params
func (o *GetKpisParams) WithProjectCanonical(projectCanonical *string) *GetKpisParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get kpis params
func (o *GetKpisParams) SetProjectCanonical(projectCanonical *string) {
	o.ProjectCanonical = projectCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetKpisParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64

		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {

			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd uint64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	if o.EnvironmentCanonical != nil {

		// query param environment_canonical
		var qrEnvironmentCanonical string

		if o.EnvironmentCanonical != nil {
			qrEnvironmentCanonical = *o.EnvironmentCanonical
		}
		qEnvironmentCanonical := qrEnvironmentCanonical
		if qEnvironmentCanonical != "" {

			if err := r.SetQueryParam("environment_canonical", qEnvironmentCanonical); err != nil {
				return err
			}
		}
	}

	if o.Favorite != nil {

		// query param favorite
		var qrFavorite bool

		if o.Favorite != nil {
			qrFavorite = *o.Favorite
		}
		qFavorite := swag.FormatBool(qrFavorite)
		if qFavorite != "" {

			if err := r.SetQueryParam("favorite", qFavorite); err != nil {
				return err
			}
		}
	}

	if o.FetchData != nil {

		// query param fetch_data
		var qrFetchData bool

		if o.FetchData != nil {
			qrFetchData = *o.FetchData
		}
		qFetchData := swag.FormatBool(qrFetchData)
		if qFetchData != "" {

			if err := r.SetQueryParam("fetch_data", qFetchData); err != nil {
				return err
			}
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param page_index
		var qrPageIndex uint32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatUint32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page_index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.ProjectCanonical != nil {

		// query param project_canonical
		var qrProjectCanonical string

		if o.ProjectCanonical != nil {
			qrProjectCanonical = *o.ProjectCanonical
		}
		qProjectCanonical := qrProjectCanonical
		if qProjectCanonical != "" {

			if err := r.SetQueryParam("project_canonical", qProjectCanonical); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
