// Code generated by go-swagger; DO NOT EDIT.

package organization_kpis

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organization kpis API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization kpis API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateKPIFavorite Add a kpi in the user favorites list.
*/
func (a *Client) CreateKPIFavorite(params *CreateKPIFavoriteParams, authInfo runtime.ClientAuthInfoWriter) (*CreateKPIFavoriteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKPIFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKPIFavorite",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/kpis/{kpi_canonical}/favorites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateKPIFavoriteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKPIFavoriteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateKPIFavoriteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateKpi Save information about the KPI
*/
func (a *Client) CreateKpi(params *CreateKpiParams, authInfo runtime.ClientAuthInfoWriter) (*CreateKpiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateKpiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createKpi",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/kpis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateKpiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateKpiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateKpiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteKPIFavorite Remove a kpi from the user favorites list.
*/
func (a *Client) DeleteKPIFavorite(params *DeleteKPIFavoriteParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKPIFavoriteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKPIFavoriteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKPIFavorite",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/kpis/{kpi_canonical}/favorites",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKPIFavoriteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKPIFavoriteNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteKPIFavoriteDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteKpi delete a KPI
*/
func (a *Client) DeleteKpi(params *DeleteKpiParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteKpiNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteKpiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteKpi",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/kpis/{kpi_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteKpiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteKpiNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteKpiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKpi Get the KPI
*/
func (a *Client) GetKpi(params *GetKpiParams, authInfo runtime.ClientAuthInfoWriter) (*GetKpiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKpiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKpi",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/kpis/{kpi_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKpiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKpiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKpiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetKpis Get the list of configured organization KPIs
*/
func (a *Client) GetKpis(params *GetKpisParams, authInfo runtime.ClientAuthInfoWriter) (*GetKpisOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetKpisParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getKpis",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/kpis",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetKpisReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetKpisOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetKpisDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateKpi Update a KPI
*/
func (a *Client) UpdateKpi(params *UpdateKpiParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateKpiOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateKpiParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateKpi",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/kpis/{kpi_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateKpiReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateKpiOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateKpiDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
