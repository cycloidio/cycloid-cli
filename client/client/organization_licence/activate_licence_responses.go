// Code generated by go-swagger; DO NOT EDIT.

package organization_licence

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// ActivateLicenceReader is a Reader for the ActivateLicence structure.
type ActivateLicenceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ActivateLicenceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewActivateLicenceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewActivateLicenceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewActivateLicenceLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewActivateLicenceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewActivateLicenceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewActivateLicenceNoContent creates a ActivateLicenceNoContent with default headers values
func NewActivateLicenceNoContent() *ActivateLicenceNoContent {
	return &ActivateLicenceNoContent{}
}

/*
ActivateLicenceNoContent describes a response with status code 204, with default header values.

The product has been activated
*/
type ActivateLicenceNoContent struct {
}

// IsSuccess returns true when this activate licence no content response has a 2xx status code
func (o *ActivateLicenceNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this activate licence no content response has a 3xx status code
func (o *ActivateLicenceNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate licence no content response has a 4xx status code
func (o *ActivateLicenceNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this activate licence no content response has a 5xx status code
func (o *ActivateLicenceNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this activate licence no content response a status code equal to that given
func (o *ActivateLicenceNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the activate licence no content response
func (o *ActivateLicenceNoContent) Code() int {
	return 204
}

func (o *ActivateLicenceNoContent) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceNoContent", 204)
}

func (o *ActivateLicenceNoContent) String() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceNoContent", 204)
}

func (o *ActivateLicenceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewActivateLicenceNotFound creates a ActivateLicenceNotFound with default headers values
func NewActivateLicenceNotFound() *ActivateLicenceNotFound {
	return &ActivateLicenceNotFound{}
}

/*
ActivateLicenceNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type ActivateLicenceNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this activate licence not found response has a 2xx status code
func (o *ActivateLicenceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate licence not found response has a 3xx status code
func (o *ActivateLicenceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate licence not found response has a 4xx status code
func (o *ActivateLicenceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate licence not found response has a 5xx status code
func (o *ActivateLicenceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this activate licence not found response a status code equal to that given
func (o *ActivateLicenceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the activate licence not found response
func (o *ActivateLicenceNotFound) Code() int {
	return 404
}

func (o *ActivateLicenceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceNotFound %s", 404, payload)
}

func (o *ActivateLicenceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceNotFound %s", 404, payload)
}

func (o *ActivateLicenceNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ActivateLicenceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivateLicenceLengthRequired creates a ActivateLicenceLengthRequired with default headers values
func NewActivateLicenceLengthRequired() *ActivateLicenceLengthRequired {
	return &ActivateLicenceLengthRequired{}
}

/*
ActivateLicenceLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type ActivateLicenceLengthRequired struct {
}

// IsSuccess returns true when this activate licence length required response has a 2xx status code
func (o *ActivateLicenceLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate licence length required response has a 3xx status code
func (o *ActivateLicenceLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate licence length required response has a 4xx status code
func (o *ActivateLicenceLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate licence length required response has a 5xx status code
func (o *ActivateLicenceLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this activate licence length required response a status code equal to that given
func (o *ActivateLicenceLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the activate licence length required response
func (o *ActivateLicenceLengthRequired) Code() int {
	return 411
}

func (o *ActivateLicenceLengthRequired) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceLengthRequired", 411)
}

func (o *ActivateLicenceLengthRequired) String() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceLengthRequired", 411)
}

func (o *ActivateLicenceLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewActivateLicenceUnprocessableEntity creates a ActivateLicenceUnprocessableEntity with default headers values
func NewActivateLicenceUnprocessableEntity() *ActivateLicenceUnprocessableEntity {
	return &ActivateLicenceUnprocessableEntity{}
}

/*
ActivateLicenceUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type ActivateLicenceUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this activate licence unprocessable entity response has a 2xx status code
func (o *ActivateLicenceUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this activate licence unprocessable entity response has a 3xx status code
func (o *ActivateLicenceUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this activate licence unprocessable entity response has a 4xx status code
func (o *ActivateLicenceUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this activate licence unprocessable entity response has a 5xx status code
func (o *ActivateLicenceUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this activate licence unprocessable entity response a status code equal to that given
func (o *ActivateLicenceUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the activate licence unprocessable entity response
func (o *ActivateLicenceUnprocessableEntity) Code() int {
	return 422
}

func (o *ActivateLicenceUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceUnprocessableEntity %s", 422, payload)
}

func (o *ActivateLicenceUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicenceUnprocessableEntity %s", 422, payload)
}

func (o *ActivateLicenceUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ActivateLicenceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewActivateLicenceDefault creates a ActivateLicenceDefault with default headers values
func NewActivateLicenceDefault(code int) *ActivateLicenceDefault {
	return &ActivateLicenceDefault{
		_statusCode: code,
	}
}

/*
ActivateLicenceDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type ActivateLicenceDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this activate licence default response has a 2xx status code
func (o *ActivateLicenceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this activate licence default response has a 3xx status code
func (o *ActivateLicenceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this activate licence default response has a 4xx status code
func (o *ActivateLicenceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this activate licence default response has a 5xx status code
func (o *ActivateLicenceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this activate licence default response a status code equal to that given
func (o *ActivateLicenceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the activate licence default response
func (o *ActivateLicenceDefault) Code() int {
	return o._statusCode
}

func (o *ActivateLicenceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicence default %s", o._statusCode, payload)
}

func (o *ActivateLicenceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/licence][%d] activateLicence default %s", o._statusCode, payload)
}

func (o *ActivateLicenceDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ActivateLicenceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
