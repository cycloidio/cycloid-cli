// Code generated by go-swagger; DO NOT EDIT.

package organization_members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetOrgMembersParams creates a new GetOrgMembersParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetOrgMembersParams() *GetOrgMembersParams {
	return &GetOrgMembersParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgMembersParamsWithTimeout creates a new GetOrgMembersParams object
// with the ability to set a timeout on a request.
func NewGetOrgMembersParamsWithTimeout(timeout time.Duration) *GetOrgMembersParams {
	return &GetOrgMembersParams{
		timeout: timeout,
	}
}

// NewGetOrgMembersParamsWithContext creates a new GetOrgMembersParams object
// with the ability to set a context for a request.
func NewGetOrgMembersParamsWithContext(ctx context.Context) *GetOrgMembersParams {
	return &GetOrgMembersParams{
		Context: ctx,
	}
}

// NewGetOrgMembersParamsWithHTTPClient creates a new GetOrgMembersParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetOrgMembersParamsWithHTTPClient(client *http.Client) *GetOrgMembersParams {
	return &GetOrgMembersParams{
		HTTPClient: client,
	}
}

/*
GetOrgMembersParams contains all the parameters to send to the API endpoint

	for the get org members operation.

	Typically these are written to a http.Request.
*/
type GetOrgMembersParams struct {

	/* InvitationState.

	   Search by Invitation's state
	*/
	InvitationState *string

	/* MemberCreatedAt.

	   Search by member joining date

	   Format: uint64
	*/
	MemberCreatedAt *uint64

	/* OrderBy.

	   Allows to order the list of items. Example usage: field_name:asc

	*/
	OrderBy *string

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* PageIndex.

	   The page number to request. The first page is 1.

	   Format: uint32
	   Default: 1
	*/
	PageIndex *uint32

	/* PageSize.

	   The number of items at most which the response can have.

	   Format: uint32
	   Default: 1000
	*/
	PageSize *uint32

	/* RoleName.

	   Search by the role's name
	*/
	RoleName *string

	/* UserCanonical.

	   Search by the user canonical
	*/
	UserCanonical *string

	/* UserCreatedAt.

	   Search by user creation date

	   Format: uint64
	*/
	UserCreatedAt *uint64

	/* UserFamilyName.

	   Search by the user's family name
	*/
	UserFamilyName *string

	/* UserGivenName.

	   Search by the user's given name
	*/
	UserGivenName *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get org members params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgMembersParams) WithDefaults() *GetOrgMembersParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get org members params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetOrgMembersParams) SetDefaults() {
	var (
		pageIndexDefault = uint32(1)

		pageSizeDefault = uint32(1000)
	)

	val := GetOrgMembersParams{
		PageIndex: &pageIndexDefault,
		PageSize:  &pageSizeDefault,
	}

	val.timeout = o.timeout
	val.Context = o.Context
	val.HTTPClient = o.HTTPClient
	*o = val
}

// WithTimeout adds the timeout to the get org members params
func (o *GetOrgMembersParams) WithTimeout(timeout time.Duration) *GetOrgMembersParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get org members params
func (o *GetOrgMembersParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get org members params
func (o *GetOrgMembersParams) WithContext(ctx context.Context) *GetOrgMembersParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get org members params
func (o *GetOrgMembersParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get org members params
func (o *GetOrgMembersParams) WithHTTPClient(client *http.Client) *GetOrgMembersParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get org members params
func (o *GetOrgMembersParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInvitationState adds the invitationState to the get org members params
func (o *GetOrgMembersParams) WithInvitationState(invitationState *string) *GetOrgMembersParams {
	o.SetInvitationState(invitationState)
	return o
}

// SetInvitationState adds the invitationState to the get org members params
func (o *GetOrgMembersParams) SetInvitationState(invitationState *string) {
	o.InvitationState = invitationState
}

// WithMemberCreatedAt adds the memberCreatedAt to the get org members params
func (o *GetOrgMembersParams) WithMemberCreatedAt(memberCreatedAt *uint64) *GetOrgMembersParams {
	o.SetMemberCreatedAt(memberCreatedAt)
	return o
}

// SetMemberCreatedAt adds the memberCreatedAt to the get org members params
func (o *GetOrgMembersParams) SetMemberCreatedAt(memberCreatedAt *uint64) {
	o.MemberCreatedAt = memberCreatedAt
}

// WithOrderBy adds the orderBy to the get org members params
func (o *GetOrgMembersParams) WithOrderBy(orderBy *string) *GetOrgMembersParams {
	o.SetOrderBy(orderBy)
	return o
}

// SetOrderBy adds the orderBy to the get org members params
func (o *GetOrgMembersParams) SetOrderBy(orderBy *string) {
	o.OrderBy = orderBy
}

// WithOrganizationCanonical adds the organizationCanonical to the get org members params
func (o *GetOrgMembersParams) WithOrganizationCanonical(organizationCanonical string) *GetOrgMembersParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get org members params
func (o *GetOrgMembersParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithPageIndex adds the pageIndex to the get org members params
func (o *GetOrgMembersParams) WithPageIndex(pageIndex *uint32) *GetOrgMembersParams {
	o.SetPageIndex(pageIndex)
	return o
}

// SetPageIndex adds the pageIndex to the get org members params
func (o *GetOrgMembersParams) SetPageIndex(pageIndex *uint32) {
	o.PageIndex = pageIndex
}

// WithPageSize adds the pageSize to the get org members params
func (o *GetOrgMembersParams) WithPageSize(pageSize *uint32) *GetOrgMembersParams {
	o.SetPageSize(pageSize)
	return o
}

// SetPageSize adds the pageSize to the get org members params
func (o *GetOrgMembersParams) SetPageSize(pageSize *uint32) {
	o.PageSize = pageSize
}

// WithRoleName adds the roleName to the get org members params
func (o *GetOrgMembersParams) WithRoleName(roleName *string) *GetOrgMembersParams {
	o.SetRoleName(roleName)
	return o
}

// SetRoleName adds the roleName to the get org members params
func (o *GetOrgMembersParams) SetRoleName(roleName *string) {
	o.RoleName = roleName
}

// WithUserCanonical adds the userCanonical to the get org members params
func (o *GetOrgMembersParams) WithUserCanonical(userCanonical *string) *GetOrgMembersParams {
	o.SetUserCanonical(userCanonical)
	return o
}

// SetUserCanonical adds the userCanonical to the get org members params
func (o *GetOrgMembersParams) SetUserCanonical(userCanonical *string) {
	o.UserCanonical = userCanonical
}

// WithUserCreatedAt adds the userCreatedAt to the get org members params
func (o *GetOrgMembersParams) WithUserCreatedAt(userCreatedAt *uint64) *GetOrgMembersParams {
	o.SetUserCreatedAt(userCreatedAt)
	return o
}

// SetUserCreatedAt adds the userCreatedAt to the get org members params
func (o *GetOrgMembersParams) SetUserCreatedAt(userCreatedAt *uint64) {
	o.UserCreatedAt = userCreatedAt
}

// WithUserFamilyName adds the userFamilyName to the get org members params
func (o *GetOrgMembersParams) WithUserFamilyName(userFamilyName *string) *GetOrgMembersParams {
	o.SetUserFamilyName(userFamilyName)
	return o
}

// SetUserFamilyName adds the userFamilyName to the get org members params
func (o *GetOrgMembersParams) SetUserFamilyName(userFamilyName *string) {
	o.UserFamilyName = userFamilyName
}

// WithUserGivenName adds the userGivenName to the get org members params
func (o *GetOrgMembersParams) WithUserGivenName(userGivenName *string) *GetOrgMembersParams {
	o.SetUserGivenName(userGivenName)
	return o
}

// SetUserGivenName adds the userGivenName to the get org members params
func (o *GetOrgMembersParams) SetUserGivenName(userGivenName *string) {
	o.UserGivenName = userGivenName
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgMembersParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.InvitationState != nil {

		// query param invitation_state
		var qrInvitationState string

		if o.InvitationState != nil {
			qrInvitationState = *o.InvitationState
		}
		qInvitationState := qrInvitationState
		if qInvitationState != "" {

			if err := r.SetQueryParam("invitation_state", qInvitationState); err != nil {
				return err
			}
		}
	}

	if o.MemberCreatedAt != nil {

		// query param member_created_at
		var qrMemberCreatedAt uint64

		if o.MemberCreatedAt != nil {
			qrMemberCreatedAt = *o.MemberCreatedAt
		}
		qMemberCreatedAt := swag.FormatUint64(qrMemberCreatedAt)
		if qMemberCreatedAt != "" {

			if err := r.SetQueryParam("member_created_at", qMemberCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.OrderBy != nil {

		// query param order_by
		var qrOrderBy string

		if o.OrderBy != nil {
			qrOrderBy = *o.OrderBy
		}
		qOrderBy := qrOrderBy
		if qOrderBy != "" {

			if err := r.SetQueryParam("order_by", qOrderBy); err != nil {
				return err
			}
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.PageIndex != nil {

		// query param page_index
		var qrPageIndex uint32

		if o.PageIndex != nil {
			qrPageIndex = *o.PageIndex
		}
		qPageIndex := swag.FormatUint32(qrPageIndex)
		if qPageIndex != "" {

			if err := r.SetQueryParam("page_index", qPageIndex); err != nil {
				return err
			}
		}
	}

	if o.PageSize != nil {

		// query param page_size
		var qrPageSize uint32

		if o.PageSize != nil {
			qrPageSize = *o.PageSize
		}
		qPageSize := swag.FormatUint32(qrPageSize)
		if qPageSize != "" {

			if err := r.SetQueryParam("page_size", qPageSize); err != nil {
				return err
			}
		}
	}

	if o.RoleName != nil {

		// query param role_name
		var qrRoleName string

		if o.RoleName != nil {
			qrRoleName = *o.RoleName
		}
		qRoleName := qrRoleName
		if qRoleName != "" {

			if err := r.SetQueryParam("role_name", qRoleName); err != nil {
				return err
			}
		}
	}

	if o.UserCanonical != nil {

		// query param user_canonical
		var qrUserCanonical string

		if o.UserCanonical != nil {
			qrUserCanonical = *o.UserCanonical
		}
		qUserCanonical := qrUserCanonical
		if qUserCanonical != "" {

			if err := r.SetQueryParam("user_canonical", qUserCanonical); err != nil {
				return err
			}
		}
	}

	if o.UserCreatedAt != nil {

		// query param user_created_at
		var qrUserCreatedAt uint64

		if o.UserCreatedAt != nil {
			qrUserCreatedAt = *o.UserCreatedAt
		}
		qUserCreatedAt := swag.FormatUint64(qrUserCreatedAt)
		if qUserCreatedAt != "" {

			if err := r.SetQueryParam("user_created_at", qUserCreatedAt); err != nil {
				return err
			}
		}
	}

	if o.UserFamilyName != nil {

		// query param user_family_name
		var qrUserFamilyName string

		if o.UserFamilyName != nil {
			qrUserFamilyName = *o.UserFamilyName
		}
		qUserFamilyName := qrUserFamilyName
		if qUserFamilyName != "" {

			if err := r.SetQueryParam("user_family_name", qUserFamilyName); err != nil {
				return err
			}
		}
	}

	if o.UserGivenName != nil {

		// query param user_given_name
		var qrUserGivenName string

		if o.UserGivenName != nil {
			qrUserGivenName = *o.UserGivenName
		}
		qUserGivenName := qrUserGivenName
		if qUserGivenName != "" {

			if err := r.SetQueryParam("user_given_name", qUserGivenName); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
