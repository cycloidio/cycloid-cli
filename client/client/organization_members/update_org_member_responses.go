// Code generated by go-swagger; DO NOT EDIT.

package organization_members

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateOrgMemberReader is a Reader for the UpdateOrgMember structure.
type UpdateOrgMemberReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrgMemberReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrgMemberOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateOrgMemberForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOrgMemberNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateOrgMemberUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateOrgMemberDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateOrgMemberOK creates a UpdateOrgMemberOK with default headers values
func NewUpdateOrgMemberOK() *UpdateOrgMemberOK {
	return &UpdateOrgMemberOK{}
}

/*
UpdateOrgMemberOK describes a response with status code 200, with default header values.

The information of the member of the organization.
*/
type UpdateOrgMemberOK struct {
	Payload *UpdateOrgMemberOKBody
}

// IsSuccess returns true when this update org member o k response has a 2xx status code
func (o *UpdateOrgMemberOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update org member o k response has a 3xx status code
func (o *UpdateOrgMemberOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org member o k response has a 4xx status code
func (o *UpdateOrgMemberOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update org member o k response has a 5xx status code
func (o *UpdateOrgMemberOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update org member o k response a status code equal to that given
func (o *UpdateOrgMemberOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update org member o k response
func (o *UpdateOrgMemberOK) Code() int {
	return 200
}

func (o *UpdateOrgMemberOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberOK %s", 200, payload)
}

func (o *UpdateOrgMemberOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberOK %s", 200, payload)
}

func (o *UpdateOrgMemberOK) GetPayload() *UpdateOrgMemberOKBody {
	return o.Payload
}

func (o *UpdateOrgMemberOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateOrgMemberOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgMemberForbidden creates a UpdateOrgMemberForbidden with default headers values
func NewUpdateOrgMemberForbidden() *UpdateOrgMemberForbidden {
	return &UpdateOrgMemberForbidden{}
}

/*
UpdateOrgMemberForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateOrgMemberForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update org member forbidden response has a 2xx status code
func (o *UpdateOrgMemberForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org member forbidden response has a 3xx status code
func (o *UpdateOrgMemberForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org member forbidden response has a 4xx status code
func (o *UpdateOrgMemberForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update org member forbidden response has a 5xx status code
func (o *UpdateOrgMemberForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update org member forbidden response a status code equal to that given
func (o *UpdateOrgMemberForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update org member forbidden response
func (o *UpdateOrgMemberForbidden) Code() int {
	return 403
}

func (o *UpdateOrgMemberForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberForbidden %s", 403, payload)
}

func (o *UpdateOrgMemberForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberForbidden %s", 403, payload)
}

func (o *UpdateOrgMemberForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgMemberForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgMemberNotFound creates a UpdateOrgMemberNotFound with default headers values
func NewUpdateOrgMemberNotFound() *UpdateOrgMemberNotFound {
	return &UpdateOrgMemberNotFound{}
}

/*
UpdateOrgMemberNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateOrgMemberNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update org member not found response has a 2xx status code
func (o *UpdateOrgMemberNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org member not found response has a 3xx status code
func (o *UpdateOrgMemberNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org member not found response has a 4xx status code
func (o *UpdateOrgMemberNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update org member not found response has a 5xx status code
func (o *UpdateOrgMemberNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update org member not found response a status code equal to that given
func (o *UpdateOrgMemberNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update org member not found response
func (o *UpdateOrgMemberNotFound) Code() int {
	return 404
}

func (o *UpdateOrgMemberNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberNotFound %s", 404, payload)
}

func (o *UpdateOrgMemberNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberNotFound %s", 404, payload)
}

func (o *UpdateOrgMemberNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgMemberNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgMemberUnprocessableEntity creates a UpdateOrgMemberUnprocessableEntity with default headers values
func NewUpdateOrgMemberUnprocessableEntity() *UpdateOrgMemberUnprocessableEntity {
	return &UpdateOrgMemberUnprocessableEntity{}
}

/*
UpdateOrgMemberUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateOrgMemberUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update org member unprocessable entity response has a 2xx status code
func (o *UpdateOrgMemberUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update org member unprocessable entity response has a 3xx status code
func (o *UpdateOrgMemberUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update org member unprocessable entity response has a 4xx status code
func (o *UpdateOrgMemberUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update org member unprocessable entity response has a 5xx status code
func (o *UpdateOrgMemberUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update org member unprocessable entity response a status code equal to that given
func (o *UpdateOrgMemberUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update org member unprocessable entity response
func (o *UpdateOrgMemberUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateOrgMemberUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberUnprocessableEntity %s", 422, payload)
}

func (o *UpdateOrgMemberUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMemberUnprocessableEntity %s", 422, payload)
}

func (o *UpdateOrgMemberUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgMemberUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgMemberDefault creates a UpdateOrgMemberDefault with default headers values
func NewUpdateOrgMemberDefault(code int) *UpdateOrgMemberDefault {
	return &UpdateOrgMemberDefault{
		_statusCode: code,
	}
}

/*
UpdateOrgMemberDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateOrgMemberDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update org member default response has a 2xx status code
func (o *UpdateOrgMemberDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update org member default response has a 3xx status code
func (o *UpdateOrgMemberDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update org member default response has a 4xx status code
func (o *UpdateOrgMemberDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update org member default response has a 5xx status code
func (o *UpdateOrgMemberDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update org member default response a status code equal to that given
func (o *UpdateOrgMemberDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update org member default response
func (o *UpdateOrgMemberDefault) Code() int {
	return o._statusCode
}

func (o *UpdateOrgMemberDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMember default %s", o._statusCode, payload)
}

func (o *UpdateOrgMemberDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/members/{username}][%d] updateOrgMember default %s", o._statusCode, payload)
}

func (o *UpdateOrgMemberDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgMemberDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateOrgMemberOKBody update org member o k body
swagger:model UpdateOrgMemberOKBody
*/
type UpdateOrgMemberOKBody struct {

	// data
	// Required: true
	Data *models.MemberOrg `json:"data"`
}

// Validate validates this update org member o k body
func (o *UpdateOrgMemberOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrgMemberOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateOrgMemberOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateOrgMemberOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateOrgMemberOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update org member o k body based on the context it is used
func (o *UpdateOrgMemberOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrgMemberOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateOrgMemberOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateOrgMemberOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrgMemberOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrgMemberOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrgMemberOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
