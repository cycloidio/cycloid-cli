// Code generated by go-swagger; DO NOT EDIT.

package organization_pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetPipelineParams creates a new GetPipelineParams object
// with the default values initialized.
func NewGetPipelineParams() *GetPipelineParams {
	var ()
	return &GetPipelineParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetPipelineParamsWithTimeout creates a new GetPipelineParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetPipelineParamsWithTimeout(timeout time.Duration) *GetPipelineParams {
	var ()
	return &GetPipelineParams{

		timeout: timeout,
	}
}

// NewGetPipelineParamsWithContext creates a new GetPipelineParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetPipelineParamsWithContext(ctx context.Context) *GetPipelineParams {
	var ()
	return &GetPipelineParams{

		Context: ctx,
	}
}

// NewGetPipelineParamsWithHTTPClient creates a new GetPipelineParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetPipelineParamsWithHTTPClient(client *http.Client) *GetPipelineParams {
	var ()
	return &GetPipelineParams{
		HTTPClient: client,
	}
}

/*GetPipelineParams contains all the parameters to send to the API endpoint
for the get pipeline operation typically these are written to a http.Request
*/
type GetPipelineParams struct {

	/*InpathPipelineName
	  A pipeline name

	*/
	InpathPipelineName string
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*ProjectCanonical
	  A canonical of a project.

	*/
	ProjectCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get pipeline params
func (o *GetPipelineParams) WithTimeout(timeout time.Duration) *GetPipelineParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get pipeline params
func (o *GetPipelineParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get pipeline params
func (o *GetPipelineParams) WithContext(ctx context.Context) *GetPipelineParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get pipeline params
func (o *GetPipelineParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get pipeline params
func (o *GetPipelineParams) WithHTTPClient(client *http.Client) *GetPipelineParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get pipeline params
func (o *GetPipelineParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithInpathPipelineName adds the inpathPipelineName to the get pipeline params
func (o *GetPipelineParams) WithInpathPipelineName(inpathPipelineName string) *GetPipelineParams {
	o.SetInpathPipelineName(inpathPipelineName)
	return o
}

// SetInpathPipelineName adds the inpathPipelineName to the get pipeline params
func (o *GetPipelineParams) SetInpathPipelineName(inpathPipelineName string) {
	o.InpathPipelineName = inpathPipelineName
}

// WithOrganizationCanonical adds the organizationCanonical to the get pipeline params
func (o *GetPipelineParams) WithOrganizationCanonical(organizationCanonical string) *GetPipelineParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get pipeline params
func (o *GetPipelineParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjectCanonical adds the projectCanonical to the get pipeline params
func (o *GetPipelineParams) WithProjectCanonical(projectCanonical string) *GetPipelineParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get pipeline params
func (o *GetPipelineParams) SetProjectCanonical(projectCanonical string) {
	o.ProjectCanonical = projectCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetPipelineParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param inpath_pipeline_name
	if err := r.SetPathParam("inpath_pipeline_name", o.InpathPipelineName); err != nil {
		return err
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	// path param project_canonical
	if err := r.SetPathParam("project_canonical", o.ProjectCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
