// Code generated by go-swagger; DO NOT EDIT.

package organization_pipelines

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// UpdatePipelineReader is a Reader for the UpdatePipeline structure.
type UpdatePipelineReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdatePipelineReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdatePipelineOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdatePipelineForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdatePipelineNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdatePipelineLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdatePipelineUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdatePipelineDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdatePipelineOK creates a UpdatePipelineOK with default headers values
func NewUpdatePipelineOK() *UpdatePipelineOK {
	return &UpdatePipelineOK{}
}

/*UpdatePipelineOK handles this case with default header values.

The information of the pipeline which has been updated.
*/
type UpdatePipelineOK struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *UpdatePipelineOKBody
}

func (o *UpdatePipelineOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipelineOK  %+v", 200, o.Payload)
}

func (o *UpdatePipelineOK) GetPayload() *UpdatePipelineOKBody {
	return o.Payload
}

func (o *UpdatePipelineOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(UpdatePipelineOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePipelineForbidden creates a UpdatePipelineForbidden with default headers values
func NewUpdatePipelineForbidden() *UpdatePipelineForbidden {
	return &UpdatePipelineForbidden{}
}

/*UpdatePipelineForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdatePipelineForbidden struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

func (o *UpdatePipelineForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipelineForbidden  %+v", 403, o.Payload)
}

func (o *UpdatePipelineForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdatePipelineForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePipelineNotFound creates a UpdatePipelineNotFound with default headers values
func NewUpdatePipelineNotFound() *UpdatePipelineNotFound {
	return &UpdatePipelineNotFound{}
}

/*UpdatePipelineNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdatePipelineNotFound struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

func (o *UpdatePipelineNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipelineNotFound  %+v", 404, o.Payload)
}

func (o *UpdatePipelineNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdatePipelineNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePipelineLengthRequired creates a UpdatePipelineLengthRequired with default headers values
func NewUpdatePipelineLengthRequired() *UpdatePipelineLengthRequired {
	return &UpdatePipelineLengthRequired{}
}

/*UpdatePipelineLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdatePipelineLengthRequired struct {
}

func (o *UpdatePipelineLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipelineLengthRequired ", 411)
}

func (o *UpdatePipelineLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdatePipelineUnprocessableEntity creates a UpdatePipelineUnprocessableEntity with default headers values
func NewUpdatePipelineUnprocessableEntity() *UpdatePipelineUnprocessableEntity {
	return &UpdatePipelineUnprocessableEntity{}
}

/*UpdatePipelineUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdatePipelineUnprocessableEntity struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

func (o *UpdatePipelineUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipelineUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdatePipelineUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdatePipelineUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdatePipelineDefault creates a UpdatePipelineDefault with default headers values
func NewUpdatePipelineDefault(code int) *UpdatePipelineDefault {
	return &UpdatePipelineDefault{
		_statusCode: code,
	}
}

/*UpdatePipelineDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdatePipelineDefault struct {
	_statusCode int

	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

// Code gets the status code for the update pipeline default response
func (o *UpdatePipelineDefault) Code() int {
	return o._statusCode
}

func (o *UpdatePipelineDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/projects/{project_canonical}/pipelines/{inpath_pipeline_name}][%d] updatePipeline default  %+v", o._statusCode, o.Payload)
}

func (o *UpdatePipelineDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdatePipelineDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdatePipelineOKBody update pipeline o k body
swagger:model UpdatePipelineOKBody
*/
type UpdatePipelineOKBody struct {

	// data
	// Required: true
	Data *models.Pipeline `json:"data"`
}

// Validate validates this update pipeline o k body
func (o *UpdatePipelineOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdatePipelineOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updatePipelineOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updatePipelineOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdatePipelineOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdatePipelineOKBody) UnmarshalBinary(b []byte) error {
	var res UpdatePipelineOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
