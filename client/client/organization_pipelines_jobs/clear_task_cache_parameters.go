// Code generated by go-swagger; DO NOT EDIT.

package organization_pipelines_jobs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewClearTaskCacheParams creates a new ClearTaskCacheParams object
// with the default values initialized.
func NewClearTaskCacheParams() *ClearTaskCacheParams {
	var (
		cachePathDefault = string("")
	)
	return &ClearTaskCacheParams{
		CachePath: &cachePathDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewClearTaskCacheParamsWithTimeout creates a new ClearTaskCacheParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewClearTaskCacheParamsWithTimeout(timeout time.Duration) *ClearTaskCacheParams {
	var (
		cachePathDefault = string("")
	)
	return &ClearTaskCacheParams{
		CachePath: &cachePathDefault,

		timeout: timeout,
	}
}

// NewClearTaskCacheParamsWithContext creates a new ClearTaskCacheParams object
// with the default values initialized, and the ability to set a context for a request
func NewClearTaskCacheParamsWithContext(ctx context.Context) *ClearTaskCacheParams {
	var (
		cachePathDefault = string("")
	)
	return &ClearTaskCacheParams{
		CachePath: &cachePathDefault,

		Context: ctx,
	}
}

// NewClearTaskCacheParamsWithHTTPClient creates a new ClearTaskCacheParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewClearTaskCacheParamsWithHTTPClient(client *http.Client) *ClearTaskCacheParams {
	var (
		cachePathDefault = string("")
	)
	return &ClearTaskCacheParams{
		CachePath:  &cachePathDefault,
		HTTPClient: client,
	}
}

/*ClearTaskCacheParams contains all the parameters to send to the API endpoint
for the clear task cache operation typically these are written to a http.Request
*/
type ClearTaskCacheParams struct {

	/*CachePath
	  The cache path to use as part of a clearTaskCache request

	*/
	CachePath *string
	/*InpathPipelineName
	  A pipeline name

	*/
	InpathPipelineName string
	/*JobName
	  A job name

	*/
	JobName string
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*ProjectCanonical
	  A canonical of a project.

	*/
	ProjectCanonical string
	/*StepName
	  A step name from a job task

	*/
	StepName string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the clear task cache params
func (o *ClearTaskCacheParams) WithTimeout(timeout time.Duration) *ClearTaskCacheParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the clear task cache params
func (o *ClearTaskCacheParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the clear task cache params
func (o *ClearTaskCacheParams) WithContext(ctx context.Context) *ClearTaskCacheParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the clear task cache params
func (o *ClearTaskCacheParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the clear task cache params
func (o *ClearTaskCacheParams) WithHTTPClient(client *http.Client) *ClearTaskCacheParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the clear task cache params
func (o *ClearTaskCacheParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCachePath adds the cachePath to the clear task cache params
func (o *ClearTaskCacheParams) WithCachePath(cachePath *string) *ClearTaskCacheParams {
	o.SetCachePath(cachePath)
	return o
}

// SetCachePath adds the cachePath to the clear task cache params
func (o *ClearTaskCacheParams) SetCachePath(cachePath *string) {
	o.CachePath = cachePath
}

// WithInpathPipelineName adds the inpathPipelineName to the clear task cache params
func (o *ClearTaskCacheParams) WithInpathPipelineName(inpathPipelineName string) *ClearTaskCacheParams {
	o.SetInpathPipelineName(inpathPipelineName)
	return o
}

// SetInpathPipelineName adds the inpathPipelineName to the clear task cache params
func (o *ClearTaskCacheParams) SetInpathPipelineName(inpathPipelineName string) {
	o.InpathPipelineName = inpathPipelineName
}

// WithJobName adds the jobName to the clear task cache params
func (o *ClearTaskCacheParams) WithJobName(jobName string) *ClearTaskCacheParams {
	o.SetJobName(jobName)
	return o
}

// SetJobName adds the jobName to the clear task cache params
func (o *ClearTaskCacheParams) SetJobName(jobName string) {
	o.JobName = jobName
}

// WithOrganizationCanonical adds the organizationCanonical to the clear task cache params
func (o *ClearTaskCacheParams) WithOrganizationCanonical(organizationCanonical string) *ClearTaskCacheParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the clear task cache params
func (o *ClearTaskCacheParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjectCanonical adds the projectCanonical to the clear task cache params
func (o *ClearTaskCacheParams) WithProjectCanonical(projectCanonical string) *ClearTaskCacheParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the clear task cache params
func (o *ClearTaskCacheParams) SetProjectCanonical(projectCanonical string) {
	o.ProjectCanonical = projectCanonical
}

// WithStepName adds the stepName to the clear task cache params
func (o *ClearTaskCacheParams) WithStepName(stepName string) *ClearTaskCacheParams {
	o.SetStepName(stepName)
	return o
}

// SetStepName adds the stepName to the clear task cache params
func (o *ClearTaskCacheParams) SetStepName(stepName string) {
	o.StepName = stepName
}

// WriteToRequest writes these params to a swagger request
func (o *ClearTaskCacheParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CachePath != nil {

		// query param cache_path
		var qrCachePath string
		if o.CachePath != nil {
			qrCachePath = *o.CachePath
		}
		qCachePath := qrCachePath
		if qCachePath != "" {
			if err := r.SetQueryParam("cache_path", qCachePath); err != nil {
				return err
			}
		}

	}

	// path param inpath_pipeline_name
	if err := r.SetPathParam("inpath_pipeline_name", o.InpathPipelineName); err != nil {
		return err
	}

	// path param job_name
	if err := r.SetPathParam("job_name", o.JobName); err != nil {
		return err
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	// path param project_canonical
	if err := r.SetPathParam("project_canonical", o.ProjectCanonical); err != nil {
		return err
	}

	// path param step_name
	if err := r.SetPathParam("step_name", o.StepName); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
