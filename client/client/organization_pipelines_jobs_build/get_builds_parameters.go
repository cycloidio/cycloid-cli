// Code generated by go-swagger; DO NOT EDIT.

package organization_pipelines_jobs_build

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetBuildsParams creates a new GetBuildsParams object
// with the default values initialized.
func NewGetBuildsParams() *GetBuildsParams {
	var (
		concoursePageLimitDefault = int64(10)
		concoursePageSinceDefault = int64(0)
		concoursePageUntilDefault = int64(0)
	)
	return &GetBuildsParams{
		ConcoursePageLimit: &concoursePageLimitDefault,
		ConcoursePageSince: &concoursePageSinceDefault,
		ConcoursePageUntil: &concoursePageUntilDefault,

		timeout: cr.DefaultTimeout,
	}
}

// NewGetBuildsParamsWithTimeout creates a new GetBuildsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetBuildsParamsWithTimeout(timeout time.Duration) *GetBuildsParams {
	var (
		concoursePageLimitDefault = int64(10)
		concoursePageSinceDefault = int64(0)
		concoursePageUntilDefault = int64(0)
	)
	return &GetBuildsParams{
		ConcoursePageLimit: &concoursePageLimitDefault,
		ConcoursePageSince: &concoursePageSinceDefault,
		ConcoursePageUntil: &concoursePageUntilDefault,

		timeout: timeout,
	}
}

// NewGetBuildsParamsWithContext creates a new GetBuildsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetBuildsParamsWithContext(ctx context.Context) *GetBuildsParams {
	var (
		concoursePageLimitDefault = int64(10)
		concoursePageSinceDefault = int64(0)
		concoursePageUntilDefault = int64(0)
	)
	return &GetBuildsParams{
		ConcoursePageLimit: &concoursePageLimitDefault,
		ConcoursePageSince: &concoursePageSinceDefault,
		ConcoursePageUntil: &concoursePageUntilDefault,

		Context: ctx,
	}
}

// NewGetBuildsParamsWithHTTPClient creates a new GetBuildsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetBuildsParamsWithHTTPClient(client *http.Client) *GetBuildsParams {
	var (
		concoursePageLimitDefault = int64(10)
		concoursePageSinceDefault = int64(0)
		concoursePageUntilDefault = int64(0)
	)
	return &GetBuildsParams{
		ConcoursePageLimit: &concoursePageLimitDefault,
		ConcoursePageSince: &concoursePageSinceDefault,
		ConcoursePageUntil: &concoursePageUntilDefault,
		HTTPClient:         client,
	}
}

/*GetBuildsParams contains all the parameters to send to the API endpoint
for the get builds operation typically these are written to a http.Request
*/
type GetBuildsParams struct {

	/*ConcoursePageLimit
	  The number of items at most which the response can have.

	*/
	ConcoursePageLimit *int64
	/*ConcoursePageSince
	  The time after which we should look for entities to return.

	*/
	ConcoursePageSince *int64
	/*ConcoursePageUntil
	  The time before which we should look for entities to return.

	*/
	ConcoursePageUntil *int64
	/*InpathPipelineName
	  A pipeline name

	*/
	InpathPipelineName string
	/*JobName
	  A job name

	*/
	JobName string
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*ProjectCanonical
	  A canonical of a project.

	*/
	ProjectCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get builds params
func (o *GetBuildsParams) WithTimeout(timeout time.Duration) *GetBuildsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get builds params
func (o *GetBuildsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get builds params
func (o *GetBuildsParams) WithContext(ctx context.Context) *GetBuildsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get builds params
func (o *GetBuildsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get builds params
func (o *GetBuildsParams) WithHTTPClient(client *http.Client) *GetBuildsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get builds params
func (o *GetBuildsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithConcoursePageLimit adds the concoursePageLimit to the get builds params
func (o *GetBuildsParams) WithConcoursePageLimit(concoursePageLimit *int64) *GetBuildsParams {
	o.SetConcoursePageLimit(concoursePageLimit)
	return o
}

// SetConcoursePageLimit adds the concoursePageLimit to the get builds params
func (o *GetBuildsParams) SetConcoursePageLimit(concoursePageLimit *int64) {
	o.ConcoursePageLimit = concoursePageLimit
}

// WithConcoursePageSince adds the concoursePageSince to the get builds params
func (o *GetBuildsParams) WithConcoursePageSince(concoursePageSince *int64) *GetBuildsParams {
	o.SetConcoursePageSince(concoursePageSince)
	return o
}

// SetConcoursePageSince adds the concoursePageSince to the get builds params
func (o *GetBuildsParams) SetConcoursePageSince(concoursePageSince *int64) {
	o.ConcoursePageSince = concoursePageSince
}

// WithConcoursePageUntil adds the concoursePageUntil to the get builds params
func (o *GetBuildsParams) WithConcoursePageUntil(concoursePageUntil *int64) *GetBuildsParams {
	o.SetConcoursePageUntil(concoursePageUntil)
	return o
}

// SetConcoursePageUntil adds the concoursePageUntil to the get builds params
func (o *GetBuildsParams) SetConcoursePageUntil(concoursePageUntil *int64) {
	o.ConcoursePageUntil = concoursePageUntil
}

// WithInpathPipelineName adds the inpathPipelineName to the get builds params
func (o *GetBuildsParams) WithInpathPipelineName(inpathPipelineName string) *GetBuildsParams {
	o.SetInpathPipelineName(inpathPipelineName)
	return o
}

// SetInpathPipelineName adds the inpathPipelineName to the get builds params
func (o *GetBuildsParams) SetInpathPipelineName(inpathPipelineName string) {
	o.InpathPipelineName = inpathPipelineName
}

// WithJobName adds the jobName to the get builds params
func (o *GetBuildsParams) WithJobName(jobName string) *GetBuildsParams {
	o.SetJobName(jobName)
	return o
}

// SetJobName adds the jobName to the get builds params
func (o *GetBuildsParams) SetJobName(jobName string) {
	o.JobName = jobName
}

// WithOrganizationCanonical adds the organizationCanonical to the get builds params
func (o *GetBuildsParams) WithOrganizationCanonical(organizationCanonical string) *GetBuildsParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get builds params
func (o *GetBuildsParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjectCanonical adds the projectCanonical to the get builds params
func (o *GetBuildsParams) WithProjectCanonical(projectCanonical string) *GetBuildsParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get builds params
func (o *GetBuildsParams) SetProjectCanonical(projectCanonical string) {
	o.ProjectCanonical = projectCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetBuildsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.ConcoursePageLimit != nil {

		// query param concourse_page_limit
		var qrConcoursePageLimit int64
		if o.ConcoursePageLimit != nil {
			qrConcoursePageLimit = *o.ConcoursePageLimit
		}
		qConcoursePageLimit := swag.FormatInt64(qrConcoursePageLimit)
		if qConcoursePageLimit != "" {
			if err := r.SetQueryParam("concourse_page_limit", qConcoursePageLimit); err != nil {
				return err
			}
		}

	}

	if o.ConcoursePageSince != nil {

		// query param concourse_page_since
		var qrConcoursePageSince int64
		if o.ConcoursePageSince != nil {
			qrConcoursePageSince = *o.ConcoursePageSince
		}
		qConcoursePageSince := swag.FormatInt64(qrConcoursePageSince)
		if qConcoursePageSince != "" {
			if err := r.SetQueryParam("concourse_page_since", qConcoursePageSince); err != nil {
				return err
			}
		}

	}

	if o.ConcoursePageUntil != nil {

		// query param concourse_page_until
		var qrConcoursePageUntil int64
		if o.ConcoursePageUntil != nil {
			qrConcoursePageUntil = *o.ConcoursePageUntil
		}
		qConcoursePageUntil := swag.FormatInt64(qrConcoursePageUntil)
		if qConcoursePageUntil != "" {
			if err := r.SetQueryParam("concourse_page_until", qConcoursePageUntil); err != nil {
				return err
			}
		}

	}

	// path param inpath_pipeline_name
	if err := r.SetPathParam("inpath_pipeline_name", o.InpathPipelineName); err != nil {
		return err
	}

	// path param job_name
	if err := r.SetPathParam("job_name", o.JobName); err != nil {
		return err
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	// path param project_canonical
	if err := r.SetPathParam("project_canonical", o.ProjectCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
