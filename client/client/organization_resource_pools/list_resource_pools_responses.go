// Code generated by go-swagger; DO NOT EDIT.

package organization_resource_pools

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// ListResourcePoolsReader is a Reader for the ListResourcePools structure.
type ListResourcePoolsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *ListResourcePoolsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewListResourcePoolsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewListResourcePoolsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewListResourcePoolsNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewListResourcePoolsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewListResourcePoolsOK creates a ListResourcePoolsOK with default headers values
func NewListResourcePoolsOK() *ListResourcePoolsOK {
	return &ListResourcePoolsOK{}
}

/*
ListResourcePoolsOK describes a response with status code 200, with default header values.

List of resource pools which are available in the organization.
*/
type ListResourcePoolsOK struct {
	Payload *ListResourcePoolsOKBody
}

// IsSuccess returns true when this list resource pools o k response has a 2xx status code
func (o *ListResourcePoolsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this list resource pools o k response has a 3xx status code
func (o *ListResourcePoolsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list resource pools o k response has a 4xx status code
func (o *ListResourcePoolsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this list resource pools o k response has a 5xx status code
func (o *ListResourcePoolsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this list resource pools o k response a status code equal to that given
func (o *ListResourcePoolsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the list resource pools o k response
func (o *ListResourcePoolsOK) Code() int {
	return 200
}

func (o *ListResourcePoolsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsOK %s", 200, payload)
}

func (o *ListResourcePoolsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsOK %s", 200, payload)
}

func (o *ListResourcePoolsOK) GetPayload() *ListResourcePoolsOKBody {
	return o.Payload
}

func (o *ListResourcePoolsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(ListResourcePoolsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourcePoolsForbidden creates a ListResourcePoolsForbidden with default headers values
func NewListResourcePoolsForbidden() *ListResourcePoolsForbidden {
	return &ListResourcePoolsForbidden{}
}

/*
ListResourcePoolsForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type ListResourcePoolsForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list resource pools forbidden response has a 2xx status code
func (o *ListResourcePoolsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list resource pools forbidden response has a 3xx status code
func (o *ListResourcePoolsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list resource pools forbidden response has a 4xx status code
func (o *ListResourcePoolsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this list resource pools forbidden response has a 5xx status code
func (o *ListResourcePoolsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this list resource pools forbidden response a status code equal to that given
func (o *ListResourcePoolsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the list resource pools forbidden response
func (o *ListResourcePoolsForbidden) Code() int {
	return 403
}

func (o *ListResourcePoolsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsForbidden %s", 403, payload)
}

func (o *ListResourcePoolsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsForbidden %s", 403, payload)
}

func (o *ListResourcePoolsForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListResourcePoolsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourcePoolsNotFound creates a ListResourcePoolsNotFound with default headers values
func NewListResourcePoolsNotFound() *ListResourcePoolsNotFound {
	return &ListResourcePoolsNotFound{}
}

/*
ListResourcePoolsNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type ListResourcePoolsNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list resource pools not found response has a 2xx status code
func (o *ListResourcePoolsNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this list resource pools not found response has a 3xx status code
func (o *ListResourcePoolsNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this list resource pools not found response has a 4xx status code
func (o *ListResourcePoolsNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this list resource pools not found response has a 5xx status code
func (o *ListResourcePoolsNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this list resource pools not found response a status code equal to that given
func (o *ListResourcePoolsNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the list resource pools not found response
func (o *ListResourcePoolsNotFound) Code() int {
	return 404
}

func (o *ListResourcePoolsNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsNotFound %s", 404, payload)
}

func (o *ListResourcePoolsNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePoolsNotFound %s", 404, payload)
}

func (o *ListResourcePoolsNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListResourcePoolsNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewListResourcePoolsDefault creates a ListResourcePoolsDefault with default headers values
func NewListResourcePoolsDefault(code int) *ListResourcePoolsDefault {
	return &ListResourcePoolsDefault{
		_statusCode: code,
	}
}

/*
ListResourcePoolsDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type ListResourcePoolsDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this list resource pools default response has a 2xx status code
func (o *ListResourcePoolsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this list resource pools default response has a 3xx status code
func (o *ListResourcePoolsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this list resource pools default response has a 4xx status code
func (o *ListResourcePoolsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this list resource pools default response has a 5xx status code
func (o *ListResourcePoolsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this list resource pools default response a status code equal to that given
func (o *ListResourcePoolsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the list resource pools default response
func (o *ListResourcePoolsDefault) Code() int {
	return o._statusCode
}

func (o *ListResourcePoolsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePools default %s", o._statusCode, payload)
}

func (o *ListResourcePoolsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/resource_pools][%d] listResourcePools default %s", o._statusCode, payload)
}

func (o *ListResourcePoolsDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *ListResourcePoolsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
ListResourcePoolsOKBody list resource pools o k body
swagger:model ListResourcePoolsOKBody
*/
type ListResourcePoolsOKBody struct {

	// data
	// Required: true
	Data []*models.ResourcePool `json:"data"`

	// pagination
	// Required: true
	Pagination *models.Pagination `json:"pagination"`
}

// Validate validates this list resource pools o k body
func (o *ListResourcePoolsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if err := o.validatePagination(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcePoolsOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("listResourcePoolsOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	for i := 0; i < len(o.Data); i++ {
		if swag.IsZero(o.Data[i]) { // not required
			continue
		}

		if o.Data[i] != nil {
			if err := o.Data[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listResourcePoolsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listResourcePoolsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListResourcePoolsOKBody) validatePagination(formats strfmt.Registry) error {

	if err := validate.Required("listResourcePoolsOK"+"."+"pagination", "body", o.Pagination); err != nil {
		return err
	}

	if o.Pagination != nil {
		if err := o.Pagination.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listResourcePoolsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listResourcePoolsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this list resource pools o k body based on the context it is used
func (o *ListResourcePoolsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := o.contextValidatePagination(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *ListResourcePoolsOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(o.Data); i++ {

		if o.Data[i] != nil {

			if swag.IsZero(o.Data[i]) { // not required
				return nil
			}

			if err := o.Data[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("listResourcePoolsOK" + "." + "data" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("listResourcePoolsOK" + "." + "data" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (o *ListResourcePoolsOKBody) contextValidatePagination(ctx context.Context, formats strfmt.Registry) error {

	if o.Pagination != nil {

		if err := o.Pagination.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("listResourcePoolsOK" + "." + "pagination")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("listResourcePoolsOK" + "." + "pagination")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *ListResourcePoolsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *ListResourcePoolsOKBody) UnmarshalBinary(b []byte) error {
	var res ListResourcePoolsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
