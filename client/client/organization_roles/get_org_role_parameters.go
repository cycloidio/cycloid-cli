// Code generated by go-swagger; DO NOT EDIT.

package organization_roles

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrgRoleParams creates a new GetOrgRoleParams object
// with the default values initialized.
func NewGetOrgRoleParams() *GetOrgRoleParams {
	var ()
	return &GetOrgRoleParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgRoleParamsWithTimeout creates a new GetOrgRoleParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrgRoleParamsWithTimeout(timeout time.Duration) *GetOrgRoleParams {
	var ()
	return &GetOrgRoleParams{

		timeout: timeout,
	}
}

// NewGetOrgRoleParamsWithContext creates a new GetOrgRoleParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrgRoleParamsWithContext(ctx context.Context) *GetOrgRoleParams {
	var ()
	return &GetOrgRoleParams{

		Context: ctx,
	}
}

// NewGetOrgRoleParamsWithHTTPClient creates a new GetOrgRoleParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrgRoleParamsWithHTTPClient(client *http.Client) *GetOrgRoleParams {
	var ()
	return &GetOrgRoleParams{
		HTTPClient: client,
	}
}

/*GetOrgRoleParams contains all the parameters to send to the API endpoint
for the get org role operation typically these are written to a http.Request
*/
type GetOrgRoleParams struct {

	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*RoleCanonical
	  Organization Role canonical

	*/
	RoleCanonical string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get org role params
func (o *GetOrgRoleParams) WithTimeout(timeout time.Duration) *GetOrgRoleParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get org role params
func (o *GetOrgRoleParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get org role params
func (o *GetOrgRoleParams) WithContext(ctx context.Context) *GetOrgRoleParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get org role params
func (o *GetOrgRoleParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get org role params
func (o *GetOrgRoleParams) WithHTTPClient(client *http.Client) *GetOrgRoleParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get org role params
func (o *GetOrgRoleParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOrganizationCanonical adds the organizationCanonical to the get org role params
func (o *GetOrgRoleParams) WithOrganizationCanonical(organizationCanonical string) *GetOrgRoleParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get org role params
func (o *GetOrgRoleParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithRoleCanonical adds the roleCanonical to the get org role params
func (o *GetOrgRoleParams) WithRoleCanonical(roleCanonical string) *GetOrgRoleParams {
	o.SetRoleCanonical(roleCanonical)
	return o
}

// SetRoleCanonical adds the roleCanonical to the get org role params
func (o *GetOrgRoleParams) SetRoleCanonical(roleCanonical string) {
	o.RoleCanonical = roleCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgRoleParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	// path param role_canonical
	if err := r.SetPathParam("role_canonical", o.RoleCanonical); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
