// Code generated by go-swagger; DO NOT EDIT.

package organization_service_catalog_sources

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new organization service catalog sources API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for organization service catalog sources API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateServiceCatalogSource Creates a Service catalog source
*/
func (a *Client) CreateServiceCatalogSource(params *CreateServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceCatalogSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceCatalogSource",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCatalogSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceCatalogSource delete a Service catalog source
*/
func (a *Client) DeleteServiceCatalogSource(params *DeleteServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceCatalogSourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceCatalogSource",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceCatalogSourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogSource Return the Service Catalog Source
*/
func (a *Client) GetServiceCatalogSource(params *GetServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogSource",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogSources Return all the private service catalogs
*/
func (a *Client) GetServiceCatalogSources(params *GetServiceCatalogSourcesParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogSourcesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogSourcesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogSources",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogSourcesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogSourcesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogSourcesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RefreshServiceCatalogSource Refresh a Service catalog source
*/
func (a *Client) RefreshServiceCatalogSource(params *RefreshServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*RefreshServiceCatalogSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "refreshServiceCatalogSource",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_id}/refresh",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshServiceCatalogSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RefreshServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogSource Update a Service catalog source
*/
func (a *Client) UpdateServiceCatalogSource(params *UpdateServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceCatalogSourceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceCatalogSource",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogSourceOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateServiceCatalogSource Validate a Service catalog source
*/
func (a *Client) ValidateServiceCatalogSource(params *ValidateServiceCatalogSourceParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateServiceCatalogSourceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateServiceCatalogSourceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateServiceCatalogSource",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalog_sources/{service_catalog_source_id}/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateServiceCatalogSourceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateServiceCatalogSourceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateServiceCatalogSourceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
