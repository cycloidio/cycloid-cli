// Code generated by go-swagger; DO NOT EDIT.

package organization_subscriptions

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// CreateSubscriptionReader is a Reader for the CreateSubscription structure.
type CreateSubscriptionReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateSubscriptionReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewCreateSubscriptionNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewCreateSubscriptionNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewCreateSubscriptionLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateSubscriptionUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateSubscriptionDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateSubscriptionNoContent creates a CreateSubscriptionNoContent with default headers values
func NewCreateSubscriptionNoContent() *CreateSubscriptionNoContent {
	return &CreateSubscriptionNoContent{}
}

/*
CreateSubscriptionNoContent describes a response with status code 204, with default header values.

Created Subscription
*/
type CreateSubscriptionNoContent struct {
}

// IsSuccess returns true when this create subscription no content response has a 2xx status code
func (o *CreateSubscriptionNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create subscription no content response has a 3xx status code
func (o *CreateSubscriptionNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription no content response has a 4xx status code
func (o *CreateSubscriptionNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this create subscription no content response has a 5xx status code
func (o *CreateSubscriptionNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription no content response a status code equal to that given
func (o *CreateSubscriptionNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the create subscription no content response
func (o *CreateSubscriptionNoContent) Code() int {
	return 204
}

func (o *CreateSubscriptionNoContent) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionNoContent", 204)
}

func (o *CreateSubscriptionNoContent) String() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionNoContent", 204)
}

func (o *CreateSubscriptionNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionNotFound creates a CreateSubscriptionNotFound with default headers values
func NewCreateSubscriptionNotFound() *CreateSubscriptionNotFound {
	return &CreateSubscriptionNotFound{}
}

/*
CreateSubscriptionNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type CreateSubscriptionNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this create subscription not found response has a 2xx status code
func (o *CreateSubscriptionNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription not found response has a 3xx status code
func (o *CreateSubscriptionNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription not found response has a 4xx status code
func (o *CreateSubscriptionNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription not found response has a 5xx status code
func (o *CreateSubscriptionNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription not found response a status code equal to that given
func (o *CreateSubscriptionNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the create subscription not found response
func (o *CreateSubscriptionNotFound) Code() int {
	return 404
}

func (o *CreateSubscriptionNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionNotFound %s", 404, payload)
}

func (o *CreateSubscriptionNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionNotFound %s", 404, payload)
}

func (o *CreateSubscriptionNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateSubscriptionNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionLengthRequired creates a CreateSubscriptionLengthRequired with default headers values
func NewCreateSubscriptionLengthRequired() *CreateSubscriptionLengthRequired {
	return &CreateSubscriptionLengthRequired{}
}

/*
CreateSubscriptionLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type CreateSubscriptionLengthRequired struct {
}

// IsSuccess returns true when this create subscription length required response has a 2xx status code
func (o *CreateSubscriptionLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription length required response has a 3xx status code
func (o *CreateSubscriptionLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription length required response has a 4xx status code
func (o *CreateSubscriptionLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription length required response has a 5xx status code
func (o *CreateSubscriptionLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription length required response a status code equal to that given
func (o *CreateSubscriptionLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the create subscription length required response
func (o *CreateSubscriptionLengthRequired) Code() int {
	return 411
}

func (o *CreateSubscriptionLengthRequired) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionLengthRequired", 411)
}

func (o *CreateSubscriptionLengthRequired) String() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionLengthRequired", 411)
}

func (o *CreateSubscriptionLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateSubscriptionUnprocessableEntity creates a CreateSubscriptionUnprocessableEntity with default headers values
func NewCreateSubscriptionUnprocessableEntity() *CreateSubscriptionUnprocessableEntity {
	return &CreateSubscriptionUnprocessableEntity{}
}

/*
CreateSubscriptionUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type CreateSubscriptionUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this create subscription unprocessable entity response has a 2xx status code
func (o *CreateSubscriptionUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create subscription unprocessable entity response has a 3xx status code
func (o *CreateSubscriptionUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create subscription unprocessable entity response has a 4xx status code
func (o *CreateSubscriptionUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create subscription unprocessable entity response has a 5xx status code
func (o *CreateSubscriptionUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create subscription unprocessable entity response a status code equal to that given
func (o *CreateSubscriptionUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create subscription unprocessable entity response
func (o *CreateSubscriptionUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateSubscriptionUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionUnprocessableEntity %s", 422, payload)
}

func (o *CreateSubscriptionUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscriptionUnprocessableEntity %s", 422, payload)
}

func (o *CreateSubscriptionUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateSubscriptionUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateSubscriptionDefault creates a CreateSubscriptionDefault with default headers values
func NewCreateSubscriptionDefault(code int) *CreateSubscriptionDefault {
	return &CreateSubscriptionDefault{
		_statusCode: code,
	}
}

/*
CreateSubscriptionDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type CreateSubscriptionDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this create subscription default response has a 2xx status code
func (o *CreateSubscriptionDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create subscription default response has a 3xx status code
func (o *CreateSubscriptionDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create subscription default response has a 4xx status code
func (o *CreateSubscriptionDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create subscription default response has a 5xx status code
func (o *CreateSubscriptionDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create subscription default response a status code equal to that given
func (o *CreateSubscriptionDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create subscription default response
func (o *CreateSubscriptionDefault) Code() int {
	return o._statusCode
}

func (o *CreateSubscriptionDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscription default %s", o._statusCode, payload)
}

func (o *CreateSubscriptionDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/subscriptions][%d] createSubscription default %s", o._statusCode, payload)
}

func (o *CreateSubscriptionDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateSubscriptionDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
