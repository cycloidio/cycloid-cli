// Code generated by go-swagger; DO NOT EDIT.

package organization_teams

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateTeamReader is a Reader for the UpdateTeam structure.
type UpdateTeamReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateTeamReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateTeamOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateTeamForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateTeamNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateTeamLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateTeamUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateTeamDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateTeamOK creates a UpdateTeamOK with default headers values
func NewUpdateTeamOK() *UpdateTeamOK {
	return &UpdateTeamOK{}
}

/*
UpdateTeamOK describes a response with status code 200, with default header values.

Team updated. The body contains information of the updated team.
*/
type UpdateTeamOK struct {
	Payload *UpdateTeamOKBody
}

// IsSuccess returns true when this update team o k response has a 2xx status code
func (o *UpdateTeamOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this update team o k response has a 3xx status code
func (o *UpdateTeamOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team o k response has a 4xx status code
func (o *UpdateTeamOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this update team o k response has a 5xx status code
func (o *UpdateTeamOK) IsServerError() bool {
	return false
}

// IsCode returns true when this update team o k response a status code equal to that given
func (o *UpdateTeamOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the update team o k response
func (o *UpdateTeamOK) Code() int {
	return 200
}

func (o *UpdateTeamOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamOK %s", 200, payload)
}

func (o *UpdateTeamOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamOK %s", 200, payload)
}

func (o *UpdateTeamOK) GetPayload() *UpdateTeamOKBody {
	return o.Payload
}

func (o *UpdateTeamOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateTeamOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamForbidden creates a UpdateTeamForbidden with default headers values
func NewUpdateTeamForbidden() *UpdateTeamForbidden {
	return &UpdateTeamForbidden{}
}

/*
UpdateTeamForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateTeamForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update team forbidden response has a 2xx status code
func (o *UpdateTeamForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team forbidden response has a 3xx status code
func (o *UpdateTeamForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team forbidden response has a 4xx status code
func (o *UpdateTeamForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team forbidden response has a 5xx status code
func (o *UpdateTeamForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this update team forbidden response a status code equal to that given
func (o *UpdateTeamForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the update team forbidden response
func (o *UpdateTeamForbidden) Code() int {
	return 403
}

func (o *UpdateTeamForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamForbidden %s", 403, payload)
}

func (o *UpdateTeamForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamForbidden %s", 403, payload)
}

func (o *UpdateTeamForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateTeamForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamNotFound creates a UpdateTeamNotFound with default headers values
func NewUpdateTeamNotFound() *UpdateTeamNotFound {
	return &UpdateTeamNotFound{}
}

/*
UpdateTeamNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateTeamNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update team not found response has a 2xx status code
func (o *UpdateTeamNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team not found response has a 3xx status code
func (o *UpdateTeamNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team not found response has a 4xx status code
func (o *UpdateTeamNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team not found response has a 5xx status code
func (o *UpdateTeamNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this update team not found response a status code equal to that given
func (o *UpdateTeamNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the update team not found response
func (o *UpdateTeamNotFound) Code() int {
	return 404
}

func (o *UpdateTeamNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamNotFound %s", 404, payload)
}

func (o *UpdateTeamNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamNotFound %s", 404, payload)
}

func (o *UpdateTeamNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateTeamNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamLengthRequired creates a UpdateTeamLengthRequired with default headers values
func NewUpdateTeamLengthRequired() *UpdateTeamLengthRequired {
	return &UpdateTeamLengthRequired{}
}

/*
UpdateTeamLengthRequired describes a response with status code 411, with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateTeamLengthRequired struct {
}

// IsSuccess returns true when this update team length required response has a 2xx status code
func (o *UpdateTeamLengthRequired) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team length required response has a 3xx status code
func (o *UpdateTeamLengthRequired) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team length required response has a 4xx status code
func (o *UpdateTeamLengthRequired) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team length required response has a 5xx status code
func (o *UpdateTeamLengthRequired) IsServerError() bool {
	return false
}

// IsCode returns true when this update team length required response a status code equal to that given
func (o *UpdateTeamLengthRequired) IsCode(code int) bool {
	return code == 411
}

// Code gets the status code for the update team length required response
func (o *UpdateTeamLengthRequired) Code() int {
	return 411
}

func (o *UpdateTeamLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamLengthRequired", 411)
}

func (o *UpdateTeamLengthRequired) String() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamLengthRequired", 411)
}

func (o *UpdateTeamLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateTeamUnprocessableEntity creates a UpdateTeamUnprocessableEntity with default headers values
func NewUpdateTeamUnprocessableEntity() *UpdateTeamUnprocessableEntity {
	return &UpdateTeamUnprocessableEntity{}
}

/*
UpdateTeamUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateTeamUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update team unprocessable entity response has a 2xx status code
func (o *UpdateTeamUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this update team unprocessable entity response has a 3xx status code
func (o *UpdateTeamUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this update team unprocessable entity response has a 4xx status code
func (o *UpdateTeamUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this update team unprocessable entity response has a 5xx status code
func (o *UpdateTeamUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this update team unprocessable entity response a status code equal to that given
func (o *UpdateTeamUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the update team unprocessable entity response
func (o *UpdateTeamUnprocessableEntity) Code() int {
	return 422
}

func (o *UpdateTeamUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamUnprocessableEntity %s", 422, payload)
}

func (o *UpdateTeamUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeamUnprocessableEntity %s", 422, payload)
}

func (o *UpdateTeamUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateTeamUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateTeamDefault creates a UpdateTeamDefault with default headers values
func NewUpdateTeamDefault(code int) *UpdateTeamDefault {
	return &UpdateTeamDefault{
		_statusCode: code,
	}
}

/*
UpdateTeamDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateTeamDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this update team default response has a 2xx status code
func (o *UpdateTeamDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this update team default response has a 3xx status code
func (o *UpdateTeamDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this update team default response has a 4xx status code
func (o *UpdateTeamDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this update team default response has a 5xx status code
func (o *UpdateTeamDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this update team default response a status code equal to that given
func (o *UpdateTeamDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the update team default response
func (o *UpdateTeamDefault) Code() int {
	return o._statusCode
}

func (o *UpdateTeamDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeam default %s", o._statusCode, payload)
}

func (o *UpdateTeamDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/teams/{team_canonical}][%d] updateTeam default %s", o._statusCode, payload)
}

func (o *UpdateTeamDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateTeamDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
UpdateTeamOKBody update team o k body
swagger:model UpdateTeamOKBody
*/
type UpdateTeamOKBody struct {

	// data
	// Required: true
	Data *models.Team `json:"data"`
}

// Validate validates this update team o k body
func (o *UpdateTeamOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateTeamOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateTeamOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateTeamOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateTeamOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update team o k body based on the context it is used
func (o *UpdateTeamOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateTeamOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateTeamOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("updateTeamOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateTeamOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateTeamOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateTeamOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
