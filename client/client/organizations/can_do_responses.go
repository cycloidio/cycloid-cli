// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// CanDoReader is a Reader for the CanDo structure.
type CanDoReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CanDoReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCanDoOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewCanDoForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewCanDoNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCanDoUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCanDoDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCanDoOK creates a CanDoOK with default headers values
func NewCanDoOK() *CanDoOK {
	return &CanDoOK{}
}

/*CanDoOK handles this case with default header values.

The information of the possibility to do the action
*/
type CanDoOK struct {
	Payload *CanDoOKBody
}

func (o *CanDoOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/can_do][%d] canDoOK  %+v", 200, o.Payload)
}

func (o *CanDoOK) GetPayload() *CanDoOKBody {
	return o.Payload
}

func (o *CanDoOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(CanDoOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCanDoForbidden creates a CanDoForbidden with default headers values
func NewCanDoForbidden() *CanDoForbidden {
	return &CanDoForbidden{}
}

/*CanDoForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type CanDoForbidden struct {
	Payload *models.ErrorPayload
}

func (o *CanDoForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/can_do][%d] canDoForbidden  %+v", 403, o.Payload)
}

func (o *CanDoForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CanDoForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCanDoNotFound creates a CanDoNotFound with default headers values
func NewCanDoNotFound() *CanDoNotFound {
	return &CanDoNotFound{}
}

/*CanDoNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type CanDoNotFound struct {
	Payload *models.ErrorPayload
}

func (o *CanDoNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/can_do][%d] canDoNotFound  %+v", 404, o.Payload)
}

func (o *CanDoNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CanDoNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCanDoUnprocessableEntity creates a CanDoUnprocessableEntity with default headers values
func NewCanDoUnprocessableEntity() *CanDoUnprocessableEntity {
	return &CanDoUnprocessableEntity{}
}

/*CanDoUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type CanDoUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *CanDoUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/can_do][%d] canDoUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *CanDoUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CanDoUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCanDoDefault creates a CanDoDefault with default headers values
func NewCanDoDefault(code int) *CanDoDefault {
	return &CanDoDefault{
		_statusCode: code,
	}
}

/*CanDoDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type CanDoDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the can do default response
func (o *CanDoDefault) Code() int {
	return o._statusCode
}

func (o *CanDoDefault) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/can_do][%d] canDo default  %+v", o._statusCode, o.Payload)
}

func (o *CanDoDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CanDoDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*CanDoOKBody can do o k body
swagger:model CanDoOKBody
*/
type CanDoOKBody struct {

	// data
	// Required: true
	Data *models.CanDoOutput `json:"data"`
}

// Validate validates this can do o k body
func (o *CanDoOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *CanDoOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("canDoOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("canDoOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *CanDoOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *CanDoOKBody) UnmarshalBinary(b []byte) error {
	var res CanDoOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
