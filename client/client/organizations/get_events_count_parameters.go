// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// NewGetEventsCountParams creates a new GetEventsCountParams object,
// with the default timeout for this client.
//
// Default values are not hydrated, since defaults are normally applied by the API server side.
//
// To enforce default values in parameter, use SetDefaults or WithDefaults.
func NewGetEventsCountParams() *GetEventsCountParams {
	return &GetEventsCountParams{
		timeout: cr.DefaultTimeout,
	}
}

// NewGetEventsCountParamsWithTimeout creates a new GetEventsCountParams object
// with the ability to set a timeout on a request.
func NewGetEventsCountParamsWithTimeout(timeout time.Duration) *GetEventsCountParams {
	return &GetEventsCountParams{
		timeout: timeout,
	}
}

// NewGetEventsCountParamsWithContext creates a new GetEventsCountParams object
// with the ability to set a context for a request.
func NewGetEventsCountParamsWithContext(ctx context.Context) *GetEventsCountParams {
	return &GetEventsCountParams{
		Context: ctx,
	}
}

// NewGetEventsCountParamsWithHTTPClient creates a new GetEventsCountParams object
// with the ability to set a custom HTTPClient for a request.
func NewGetEventsCountParamsWithHTTPClient(client *http.Client) *GetEventsCountParams {
	return &GetEventsCountParams{
		HTTPClient: client,
	}
}

/*
GetEventsCountParams contains all the parameters to send to the API endpoint

	for the get events count operation.

	Typically these are written to a http.Request.
*/
type GetEventsCountParams struct {

	/* Begin.

	   The unix timestamp in milliseconds, which indicate the start of the time range.

	   Format: uint64
	*/
	Begin *uint64

	/* End.

	   The unix timestamp in milliseconds, which indicate the end of the time range.

	   Format: uint64
	*/
	End *uint64

	/* EventsCountGranularity.

	   Sets the events count granularity, it can be month, week, day.
	*/
	EventsCountGranularity string

	/* OrganizationCanonical.

	   A canonical of an organization.
	*/
	OrganizationCanonical string

	/* ProjectCanonical.

	   A list of projects' canonical to filter from
	*/
	ProjectCanonical *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithDefaults hydrates default values in the get events count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsCountParams) WithDefaults() *GetEventsCountParams {
	o.SetDefaults()
	return o
}

// SetDefaults hydrates default values in the get events count params (not the query body).
//
// All values with no default are reset to their zero value.
func (o *GetEventsCountParams) SetDefaults() {
	// no default values defined for this parameter
}

// WithTimeout adds the timeout to the get events count params
func (o *GetEventsCountParams) WithTimeout(timeout time.Duration) *GetEventsCountParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get events count params
func (o *GetEventsCountParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get events count params
func (o *GetEventsCountParams) WithContext(ctx context.Context) *GetEventsCountParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get events count params
func (o *GetEventsCountParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get events count params
func (o *GetEventsCountParams) WithHTTPClient(client *http.Client) *GetEventsCountParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get events count params
func (o *GetEventsCountParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get events count params
func (o *GetEventsCountParams) WithBegin(begin *uint64) *GetEventsCountParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get events count params
func (o *GetEventsCountParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithEnd adds the end to the get events count params
func (o *GetEventsCountParams) WithEnd(end *uint64) *GetEventsCountParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get events count params
func (o *GetEventsCountParams) SetEnd(end *uint64) {
	o.End = end
}

// WithEventsCountGranularity adds the eventsCountGranularity to the get events count params
func (o *GetEventsCountParams) WithEventsCountGranularity(eventsCountGranularity string) *GetEventsCountParams {
	o.SetEventsCountGranularity(eventsCountGranularity)
	return o
}

// SetEventsCountGranularity adds the eventsCountGranularity to the get events count params
func (o *GetEventsCountParams) SetEventsCountGranularity(eventsCountGranularity string) {
	o.EventsCountGranularity = eventsCountGranularity
}

// WithOrganizationCanonical adds the organizationCanonical to the get events count params
func (o *GetEventsCountParams) WithOrganizationCanonical(organizationCanonical string) *GetEventsCountParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get events count params
func (o *GetEventsCountParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithProjectCanonical adds the projectCanonical to the get events count params
func (o *GetEventsCountParams) WithProjectCanonical(projectCanonical *string) *GetEventsCountParams {
	o.SetProjectCanonical(projectCanonical)
	return o
}

// SetProjectCanonical adds the projectCanonical to the get events count params
func (o *GetEventsCountParams) SetProjectCanonical(projectCanonical *string) {
	o.ProjectCanonical = projectCanonical
}

// WriteToRequest writes these params to a swagger request
func (o *GetEventsCountParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64

		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {

			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}
	}

	if o.End != nil {

		// query param end
		var qrEnd uint64

		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {

			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}
	}

	// query param events_count_granularity
	qrEventsCountGranularity := o.EventsCountGranularity
	qEventsCountGranularity := qrEventsCountGranularity
	if qEventsCountGranularity != "" {

		if err := r.SetQueryParam("events_count_granularity", qEventsCountGranularity); err != nil {
			return err
		}
	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	if o.ProjectCanonical != nil {

		// query param project_canonical
		var qrProjectCanonical string

		if o.ProjectCanonical != nil {
			qrProjectCanonical = *o.ProjectCanonical
		}
		qProjectCanonical := qrProjectCanonical
		if qProjectCanonical != "" {

			if err := r.SetQueryParam("project_canonical", qProjectCanonical); err != nil {
				return err
			}
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
