// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// GetEventsTagsReader is a Reader for the GetEventsTags structure.
type GetEventsTagsReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetEventsTagsReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetEventsTagsOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetEventsTagsForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetEventsTagsUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetEventsTagsDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetEventsTagsOK creates a GetEventsTagsOK with default headers values
func NewGetEventsTagsOK() *GetEventsTagsOK {
	return &GetEventsTagsOK{}
}

/*
GetEventsTagsOK describes a response with status code 200, with default header values.

The list of tags and set of values for all the events of the organization.
*/
type GetEventsTagsOK struct {
	Payload *GetEventsTagsOKBody
}

// IsSuccess returns true when this get events tags o k response has a 2xx status code
func (o *GetEventsTagsOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this get events tags o k response has a 3xx status code
func (o *GetEventsTagsOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events tags o k response has a 4xx status code
func (o *GetEventsTagsOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this get events tags o k response has a 5xx status code
func (o *GetEventsTagsOK) IsServerError() bool {
	return false
}

// IsCode returns true when this get events tags o k response a status code equal to that given
func (o *GetEventsTagsOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the get events tags o k response
func (o *GetEventsTagsOK) Code() int {
	return 200
}

func (o *GetEventsTagsOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsOK %s", 200, payload)
}

func (o *GetEventsTagsOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsOK %s", 200, payload)
}

func (o *GetEventsTagsOK) GetPayload() *GetEventsTagsOKBody {
	return o.Payload
}

func (o *GetEventsTagsOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetEventsTagsOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsTagsForbidden creates a GetEventsTagsForbidden with default headers values
func NewGetEventsTagsForbidden() *GetEventsTagsForbidden {
	return &GetEventsTagsForbidden{}
}

/*
GetEventsTagsForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetEventsTagsForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get events tags forbidden response has a 2xx status code
func (o *GetEventsTagsForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events tags forbidden response has a 3xx status code
func (o *GetEventsTagsForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events tags forbidden response has a 4xx status code
func (o *GetEventsTagsForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this get events tags forbidden response has a 5xx status code
func (o *GetEventsTagsForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this get events tags forbidden response a status code equal to that given
func (o *GetEventsTagsForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the get events tags forbidden response
func (o *GetEventsTagsForbidden) Code() int {
	return 403
}

func (o *GetEventsTagsForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsForbidden %s", 403, payload)
}

func (o *GetEventsTagsForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsForbidden %s", 403, payload)
}

func (o *GetEventsTagsForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetEventsTagsForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsTagsUnprocessableEntity creates a GetEventsTagsUnprocessableEntity with default headers values
func NewGetEventsTagsUnprocessableEntity() *GetEventsTagsUnprocessableEntity {
	return &GetEventsTagsUnprocessableEntity{}
}

/*
GetEventsTagsUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetEventsTagsUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get events tags unprocessable entity response has a 2xx status code
func (o *GetEventsTagsUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this get events tags unprocessable entity response has a 3xx status code
func (o *GetEventsTagsUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this get events tags unprocessable entity response has a 4xx status code
func (o *GetEventsTagsUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this get events tags unprocessable entity response has a 5xx status code
func (o *GetEventsTagsUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this get events tags unprocessable entity response a status code equal to that given
func (o *GetEventsTagsUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the get events tags unprocessable entity response
func (o *GetEventsTagsUnprocessableEntity) Code() int {
	return 422
}

func (o *GetEventsTagsUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsUnprocessableEntity %s", 422, payload)
}

func (o *GetEventsTagsUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTagsUnprocessableEntity %s", 422, payload)
}

func (o *GetEventsTagsUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetEventsTagsUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetEventsTagsDefault creates a GetEventsTagsDefault with default headers values
func NewGetEventsTagsDefault(code int) *GetEventsTagsDefault {
	return &GetEventsTagsDefault{
		_statusCode: code,
	}
}

/*
GetEventsTagsDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetEventsTagsDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this get events tags default response has a 2xx status code
func (o *GetEventsTagsDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this get events tags default response has a 3xx status code
func (o *GetEventsTagsDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this get events tags default response has a 4xx status code
func (o *GetEventsTagsDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this get events tags default response has a 5xx status code
func (o *GetEventsTagsDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this get events tags default response a status code equal to that given
func (o *GetEventsTagsDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the get events tags default response
func (o *GetEventsTagsDefault) Code() int {
	return o._statusCode
}

func (o *GetEventsTagsDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTags default %s", o._statusCode, payload)
}

func (o *GetEventsTagsDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/events/tags][%d] getEventsTags default %s", o._statusCode, payload)
}

func (o *GetEventsTagsDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetEventsTagsDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
GetEventsTagsOKBody The list of tags with associated set of values
swagger:model GetEventsTagsOKBody
*/
type GetEventsTagsOKBody struct {

	// data
	// Required: true
	Data interface{} `json:"data"`
}

// Validate validates this get events tags o k body
func (o *GetEventsTagsOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetEventsTagsOKBody) validateData(formats strfmt.Registry) error {

	if o.Data == nil {
		return errors.Required("getEventsTagsOK"+"."+"data", "body", nil)
	}

	return nil
}

// ContextValidate validates this get events tags o k body based on context it is used
func (o *GetEventsTagsOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (o *GetEventsTagsOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetEventsTagsOKBody) UnmarshalBinary(b []byte) error {
	var res GetEventsTagsOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
