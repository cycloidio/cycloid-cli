// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOrgEventsParams creates a new GetOrgEventsParams object
// with the default values initialized.
func NewGetOrgEventsParams() *GetOrgEventsParams {
	var ()
	return &GetOrgEventsParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOrgEventsParamsWithTimeout creates a new GetOrgEventsParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOrgEventsParamsWithTimeout(timeout time.Duration) *GetOrgEventsParams {
	var ()
	return &GetOrgEventsParams{

		timeout: timeout,
	}
}

// NewGetOrgEventsParamsWithContext creates a new GetOrgEventsParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOrgEventsParamsWithContext(ctx context.Context) *GetOrgEventsParams {
	var ()
	return &GetOrgEventsParams{

		Context: ctx,
	}
}

// NewGetOrgEventsParamsWithHTTPClient creates a new GetOrgEventsParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOrgEventsParamsWithHTTPClient(client *http.Client) *GetOrgEventsParams {
	var ()
	return &GetOrgEventsParams{
		HTTPClient: client,
	}
}

/*GetOrgEventsParams contains all the parameters to send to the API endpoint
for the get org events operation typically these are written to a http.Request
*/
type GetOrgEventsParams struct {

	/*Begin
	  The unix timestamp in milliseconds, which indicate the start of the time range.

	*/
	Begin *uint64
	/*End
	  The unix timestamp in milliseconds, which indicate the end of the time range.

	*/
	End *uint64
	/*OrganizationCanonical
	  A canonical of an organization.

	*/
	OrganizationCanonical string
	/*Severity
	  Specify the severities of the events to be requested. The returned events must have one of the specified severities.

	*/
	Severity []string
	/*Type
	  Specify the types of the events to be requested. The returned events must have one of the specified types.

	*/
	Type []string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get org events params
func (o *GetOrgEventsParams) WithTimeout(timeout time.Duration) *GetOrgEventsParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get org events params
func (o *GetOrgEventsParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get org events params
func (o *GetOrgEventsParams) WithContext(ctx context.Context) *GetOrgEventsParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get org events params
func (o *GetOrgEventsParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get org events params
func (o *GetOrgEventsParams) WithHTTPClient(client *http.Client) *GetOrgEventsParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get org events params
func (o *GetOrgEventsParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBegin adds the begin to the get org events params
func (o *GetOrgEventsParams) WithBegin(begin *uint64) *GetOrgEventsParams {
	o.SetBegin(begin)
	return o
}

// SetBegin adds the begin to the get org events params
func (o *GetOrgEventsParams) SetBegin(begin *uint64) {
	o.Begin = begin
}

// WithEnd adds the end to the get org events params
func (o *GetOrgEventsParams) WithEnd(end *uint64) *GetOrgEventsParams {
	o.SetEnd(end)
	return o
}

// SetEnd adds the end to the get org events params
func (o *GetOrgEventsParams) SetEnd(end *uint64) {
	o.End = end
}

// WithOrganizationCanonical adds the organizationCanonical to the get org events params
func (o *GetOrgEventsParams) WithOrganizationCanonical(organizationCanonical string) *GetOrgEventsParams {
	o.SetOrganizationCanonical(organizationCanonical)
	return o
}

// SetOrganizationCanonical adds the organizationCanonical to the get org events params
func (o *GetOrgEventsParams) SetOrganizationCanonical(organizationCanonical string) {
	o.OrganizationCanonical = organizationCanonical
}

// WithSeverity adds the severity to the get org events params
func (o *GetOrgEventsParams) WithSeverity(severity []string) *GetOrgEventsParams {
	o.SetSeverity(severity)
	return o
}

// SetSeverity adds the severity to the get org events params
func (o *GetOrgEventsParams) SetSeverity(severity []string) {
	o.Severity = severity
}

// WithType adds the typeVar to the get org events params
func (o *GetOrgEventsParams) WithType(typeVar []string) *GetOrgEventsParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the get org events params
func (o *GetOrgEventsParams) SetType(typeVar []string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *GetOrgEventsParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Begin != nil {

		// query param begin
		var qrBegin uint64
		if o.Begin != nil {
			qrBegin = *o.Begin
		}
		qBegin := swag.FormatUint64(qrBegin)
		if qBegin != "" {
			if err := r.SetQueryParam("begin", qBegin); err != nil {
				return err
			}
		}

	}

	if o.End != nil {

		// query param end
		var qrEnd uint64
		if o.End != nil {
			qrEnd = *o.End
		}
		qEnd := swag.FormatUint64(qrEnd)
		if qEnd != "" {
			if err := r.SetQueryParam("end", qEnd); err != nil {
				return err
			}
		}

	}

	// path param organization_canonical
	if err := r.SetPathParam("organization_canonical", o.OrganizationCanonical); err != nil {
		return err
	}

	valuesSeverity := o.Severity

	joinedSeverity := swag.JoinByFormat(valuesSeverity, "multi")
	// query array param severity
	if err := r.SetQueryParam("severity", joinedSeverity...); err != nil {
		return err
	}

	valuesType := o.Type

	joinedType := swag.JoinByFormat(valuesType, "multi")
	// query array param type
	if err := r.SetQueryParam("type", joinedType...); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
