// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetRepoBranchesReader is a Reader for the GetRepoBranches structure.
type GetRepoBranchesReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetRepoBranchesReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetRepoBranchesOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetRepoBranchesForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetRepoBranchesNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewGetRepoBranchesUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetRepoBranchesDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetRepoBranchesOK creates a GetRepoBranchesOK with default headers values
func NewGetRepoBranchesOK() *GetRepoBranchesOK {
	return &GetRepoBranchesOK{}
}

/*GetRepoBranchesOK handles this case with default header values.

List of the repository branches
*/
type GetRepoBranchesOK struct {
	Payload *GetRepoBranchesOKBody
}

func (o *GetRepoBranchesOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/branches][%d] getRepoBranchesOK  %+v", 200, o.Payload)
}

func (o *GetRepoBranchesOK) GetPayload() *GetRepoBranchesOKBody {
	return o.Payload
}

func (o *GetRepoBranchesOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetRepoBranchesOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoBranchesForbidden creates a GetRepoBranchesForbidden with default headers values
func NewGetRepoBranchesForbidden() *GetRepoBranchesForbidden {
	return &GetRepoBranchesForbidden{}
}

/*GetRepoBranchesForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetRepoBranchesForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetRepoBranchesForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/branches][%d] getRepoBranchesForbidden  %+v", 403, o.Payload)
}

func (o *GetRepoBranchesForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRepoBranchesForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoBranchesNotFound creates a GetRepoBranchesNotFound with default headers values
func NewGetRepoBranchesNotFound() *GetRepoBranchesNotFound {
	return &GetRepoBranchesNotFound{}
}

/*GetRepoBranchesNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type GetRepoBranchesNotFound struct {
	Payload *models.ErrorPayload
}

func (o *GetRepoBranchesNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/branches][%d] getRepoBranchesNotFound  %+v", 404, o.Payload)
}

func (o *GetRepoBranchesNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRepoBranchesNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoBranchesUnprocessableEntity creates a GetRepoBranchesUnprocessableEntity with default headers values
func NewGetRepoBranchesUnprocessableEntity() *GetRepoBranchesUnprocessableEntity {
	return &GetRepoBranchesUnprocessableEntity{}
}

/*GetRepoBranchesUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type GetRepoBranchesUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *GetRepoBranchesUnprocessableEntity) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/branches][%d] getRepoBranchesUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *GetRepoBranchesUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRepoBranchesUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetRepoBranchesDefault creates a GetRepoBranchesDefault with default headers values
func NewGetRepoBranchesDefault(code int) *GetRepoBranchesDefault {
	return &GetRepoBranchesDefault{
		_statusCode: code,
	}
}

/*GetRepoBranchesDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetRepoBranchesDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get repo branches default response
func (o *GetRepoBranchesDefault) Code() int {
	return o._statusCode
}

func (o *GetRepoBranchesDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/branches][%d] getRepoBranches default  %+v", o._statusCode, o.Payload)
}

func (o *GetRepoBranchesDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetRepoBranchesDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetRepoBranchesOKBody get repo branches o k body
swagger:model GetRepoBranchesOKBody
*/
type GetRepoBranchesOKBody struct {

	// data
	// Required: true
	Data []string `json:"data"`
}

// Validate validates this get repo branches o k body
func (o *GetRepoBranchesOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetRepoBranchesOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getRepoBranchesOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetRepoBranchesOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetRepoBranchesOKBody) UnmarshalBinary(b []byte) error {
	var res GetRepoBranchesOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
