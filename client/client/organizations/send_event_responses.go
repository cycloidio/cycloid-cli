// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// SendEventReader is a Reader for the SendEvent structure.
type SendEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSendEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSendEventUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		return nil, runtime.NewAPIError("[POST /organizations/{organization_canonical}/events] sendEvent", response, response.Code())
	}
}

// NewSendEventOK creates a SendEventOK with default headers values
func NewSendEventOK() *SendEventOK {
	return &SendEventOK{}
}

/*
SendEventOK describes a response with status code 200, with default header values.

Event has been registered
*/
type SendEventOK struct {
	Payload *SendEventOKBody
}

// IsSuccess returns true when this send event o k response has a 2xx status code
func (o *SendEventOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this send event o k response has a 3xx status code
func (o *SendEventOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send event o k response has a 4xx status code
func (o *SendEventOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this send event o k response has a 5xx status code
func (o *SendEventOK) IsServerError() bool {
	return false
}

// IsCode returns true when this send event o k response a status code equal to that given
func (o *SendEventOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the send event o k response
func (o *SendEventOK) Code() int {
	return 200
}

func (o *SendEventOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventOK %s", 200, payload)
}

func (o *SendEventOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventOK %s", 200, payload)
}

func (o *SendEventOK) GetPayload() *SendEventOKBody {
	return o.Payload
}

func (o *SendEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendEventOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendEventForbidden creates a SendEventForbidden with default headers values
func NewSendEventForbidden() *SendEventForbidden {
	return &SendEventForbidden{}
}

/*
SendEventForbidden describes a response with status code 403, with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type SendEventForbidden struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this send event forbidden response has a 2xx status code
func (o *SendEventForbidden) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send event forbidden response has a 3xx status code
func (o *SendEventForbidden) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send event forbidden response has a 4xx status code
func (o *SendEventForbidden) IsClientError() bool {
	return true
}

// IsServerError returns true when this send event forbidden response has a 5xx status code
func (o *SendEventForbidden) IsServerError() bool {
	return false
}

// IsCode returns true when this send event forbidden response a status code equal to that given
func (o *SendEventForbidden) IsCode(code int) bool {
	return code == 403
}

// Code gets the status code for the send event forbidden response
func (o *SendEventForbidden) Code() int {
	return 403
}

func (o *SendEventForbidden) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventForbidden %s", 403, payload)
}

func (o *SendEventForbidden) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventForbidden %s", 403, payload)
}

func (o *SendEventForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendEventNotFound creates a SendEventNotFound with default headers values
func NewSendEventNotFound() *SendEventNotFound {
	return &SendEventNotFound{}
}

/*
SendEventNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type SendEventNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this send event not found response has a 2xx status code
func (o *SendEventNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send event not found response has a 3xx status code
func (o *SendEventNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send event not found response has a 4xx status code
func (o *SendEventNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this send event not found response has a 5xx status code
func (o *SendEventNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this send event not found response a status code equal to that given
func (o *SendEventNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the send event not found response
func (o *SendEventNotFound) Code() int {
	return 404
}

func (o *SendEventNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventNotFound %s", 404, payload)
}

func (o *SendEventNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventNotFound %s", 404, payload)
}

func (o *SendEventNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendEventUnprocessableEntity creates a SendEventUnprocessableEntity with default headers values
func NewSendEventUnprocessableEntity() *SendEventUnprocessableEntity {
	return &SendEventUnprocessableEntity{}
}

/*
SendEventUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type SendEventUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this send event unprocessable entity response has a 2xx status code
func (o *SendEventUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this send event unprocessable entity response has a 3xx status code
func (o *SendEventUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this send event unprocessable entity response has a 4xx status code
func (o *SendEventUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this send event unprocessable entity response has a 5xx status code
func (o *SendEventUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this send event unprocessable entity response a status code equal to that given
func (o *SendEventUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the send event unprocessable entity response
func (o *SendEventUnprocessableEntity) Code() int {
	return 422
}

func (o *SendEventUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventUnprocessableEntity %s", 422, payload)
}

func (o *SendEventUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendEventUnprocessableEntity %s", 422, payload)
}

func (o *SendEventUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendEventUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
SendEventOKBody The newly created event
swagger:model SendEventOKBody
*/
type SendEventOKBody struct {

	// data
	// Required: true
	Data *models.Event `json:"data"`
}

// Validate validates this send event o k body
func (o *SendEventOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendEventOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("sendEventOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sendEventOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sendEventOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this send event o k body based on the context it is used
func (o *SendEventOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendEventOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sendEventOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("sendEventOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendEventOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendEventOKBody) UnmarshalBinary(b []byte) error {
	var res SendEventOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
