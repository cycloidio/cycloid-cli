// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// SendOrgEventReader is a Reader for the SendOrgEvent structure.
type SendOrgEventReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SendOrgEventReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewSendOrgEventOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewSendOrgEventForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSendOrgEventNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSendOrgEventUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result

	default:
		return nil, runtime.NewAPIError("unknown error", response, response.Code())
	}
}

// NewSendOrgEventOK creates a SendOrgEventOK with default headers values
func NewSendOrgEventOK() *SendOrgEventOK {
	return &SendOrgEventOK{}
}

/*SendOrgEventOK handles this case with default header values.

Event has been registered
*/
type SendOrgEventOK struct {
	Payload *SendOrgEventOKBody
}

func (o *SendOrgEventOK) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendOrgEventOK  %+v", 200, o.Payload)
}

func (o *SendOrgEventOK) GetPayload() *SendOrgEventOKBody {
	return o.Payload
}

func (o *SendOrgEventOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(SendOrgEventOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendOrgEventForbidden creates a SendOrgEventForbidden with default headers values
func NewSendOrgEventForbidden() *SendOrgEventForbidden {
	return &SendOrgEventForbidden{}
}

/*SendOrgEventForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type SendOrgEventForbidden struct {
	Payload *models.ErrorPayload
}

func (o *SendOrgEventForbidden) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendOrgEventForbidden  %+v", 403, o.Payload)
}

func (o *SendOrgEventForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendOrgEventForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendOrgEventNotFound creates a SendOrgEventNotFound with default headers values
func NewSendOrgEventNotFound() *SendOrgEventNotFound {
	return &SendOrgEventNotFound{}
}

/*SendOrgEventNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type SendOrgEventNotFound struct {
	Payload *models.ErrorPayload
}

func (o *SendOrgEventNotFound) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendOrgEventNotFound  %+v", 404, o.Payload)
}

func (o *SendOrgEventNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendOrgEventNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSendOrgEventUnprocessableEntity creates a SendOrgEventUnprocessableEntity with default headers values
func NewSendOrgEventUnprocessableEntity() *SendOrgEventUnprocessableEntity {
	return &SendOrgEventUnprocessableEntity{}
}

/*SendOrgEventUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type SendOrgEventUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *SendOrgEventUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /organizations/{organization_canonical}/events][%d] sendOrgEventUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SendOrgEventUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SendOrgEventUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*SendOrgEventOKBody The newly created event
swagger:model SendOrgEventOKBody
*/
type SendOrgEventOKBody struct {

	// data
	// Required: true
	Data *models.Event `json:"data"`
}

// Validate validates this send org event o k body
func (o *SendOrgEventOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *SendOrgEventOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("sendOrgEventOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("sendOrgEventOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *SendOrgEventOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *SendOrgEventOKBody) UnmarshalBinary(b []byte) error {
	var res SendOrgEventOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
