// Code generated by go-swagger; DO NOT EDIT.

package organizations

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateOrgReader is a Reader for the UpdateOrg structure.
type UpdateOrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateOrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateOrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateOrgForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateOrgNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 411:
		result := NewUpdateOrgLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateOrgUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateOrgDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateOrgOK creates a UpdateOrgOK with default headers values
func NewUpdateOrgOK() *UpdateOrgOK {
	return &UpdateOrgOK{}
}

/*UpdateOrgOK handles this case with default header values.

Organization updated. The body contains information of the updated organization.
*/
type UpdateOrgOK struct {
	Payload *UpdateOrgOKBody
}

func (o *UpdateOrgOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrgOK  %+v", 200, o.Payload)
}

func (o *UpdateOrgOK) GetPayload() *UpdateOrgOKBody {
	return o.Payload
}

func (o *UpdateOrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(UpdateOrgOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgForbidden creates a UpdateOrgForbidden with default headers values
func NewUpdateOrgForbidden() *UpdateOrgForbidden {
	return &UpdateOrgForbidden{}
}

/*UpdateOrgForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateOrgForbidden struct {
	Payload *models.ErrorPayload
}

func (o *UpdateOrgForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrgForbidden  %+v", 403, o.Payload)
}

func (o *UpdateOrgForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgNotFound creates a UpdateOrgNotFound with default headers values
func NewUpdateOrgNotFound() *UpdateOrgNotFound {
	return &UpdateOrgNotFound{}
}

/*UpdateOrgNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateOrgNotFound struct {
	Payload *models.ErrorPayload
}

func (o *UpdateOrgNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrgNotFound  %+v", 404, o.Payload)
}

func (o *UpdateOrgNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgLengthRequired creates a UpdateOrgLengthRequired with default headers values
func NewUpdateOrgLengthRequired() *UpdateOrgLengthRequired {
	return &UpdateOrgLengthRequired{}
}

/*UpdateOrgLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type UpdateOrgLengthRequired struct {
}

func (o *UpdateOrgLengthRequired) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrgLengthRequired ", 411)
}

func (o *UpdateOrgLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateOrgUnprocessableEntity creates a UpdateOrgUnprocessableEntity with default headers values
func NewUpdateOrgUnprocessableEntity() *UpdateOrgUnprocessableEntity {
	return &UpdateOrgUnprocessableEntity{}
}

/*UpdateOrgUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateOrgUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *UpdateOrgUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrgUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateOrgUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateOrgDefault creates a UpdateOrgDefault with default headers values
func NewUpdateOrgDefault(code int) *UpdateOrgDefault {
	return &UpdateOrgDefault{
		_statusCode: code,
	}
}

/*UpdateOrgDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateOrgDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the update org default response
func (o *UpdateOrgDefault) Code() int {
	return o._statusCode
}

func (o *UpdateOrgDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}][%d] updateOrg default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateOrgDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateOrgDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateOrgOKBody update org o k body
swagger:model UpdateOrgOKBody
*/
type UpdateOrgOKBody struct {

	// data
	// Required: true
	Data *models.Organization `json:"data"`
}

// Validate validates this update org o k body
func (o *UpdateOrgOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateOrgOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateOrgOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateOrgOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateOrgOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateOrgOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateOrgOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
