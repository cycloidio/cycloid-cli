// Code generated by go-swagger; DO NOT EDIT.

package s_a_m_l2

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// SamlAssertionConsumerServiceReader is a Reader for the SamlAssertionConsumerService structure.
type SamlAssertionConsumerServiceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SamlAssertionConsumerServiceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 303:
		result := NewSamlAssertionConsumerServiceSeeOther()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewSamlAssertionConsumerServiceNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSamlAssertionConsumerServiceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSamlAssertionConsumerServiceSeeOther creates a SamlAssertionConsumerServiceSeeOther with default headers values
func NewSamlAssertionConsumerServiceSeeOther() *SamlAssertionConsumerServiceSeeOther {
	return &SamlAssertionConsumerServiceSeeOther{}
}

/*
SamlAssertionConsumerServiceSeeOther describes a response with status code 303, with default header values.

The response will always be a redirect to the front-end with the authentication code. With this code, the application can proceed with a normal OAuth flow, by sending it to the /user/saml2/oauth endpoint.
*/
type SamlAssertionConsumerServiceSeeOther struct {

	/* Location URL will contain either a "code" or "error" query parameter, depending on authentication result.

	   Format: uri
	*/
	Location strfmt.URI
}

// IsSuccess returns true when this saml assertion consumer service see other response has a 2xx status code
func (o *SamlAssertionConsumerServiceSeeOther) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this saml assertion consumer service see other response has a 3xx status code
func (o *SamlAssertionConsumerServiceSeeOther) IsRedirect() bool {
	return true
}

// IsClientError returns true when this saml assertion consumer service see other response has a 4xx status code
func (o *SamlAssertionConsumerServiceSeeOther) IsClientError() bool {
	return false
}

// IsServerError returns true when this saml assertion consumer service see other response has a 5xx status code
func (o *SamlAssertionConsumerServiceSeeOther) IsServerError() bool {
	return false
}

// IsCode returns true when this saml assertion consumer service see other response a status code equal to that given
func (o *SamlAssertionConsumerServiceSeeOther) IsCode(code int) bool {
	return code == 303
}

// Code gets the status code for the saml assertion consumer service see other response
func (o *SamlAssertionConsumerServiceSeeOther) Code() int {
	return 303
}

func (o *SamlAssertionConsumerServiceSeeOther) Error() string {
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerServiceSeeOther", 303)
}

func (o *SamlAssertionConsumerServiceSeeOther) String() string {
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerServiceSeeOther", 303)
}

func (o *SamlAssertionConsumerServiceSeeOther) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Location
	hdrLocation := response.GetHeader("Location")

	if hdrLocation != "" {
		vallocation, err := formats.Parse("uri", hdrLocation)
		if err != nil {
			return errors.InvalidType("Location", "header", "strfmt.URI", hdrLocation)
		}
		o.Location = *(vallocation.(*strfmt.URI))
	}

	return nil
}

// NewSamlAssertionConsumerServiceNotFound creates a SamlAssertionConsumerServiceNotFound with default headers values
func NewSamlAssertionConsumerServiceNotFound() *SamlAssertionConsumerServiceNotFound {
	return &SamlAssertionConsumerServiceNotFound{}
}

/*
SamlAssertionConsumerServiceNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type SamlAssertionConsumerServiceNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this saml assertion consumer service not found response has a 2xx status code
func (o *SamlAssertionConsumerServiceNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this saml assertion consumer service not found response has a 3xx status code
func (o *SamlAssertionConsumerServiceNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this saml assertion consumer service not found response has a 4xx status code
func (o *SamlAssertionConsumerServiceNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this saml assertion consumer service not found response has a 5xx status code
func (o *SamlAssertionConsumerServiceNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this saml assertion consumer service not found response a status code equal to that given
func (o *SamlAssertionConsumerServiceNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the saml assertion consumer service not found response
func (o *SamlAssertionConsumerServiceNotFound) Code() int {
	return 404
}

func (o *SamlAssertionConsumerServiceNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerServiceNotFound %s", 404, payload)
}

func (o *SamlAssertionConsumerServiceNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerServiceNotFound %s", 404, payload)
}

func (o *SamlAssertionConsumerServiceNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SamlAssertionConsumerServiceNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSamlAssertionConsumerServiceDefault creates a SamlAssertionConsumerServiceDefault with default headers values
func NewSamlAssertionConsumerServiceDefault(code int) *SamlAssertionConsumerServiceDefault {
	return &SamlAssertionConsumerServiceDefault{
		_statusCode: code,
	}
}

/*
SamlAssertionConsumerServiceDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type SamlAssertionConsumerServiceDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this saml assertion consumer service default response has a 2xx status code
func (o *SamlAssertionConsumerServiceDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this saml assertion consumer service default response has a 3xx status code
func (o *SamlAssertionConsumerServiceDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this saml assertion consumer service default response has a 4xx status code
func (o *SamlAssertionConsumerServiceDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this saml assertion consumer service default response has a 5xx status code
func (o *SamlAssertionConsumerServiceDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this saml assertion consumer service default response a status code equal to that given
func (o *SamlAssertionConsumerServiceDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the saml assertion consumer service default response
func (o *SamlAssertionConsumerServiceDefault) Code() int {
	return o._statusCode
}

func (o *SamlAssertionConsumerServiceDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerService default %s", o._statusCode, payload)
}

func (o *SamlAssertionConsumerServiceDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /saml2/acs][%d] samlAssertionConsumerService default %s", o._statusCode, payload)
}

func (o *SamlAssertionConsumerServiceDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SamlAssertionConsumerServiceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
