// Code generated by go-swagger; DO NOT EDIT.

package service_catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new service catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for service catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateServiceCatalog Create a new Service Catalog
*/
func (a *Client) CreateServiceCatalog(params *CreateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*CreateServiceCatalogAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createServiceCatalog",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCatalogAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceCatalog Delete the service catalog.
*/
func (a *Client) DeleteServiceCatalog(params *DeleteServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteServiceCatalogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteServiceCatalog",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceCatalogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceCatalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceCatalog Get the information of the service catalog
*/
func (a *Client) GetServiceCatalog(params *GetServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalog",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogConfig Get the config of the service catalog
*/
func (a *Client) GetServiceCatalogConfig(params *GetServiceCatalogConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogConfig",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraform Get the information of the service catalog Terraform config
*/
func (a *Client) GetServiceCatalogTerraform(params *GetServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogTerraformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraform",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraformDiagram Get the information of the service catalog Terraform diagram
*/
func (a *Client) GetServiceCatalogTerraformDiagram(params *GetServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogTerraformDiagramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformDiagramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraformDiagram",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformDiagramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraformImage Get the SC TF Image
*/
func (a *Client) GetServiceCatalogTerraformImage(params *GetServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogTerraformImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraformImage",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogs Return all the service catalogs
*/
func (a *Client) GetServiceCatalogs(params *GetServiceCatalogsParams, authInfo runtime.ClientAuthInfoWriter) (*GetServiceCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getServiceCatalogs",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalog Update the information of the service catalog
*/
func (a *Client) UpdateServiceCatalog(params *UpdateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceCatalog",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraform Update/Create the information of the service catalog Terraform config
*/
func (a *Client) UpdateServiceCatalogTerraform(params *UpdateServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceCatalogTerraformNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraform",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraformDiagram Update/Create the information of the service catalog Terraform diagram
*/
func (a *Client) UpdateServiceCatalogTerraformDiagram(params *UpdateServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceCatalogTerraformDiagramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformDiagramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraformDiagram",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformDiagramNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraformImage Update/Create the Image for the SC TF Image
*/
func (a *Client) UpdateServiceCatalogTerraformImage(params *UpdateServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateServiceCatalogTerraformImageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraformImage",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformImageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
