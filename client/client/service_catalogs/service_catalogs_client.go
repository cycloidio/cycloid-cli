// Code generated by go-swagger; DO NOT EDIT.

package service_catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new service catalogs API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new service catalogs API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new service catalogs API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for service catalogs API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateServiceCatalog(params *CreateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCatalogOK, error)

	CreateServiceCatalogFromTemplate(params *CreateServiceCatalogFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCatalogFromTemplateOK, error)

	DeleteServiceCatalog(params *DeleteServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceCatalogNoContent, error)

	GetServiceCatalog(params *GetServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogOK, error)

	GetServiceCatalogConfig(params *GetServiceCatalogConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogConfigOK, error)

	GetServiceCatalogTerraform(params *GetServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformOK, error)

	GetServiceCatalogTerraformDiagram(params *GetServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformDiagramOK, error)

	GetServiceCatalogTerraformImage(params *GetServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformImageOK, error)

	ListServiceCatalogs(params *ListServiceCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceCatalogsOK, error)

	UpdateServiceCatalog(params *UpdateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogOK, error)

	UpdateServiceCatalogTerraform(params *UpdateServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformNoContent, error)

	UpdateServiceCatalogTerraformDiagram(params *UpdateServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformDiagramNoContent, error)

	UpdateServiceCatalogTerraformImage(params *UpdateServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformImageNoContent, error)

	ValidateServiceCatalogDependencies(params *ValidateServiceCatalogDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateServiceCatalogDependenciesOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateServiceCatalog Create a new Service Catalog
*/
func (a *Client) CreateServiceCatalog(params *CreateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServiceCatalog",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateServiceCatalogFromTemplate Create a new Service Catalog using the ref and use case passed as template
*/
func (a *Client) CreateServiceCatalogFromTemplate(params *CreateServiceCatalogFromTemplateParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*CreateServiceCatalogFromTemplateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateServiceCatalogFromTemplateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createServiceCatalogFromTemplate",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/template",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateServiceCatalogFromTemplateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateServiceCatalogFromTemplateOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateServiceCatalogFromTemplateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteServiceCatalog Delete the service catalog.
*/
func (a *Client) DeleteServiceCatalog(params *DeleteServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteServiceCatalogNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteServiceCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteServiceCatalog",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteServiceCatalogNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteServiceCatalog: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetServiceCatalog Get the information of the service catalog
*/
func (a *Client) GetServiceCatalog(params *GetServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceCatalog",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogConfig Get the config of the service catalog
*/
func (a *Client) GetServiceCatalogConfig(params *GetServiceCatalogConfigParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogConfigParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceCatalogConfig",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraform Get the information of the service catalog Terraform config
*/
func (a *Client) GetServiceCatalogTerraform(params *GetServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraform",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraformDiagram Get the information of the service catalog Terraform diagram
*/
func (a *Client) GetServiceCatalogTerraformDiagram(params *GetServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformDiagramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformDiagramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraformDiagram",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformDiagramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetServiceCatalogTerraformImage Get the SC TF Image
*/
func (a *Client) GetServiceCatalogTerraformImage(params *GetServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetServiceCatalogTerraformImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetServiceCatalogTerraformImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getServiceCatalogTerraformImage",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetServiceCatalogTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetServiceCatalogTerraformImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetServiceCatalogTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListServiceCatalogs Return all the service catalogs
*/
func (a *Client) ListServiceCatalogs(params *ListServiceCatalogsParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ListServiceCatalogsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListServiceCatalogsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listServiceCatalogs",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListServiceCatalogsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListServiceCatalogsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListServiceCatalogsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalog Update the information of the service catalog
*/
func (a *Client) UpdateServiceCatalog(params *UpdateServiceCatalogParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceCatalog",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraform Update/Create the information of the service catalog Terraform config
*/
func (a *Client) UpdateServiceCatalogTerraform(params *UpdateServiceCatalogTerraformParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraform",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraformDiagram Update/Create the information of the service catalog Terraform diagram
*/
func (a *Client) UpdateServiceCatalogTerraformDiagram(params *UpdateServiceCatalogTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformDiagramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformDiagramParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraformDiagram",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformDiagramNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateServiceCatalogTerraformImage Update/Create the Image for the SC TF Image
*/
func (a *Client) UpdateServiceCatalogTerraformImage(params *UpdateServiceCatalogTerraformImageParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateServiceCatalogTerraformImageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateServiceCatalogTerraformImageParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateServiceCatalogTerraformImage",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateServiceCatalogTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateServiceCatalogTerraformImageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateServiceCatalogTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateServiceCatalogDependencies Validates the dependencies of a Service Catalog
*/
func (a *Client) ValidateServiceCatalogDependencies(params *ValidateServiceCatalogDependenciesParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*ValidateServiceCatalogDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateServiceCatalogDependenciesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "validateServiceCatalogDependencies",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}/dependencies/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateServiceCatalogDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateServiceCatalogDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateServiceCatalogDependenciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
