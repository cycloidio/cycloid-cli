// Code generated by go-swagger; DO NOT EDIT.

package service_catalogs

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// UpdateServiceCatalogReader is a Reader for the UpdateServiceCatalog structure.
type UpdateServiceCatalogReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateServiceCatalogReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewUpdateServiceCatalogOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateServiceCatalogForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewUpdateServiceCatalogNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateServiceCatalogUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateServiceCatalogDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateServiceCatalogOK creates a UpdateServiceCatalogOK with default headers values
func NewUpdateServiceCatalogOK() *UpdateServiceCatalogOK {
	return &UpdateServiceCatalogOK{}
}

/*UpdateServiceCatalogOK handles this case with default header values.

Updated the Service Catalog
*/
type UpdateServiceCatalogOK struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *UpdateServiceCatalogOKBody
}

func (o *UpdateServiceCatalogOK) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}][%d] updateServiceCatalogOK  %+v", 200, o.Payload)
}

func (o *UpdateServiceCatalogOK) GetPayload() *UpdateServiceCatalogOKBody {
	return o.Payload
}

func (o *UpdateServiceCatalogOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(UpdateServiceCatalogOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogForbidden creates a UpdateServiceCatalogForbidden with default headers values
func NewUpdateServiceCatalogForbidden() *UpdateServiceCatalogForbidden {
	return &UpdateServiceCatalogForbidden{}
}

/*UpdateServiceCatalogForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateServiceCatalogForbidden struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

func (o *UpdateServiceCatalogForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}][%d] updateServiceCatalogForbidden  %+v", 403, o.Payload)
}

func (o *UpdateServiceCatalogForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateServiceCatalogForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogNotFound creates a UpdateServiceCatalogNotFound with default headers values
func NewUpdateServiceCatalogNotFound() *UpdateServiceCatalogNotFound {
	return &UpdateServiceCatalogNotFound{}
}

/*UpdateServiceCatalogNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type UpdateServiceCatalogNotFound struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

func (o *UpdateServiceCatalogNotFound) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}][%d] updateServiceCatalogNotFound  %+v", 404, o.Payload)
}

func (o *UpdateServiceCatalogNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateServiceCatalogNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogUnprocessableEntity creates a UpdateServiceCatalogUnprocessableEntity with default headers values
func NewUpdateServiceCatalogUnprocessableEntity() *UpdateServiceCatalogUnprocessableEntity {
	return &UpdateServiceCatalogUnprocessableEntity{}
}

/*UpdateServiceCatalogUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateServiceCatalogUnprocessableEntity struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

func (o *UpdateServiceCatalogUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}][%d] updateServiceCatalogUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateServiceCatalogUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateServiceCatalogUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateServiceCatalogDefault creates a UpdateServiceCatalogDefault with default headers values
func NewUpdateServiceCatalogDefault(code int) *UpdateServiceCatalogDefault {
	return &UpdateServiceCatalogDefault{
		_statusCode: code,
	}
}

/*UpdateServiceCatalogDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateServiceCatalogDefault struct {
	_statusCode int

	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength int64

	Payload *models.ErrorPayload
}

// Code gets the status code for the update service catalog default response
func (o *UpdateServiceCatalogDefault) Code() int {
	return o._statusCode
}

func (o *UpdateServiceCatalogDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/service_catalogs/{service_catalog_ref}][%d] updateServiceCatalog default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateServiceCatalogDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateServiceCatalogDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertInt64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "int64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*UpdateServiceCatalogOKBody update service catalog o k body
swagger:model UpdateServiceCatalogOKBody
*/
type UpdateServiceCatalogOKBody struct {

	// data
	// Required: true
	Data *models.ServiceCatalog `json:"data"`
}

// Validate validates this update service catalog o k body
func (o *UpdateServiceCatalogOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *UpdateServiceCatalogOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("updateServiceCatalogOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("updateServiceCatalogOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *UpdateServiceCatalogOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *UpdateServiceCatalogOKBody) UnmarshalBinary(b []byte) error {
	var res UpdateServiceCatalogOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
