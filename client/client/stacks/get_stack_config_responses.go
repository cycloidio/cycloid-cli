// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetStackConfigReader is a Reader for the GetStackConfig structure.
type GetStackConfigReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStackConfigReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStackConfigOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetStackConfigForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStackConfigNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStackConfigDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStackConfigOK creates a GetStackConfigOK with default headers values
func NewGetStackConfigOK() *GetStackConfigOK {
	return &GetStackConfigOK{}
}

/*GetStackConfigOK handles this case with default header values.

The config of the stack.
*/
type GetStackConfigOK struct {
	Payload *GetStackConfigOKBody
}

func (o *GetStackConfigOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/config][%d] getStackConfigOK  %+v", 200, o.Payload)
}

func (o *GetStackConfigOK) GetPayload() *GetStackConfigOKBody {
	return o.Payload
}

func (o *GetStackConfigOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStackConfigOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackConfigForbidden creates a GetStackConfigForbidden with default headers values
func NewGetStackConfigForbidden() *GetStackConfigForbidden {
	return &GetStackConfigForbidden{}
}

/*GetStackConfigForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetStackConfigForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetStackConfigForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/config][%d] getStackConfigForbidden  %+v", 403, o.Payload)
}

func (o *GetStackConfigForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackConfigForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackConfigNotFound creates a GetStackConfigNotFound with default headers values
func NewGetStackConfigNotFound() *GetStackConfigNotFound {
	return &GetStackConfigNotFound{}
}

/*GetStackConfigNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type GetStackConfigNotFound struct {
	Payload *models.ErrorPayload
}

func (o *GetStackConfigNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/config][%d] getStackConfigNotFound  %+v", 404, o.Payload)
}

func (o *GetStackConfigNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackConfigNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackConfigDefault creates a GetStackConfigDefault with default headers values
func NewGetStackConfigDefault(code int) *GetStackConfigDefault {
	return &GetStackConfigDefault{
		_statusCode: code,
	}
}

/*GetStackConfigDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetStackConfigDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get stack config default response
func (o *GetStackConfigDefault) Code() int {
	return o._statusCode
}

func (o *GetStackConfigDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/config][%d] getStackConfig default  %+v", o._statusCode, o.Payload)
}

func (o *GetStackConfigDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackConfigDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetStackConfigOKBody get stack config o k body
swagger:model GetStackConfigOKBody
*/
type GetStackConfigOKBody struct {

	// data
	// Required: true
	Data interface{} `json:"data"`
}

// Validate validates this get stack config o k body
func (o *GetStackConfigOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStackConfigOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getStackConfigOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStackConfigOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStackConfigOKBody) UnmarshalBinary(b []byte) error {
	var res GetStackConfigOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
