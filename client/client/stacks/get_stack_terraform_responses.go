// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// GetStackTerraformReader is a Reader for the GetStackTerraform structure.
type GetStackTerraformReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *GetStackTerraformReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewGetStackTerraformOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewGetStackTerraformForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 404:
		result := NewGetStackTerraformNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewGetStackTerraformDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewGetStackTerraformOK creates a GetStackTerraformOK with default headers values
func NewGetStackTerraformOK() *GetStackTerraformOK {
	return &GetStackTerraformOK{}
}

/*GetStackTerraformOK handles this case with default header values.

The information of Terraform
*/
type GetStackTerraformOK struct {
	Payload *GetStackTerraformOKBody
}

func (o *GetStackTerraformOK) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform][%d] getStackTerraformOK  %+v", 200, o.Payload)
}

func (o *GetStackTerraformOK) GetPayload() *GetStackTerraformOKBody {
	return o.Payload
}

func (o *GetStackTerraformOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(GetStackTerraformOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackTerraformForbidden creates a GetStackTerraformForbidden with default headers values
func NewGetStackTerraformForbidden() *GetStackTerraformForbidden {
	return &GetStackTerraformForbidden{}
}

/*GetStackTerraformForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type GetStackTerraformForbidden struct {
	Payload *models.ErrorPayload
}

func (o *GetStackTerraformForbidden) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform][%d] getStackTerraformForbidden  %+v", 403, o.Payload)
}

func (o *GetStackTerraformForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackTerraformForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackTerraformNotFound creates a GetStackTerraformNotFound with default headers values
func NewGetStackTerraformNotFound() *GetStackTerraformNotFound {
	return &GetStackTerraformNotFound{}
}

/*GetStackTerraformNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type GetStackTerraformNotFound struct {
	Payload *models.ErrorPayload
}

func (o *GetStackTerraformNotFound) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform][%d] getStackTerraformNotFound  %+v", 404, o.Payload)
}

func (o *GetStackTerraformNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackTerraformNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewGetStackTerraformDefault creates a GetStackTerraformDefault with default headers values
func NewGetStackTerraformDefault(code int) *GetStackTerraformDefault {
	return &GetStackTerraformDefault{
		_statusCode: code,
	}
}

/*GetStackTerraformDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type GetStackTerraformDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the get stack terraform default response
func (o *GetStackTerraformDefault) Code() int {
	return o._statusCode
}

func (o *GetStackTerraformDefault) Error() string {
	return fmt.Sprintf("[GET /organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform][%d] getStackTerraform default  %+v", o._statusCode, o.Payload)
}

func (o *GetStackTerraformDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *GetStackTerraformDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*GetStackTerraformOKBody get stack terraform o k body
swagger:model GetStackTerraformOKBody
*/
type GetStackTerraformOKBody struct {

	// data
	// Required: true
	Data *models.TerraformJSONConfig `json:"data"`
}

// Validate validates this get stack terraform o k body
func (o *GetStackTerraformOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *GetStackTerraformOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("getStackTerraformOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("getStackTerraformOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *GetStackTerraformOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *GetStackTerraformOKBody) UnmarshalBinary(b []byte) error {
	var res GetStackTerraformOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
