// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new stacks API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for stacks API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
CreateStack Create a new Stack
*/
func (a *Client) CreateStack(params *CreateStackParams, authInfo runtime.ClientAuthInfoWriter) (*CreateStackAccepted, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "createStack",
		Method:             "POST",
		PathPattern:        "/organizations/{organization_canonical}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateStackAccepted)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateStackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteStack Delete the stack.
*/
func (a *Client) DeleteStack(params *DeleteStackParams, authInfo runtime.ClientAuthInfoWriter) (*DeleteStackNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "deleteStack",
		Method:             "DELETE",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteStackNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	// safeguard: normally, absent a default response, unknown success responses return an error above: so this is a codegen issue
	msg := fmt.Sprintf("unexpected success response for deleteStack: API contract not enforced by server. Client expected to get an error, but got: %T", result)
	panic(msg)
}

/*
GetStack Get the information of the stack
*/
func (a *Client) GetStack(params *GetStackParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStack",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStackConfig Get the config of the stack
*/
func (a *Client) GetStackConfig(params *GetStackConfigParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackConfigOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackConfigParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackConfig",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/config",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStackConfigReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackConfigOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStackConfigDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStackTerraform Get the information of the stack Terraform config
*/
func (a *Client) GetStackTerraform(params *GetStackTerraformParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackTerraformOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackTerraformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackTerraform",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStackTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackTerraformOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStackTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStackTerraformDiagram Get the information of the stack Terraform diagram
*/
func (a *Client) GetStackTerraformDiagram(params *GetStackTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackTerraformDiagramOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackTerraformDiagramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackTerraformDiagram",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStackTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackTerraformDiagramOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStackTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStackTerraformImage Get the Stack TF Image
*/
func (a *Client) GetStackTerraformImage(params *GetStackTerraformImageParams, authInfo runtime.ClientAuthInfoWriter) (*GetStackTerraformImageOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStackTerraformImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStackTerraformImage",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStackTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStackTerraformImageOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStackTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetStacks Return all the stacks
*/
func (a *Client) GetStacks(params *GetStacksParams, authInfo runtime.ClientAuthInfoWriter) (*GetStacksOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetStacksParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "getStacks",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetStacksReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetStacksOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetStacksDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateStack Update the information of the stack
*/
func (a *Client) UpdateStack(params *UpdateStackParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStackOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStack",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStackReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateStackDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateStackTerraform Update/Create the information of the stack Terraform config
*/
func (a *Client) UpdateStackTerraform(params *UpdateStackTerraformParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStackTerraformNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackTerraformParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStackTerraform",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/{use_case_canonical}/terraform",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStackTerraformReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackTerraformNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateStackTerraformDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateStackTerraformDiagram Update/Create the information of the stack Terraform diagram
*/
func (a *Client) UpdateStackTerraformDiagram(params *UpdateStackTerraformDiagramParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStackTerraformDiagramNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackTerraformDiagramParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStackTerraformDiagram",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStackTerraformDiagramReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackTerraformDiagramNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateStackTerraformDiagramDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateStackTerraformImage Update/Create the Image for the Stack TF Image
*/
func (a *Client) UpdateStackTerraformImage(params *UpdateStackTerraformImageParams, authInfo runtime.ClientAuthInfoWriter) (*UpdateStackTerraformImageNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateStackTerraformImageParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "updateStackTerraformImage",
		Method:             "PUT",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateStackTerraformImageReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateStackTerraformImageNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateStackTerraformImageDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ValidateStackDependencies Validates the dependencies of a Stack
*/
func (a *Client) ValidateStackDependencies(params *ValidateStackDependenciesParams, authInfo runtime.ClientAuthInfoWriter) (*ValidateStackDependenciesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewValidateStackDependenciesParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "validateStackDependencies",
		Method:             "GET",
		PathPattern:        "/organizations/{organization_canonical}/stacks/{stack_ref}/dependencies/validate",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ValidateStackDependenciesReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ValidateStackDependenciesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ValidateStackDependenciesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
