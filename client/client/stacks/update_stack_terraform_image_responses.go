// Code generated by go-swagger; DO NOT EDIT.

package stacks

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// UpdateStackTerraformImageReader is a Reader for the UpdateStackTerraformImage structure.
type UpdateStackTerraformImageReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *UpdateStackTerraformImageReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewUpdateStackTerraformImageNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 403:
		result := NewUpdateStackTerraformImageForbidden()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewUpdateStackTerraformImageUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewUpdateStackTerraformImageDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewUpdateStackTerraformImageNoContent creates a UpdateStackTerraformImageNoContent with default headers values
func NewUpdateStackTerraformImageNoContent() *UpdateStackTerraformImageNoContent {
	return &UpdateStackTerraformImageNoContent{}
}

/*UpdateStackTerraformImageNoContent handles this case with default header values.

Configuration has been updated
*/
type UpdateStackTerraformImageNoContent struct {
}

func (o *UpdateStackTerraformImageNoContent) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image][%d] updateStackTerraformImageNoContent ", 204)
}

func (o *UpdateStackTerraformImageNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewUpdateStackTerraformImageForbidden creates a UpdateStackTerraformImageForbidden with default headers values
func NewUpdateStackTerraformImageForbidden() *UpdateStackTerraformImageForbidden {
	return &UpdateStackTerraformImageForbidden{}
}

/*UpdateStackTerraformImageForbidden handles this case with default header values.

The authenticated user cannot perform the operation because, it doesn't have permissions for such operation.
*/
type UpdateStackTerraformImageForbidden struct {
	Payload *models.ErrorPayload
}

func (o *UpdateStackTerraformImageForbidden) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image][%d] updateStackTerraformImageForbidden  %+v", 403, o.Payload)
}

func (o *UpdateStackTerraformImageForbidden) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateStackTerraformImageForbidden) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackTerraformImageUnprocessableEntity creates a UpdateStackTerraformImageUnprocessableEntity with default headers values
func NewUpdateStackTerraformImageUnprocessableEntity() *UpdateStackTerraformImageUnprocessableEntity {
	return &UpdateStackTerraformImageUnprocessableEntity{}
}

/*UpdateStackTerraformImageUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type UpdateStackTerraformImageUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *UpdateStackTerraformImageUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image][%d] updateStackTerraformImageUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *UpdateStackTerraformImageUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateStackTerraformImageUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewUpdateStackTerraformImageDefault creates a UpdateStackTerraformImageDefault with default headers values
func NewUpdateStackTerraformImageDefault(code int) *UpdateStackTerraformImageDefault {
	return &UpdateStackTerraformImageDefault{
		_statusCode: code,
	}
}

/*UpdateStackTerraformImageDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type UpdateStackTerraformImageDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the update stack terraform image default response
func (o *UpdateStackTerraformImageDefault) Code() int {
	return o._statusCode
}

func (o *UpdateStackTerraformImageDefault) Error() string {
	return fmt.Sprintf("[PUT /organizations/{organization_canonical}/stacks/{stack_ref}/terraform/diagram/image][%d] updateStackTerraformImage default  %+v", o._statusCode, o.Payload)
}

func (o *UpdateStackTerraformImageDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *UpdateStackTerraformImageDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
