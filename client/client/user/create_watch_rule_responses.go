// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// CreateWatchRuleReader is a Reader for the CreateWatchRule structure.
type CreateWatchRuleReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *CreateWatchRuleReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewCreateWatchRuleOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 409:
		result := NewCreateWatchRuleConflict()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewCreateWatchRuleUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewCreateWatchRuleDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewCreateWatchRuleOK creates a CreateWatchRuleOK with default headers values
func NewCreateWatchRuleOK() *CreateWatchRuleOK {
	return &CreateWatchRuleOK{}
}

/*
CreateWatchRuleOK describes a response with status code 200, with default header values.

The watch rule was created
*/
type CreateWatchRuleOK struct {
}

// IsSuccess returns true when this create watch rule o k response has a 2xx status code
func (o *CreateWatchRuleOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this create watch rule o k response has a 3xx status code
func (o *CreateWatchRuleOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create watch rule o k response has a 4xx status code
func (o *CreateWatchRuleOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this create watch rule o k response has a 5xx status code
func (o *CreateWatchRuleOK) IsServerError() bool {
	return false
}

// IsCode returns true when this create watch rule o k response a status code equal to that given
func (o *CreateWatchRuleOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the create watch rule o k response
func (o *CreateWatchRuleOK) Code() int {
	return 200
}

func (o *CreateWatchRuleOK) Error() string {
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleOK", 200)
}

func (o *CreateWatchRuleOK) String() string {
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleOK", 200)
}

func (o *CreateWatchRuleOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateWatchRuleConflict creates a CreateWatchRuleConflict with default headers values
func NewCreateWatchRuleConflict() *CreateWatchRuleConflict {
	return &CreateWatchRuleConflict{}
}

/*
CreateWatchRuleConflict describes a response with status code 409, with default header values.

Credential deletion has internal conflict
*/
type CreateWatchRuleConflict struct {
}

// IsSuccess returns true when this create watch rule conflict response has a 2xx status code
func (o *CreateWatchRuleConflict) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create watch rule conflict response has a 3xx status code
func (o *CreateWatchRuleConflict) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create watch rule conflict response has a 4xx status code
func (o *CreateWatchRuleConflict) IsClientError() bool {
	return true
}

// IsServerError returns true when this create watch rule conflict response has a 5xx status code
func (o *CreateWatchRuleConflict) IsServerError() bool {
	return false
}

// IsCode returns true when this create watch rule conflict response a status code equal to that given
func (o *CreateWatchRuleConflict) IsCode(code int) bool {
	return code == 409
}

// Code gets the status code for the create watch rule conflict response
func (o *CreateWatchRuleConflict) Code() int {
	return 409
}

func (o *CreateWatchRuleConflict) Error() string {
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleConflict", 409)
}

func (o *CreateWatchRuleConflict) String() string {
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleConflict", 409)
}

func (o *CreateWatchRuleConflict) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewCreateWatchRuleUnprocessableEntity creates a CreateWatchRuleUnprocessableEntity with default headers values
func NewCreateWatchRuleUnprocessableEntity() *CreateWatchRuleUnprocessableEntity {
	return &CreateWatchRuleUnprocessableEntity{}
}

/*
CreateWatchRuleUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type CreateWatchRuleUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this create watch rule unprocessable entity response has a 2xx status code
func (o *CreateWatchRuleUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this create watch rule unprocessable entity response has a 3xx status code
func (o *CreateWatchRuleUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this create watch rule unprocessable entity response has a 4xx status code
func (o *CreateWatchRuleUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this create watch rule unprocessable entity response has a 5xx status code
func (o *CreateWatchRuleUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this create watch rule unprocessable entity response a status code equal to that given
func (o *CreateWatchRuleUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the create watch rule unprocessable entity response
func (o *CreateWatchRuleUnprocessableEntity) Code() int {
	return 422
}

func (o *CreateWatchRuleUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleUnprocessableEntity %s", 422, payload)
}

func (o *CreateWatchRuleUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRuleUnprocessableEntity %s", 422, payload)
}

func (o *CreateWatchRuleUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateWatchRuleUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewCreateWatchRuleDefault creates a CreateWatchRuleDefault with default headers values
func NewCreateWatchRuleDefault(code int) *CreateWatchRuleDefault {
	return &CreateWatchRuleDefault{
		_statusCode: code,
	}
}

/*
CreateWatchRuleDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type CreateWatchRuleDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this create watch rule default response has a 2xx status code
func (o *CreateWatchRuleDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this create watch rule default response has a 3xx status code
func (o *CreateWatchRuleDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this create watch rule default response has a 4xx status code
func (o *CreateWatchRuleDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this create watch rule default response has a 5xx status code
func (o *CreateWatchRuleDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this create watch rule default response a status code equal to that given
func (o *CreateWatchRuleDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the create watch rule default response
func (o *CreateWatchRuleDefault) Code() int {
	return o._statusCode
}

func (o *CreateWatchRuleDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRule default %s", o._statusCode, payload)
}

func (o *CreateWatchRuleDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/watch_rules][%d] createWatchRule default %s", o._statusCode, payload)
}

func (o *CreateWatchRuleDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *CreateWatchRuleDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
