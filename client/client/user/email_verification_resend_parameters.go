// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// NewEmailVerificationResendParams creates a new EmailVerificationResendParams object
// with the default values initialized.
func NewEmailVerificationResendParams() *EmailVerificationResendParams {
	var ()
	return &EmailVerificationResendParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewEmailVerificationResendParamsWithTimeout creates a new EmailVerificationResendParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewEmailVerificationResendParamsWithTimeout(timeout time.Duration) *EmailVerificationResendParams {
	var ()
	return &EmailVerificationResendParams{

		timeout: timeout,
	}
}

// NewEmailVerificationResendParamsWithContext creates a new EmailVerificationResendParams object
// with the default values initialized, and the ability to set a context for a request
func NewEmailVerificationResendParamsWithContext(ctx context.Context) *EmailVerificationResendParams {
	var ()
	return &EmailVerificationResendParams{

		Context: ctx,
	}
}

// NewEmailVerificationResendParamsWithHTTPClient creates a new EmailVerificationResendParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewEmailVerificationResendParamsWithHTTPClient(client *http.Client) *EmailVerificationResendParams {
	var ()
	return &EmailVerificationResendParams{
		HTTPClient: client,
	}
}

/*EmailVerificationResendParams contains all the parameters to send to the API endpoint
for the email verification resend operation typically these are written to a http.Request
*/
type EmailVerificationResendParams struct {

	/*Body
	  The email address to re-send the verification email. This endpoint doesn't return any error status code if the email doesn't exist nor it's already verified for avoiding that an attacker could find registered users email address.

	*/
	Body *models.UserEmail

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the email verification resend params
func (o *EmailVerificationResendParams) WithTimeout(timeout time.Duration) *EmailVerificationResendParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the email verification resend params
func (o *EmailVerificationResendParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the email verification resend params
func (o *EmailVerificationResendParams) WithContext(ctx context.Context) *EmailVerificationResendParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the email verification resend params
func (o *EmailVerificationResendParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the email verification resend params
func (o *EmailVerificationResendParams) WithHTTPClient(client *http.Client) *EmailVerificationResendParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the email verification resend params
func (o *EmailVerificationResendParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithBody adds the body to the email verification resend params
func (o *EmailVerificationResendParams) WithBody(body *models.UserEmail) *EmailVerificationResendParams {
	o.SetBody(body)
	return o
}

// SetBody adds the body to the email verification resend params
func (o *EmailVerificationResendParams) SetBody(body *models.UserEmail) {
	o.Body = body
}

// WriteToRequest writes these params to a swagger request
func (o *EmailVerificationResendParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Body != nil {
		if err := r.SetBodyParam(o.Body); err != nil {
			return err
		}
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
