// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"net/http"
	"time"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"

	strfmt "github.com/go-openapi/strfmt"
)

// NewGetOAuthUserParams creates a new GetOAuthUserParams object
// with the default values initialized.
func NewGetOAuthUserParams() *GetOAuthUserParams {
	var ()
	return &GetOAuthUserParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewGetOAuthUserParamsWithTimeout creates a new GetOAuthUserParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewGetOAuthUserParamsWithTimeout(timeout time.Duration) *GetOAuthUserParams {
	var ()
	return &GetOAuthUserParams{

		timeout: timeout,
	}
}

// NewGetOAuthUserParamsWithContext creates a new GetOAuthUserParams object
// with the default values initialized, and the ability to set a context for a request
func NewGetOAuthUserParamsWithContext(ctx context.Context) *GetOAuthUserParams {
	var ()
	return &GetOAuthUserParams{

		Context: ctx,
	}
}

// NewGetOAuthUserParamsWithHTTPClient creates a new GetOAuthUserParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewGetOAuthUserParamsWithHTTPClient(client *http.Client) *GetOAuthUserParams {
	var ()
	return &GetOAuthUserParams{
		HTTPClient: client,
	}
}

/*GetOAuthUserParams contains all the parameters to send to the API endpoint
for the get o auth user operation typically these are written to a http.Request
*/
type GetOAuthUserParams struct {

	/*OauthCode
	  The OAuth code returned form the Social Provider

	*/
	OauthCode string
	/*SocialType
	  The OAuth Social type

	*/
	SocialType string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the get o auth user params
func (o *GetOAuthUserParams) WithTimeout(timeout time.Duration) *GetOAuthUserParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the get o auth user params
func (o *GetOAuthUserParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the get o auth user params
func (o *GetOAuthUserParams) WithContext(ctx context.Context) *GetOAuthUserParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the get o auth user params
func (o *GetOAuthUserParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the get o auth user params
func (o *GetOAuthUserParams) WithHTTPClient(client *http.Client) *GetOAuthUserParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the get o auth user params
func (o *GetOAuthUserParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithOauthCode adds the oauthCode to the get o auth user params
func (o *GetOAuthUserParams) WithOauthCode(oauthCode string) *GetOAuthUserParams {
	o.SetOauthCode(oauthCode)
	return o
}

// SetOauthCode adds the oauthCode to the get o auth user params
func (o *GetOAuthUserParams) SetOauthCode(oauthCode string) {
	o.OauthCode = oauthCode
}

// WithSocialType adds the socialType to the get o auth user params
func (o *GetOAuthUserParams) WithSocialType(socialType string) *GetOAuthUserParams {
	o.SetSocialType(socialType)
	return o
}

// SetSocialType adds the socialType to the get o auth user params
func (o *GetOAuthUserParams) SetSocialType(socialType string) {
	o.SocialType = socialType
}

// WriteToRequest writes these params to a swagger request
func (o *GetOAuthUserParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	// query param oauth_code
	qrOauthCode := o.OauthCode
	qOauthCode := qrOauthCode
	if qOauthCode != "" {
		if err := r.SetQueryParam("oauth_code", qOauthCode); err != nil {
			return err
		}
	}

	// path param social_type
	if err := r.SetPathParam("social_type", o.SocialType); err != nil {
		return err
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
