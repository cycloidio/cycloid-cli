// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// LoginToOrgReader is a Reader for the LoginToOrg structure.
type LoginToOrgReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *LoginToOrgReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 200:
		result := NewLoginToOrgOK()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 401:
		result := NewLoginToOrgUnauthorized()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewLoginToOrgUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewLoginToOrgDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewLoginToOrgOK creates a LoginToOrgOK with default headers values
func NewLoginToOrgOK() *LoginToOrgOK {
	return &LoginToOrgOK{}
}

/*
LoginToOrgOK describes a response with status code 200, with default header values.

The token which represents the session of the user.
*/
type LoginToOrgOK struct {
	Payload *LoginToOrgOKBody
}

// IsSuccess returns true when this login to org o k response has a 2xx status code
func (o *LoginToOrgOK) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this login to org o k response has a 3xx status code
func (o *LoginToOrgOK) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login to org o k response has a 4xx status code
func (o *LoginToOrgOK) IsClientError() bool {
	return false
}

// IsServerError returns true when this login to org o k response has a 5xx status code
func (o *LoginToOrgOK) IsServerError() bool {
	return false
}

// IsCode returns true when this login to org o k response a status code equal to that given
func (o *LoginToOrgOK) IsCode(code int) bool {
	return code == 200
}

// Code gets the status code for the login to org o k response
func (o *LoginToOrgOK) Code() int {
	return 200
}

func (o *LoginToOrgOK) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgOK %s", 200, payload)
}

func (o *LoginToOrgOK) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgOK %s", 200, payload)
}

func (o *LoginToOrgOK) GetPayload() *LoginToOrgOKBody {
	return o.Payload
}

func (o *LoginToOrgOK) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(LoginToOrgOKBody)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginToOrgUnauthorized creates a LoginToOrgUnauthorized with default headers values
func NewLoginToOrgUnauthorized() *LoginToOrgUnauthorized {
	return &LoginToOrgUnauthorized{}
}

/*
LoginToOrgUnauthorized describes a response with status code 401, with default header values.

The user cannot be authenticated with the credentials which she/he has used.
*/
type LoginToOrgUnauthorized struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this login to org unauthorized response has a 2xx status code
func (o *LoginToOrgUnauthorized) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login to org unauthorized response has a 3xx status code
func (o *LoginToOrgUnauthorized) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login to org unauthorized response has a 4xx status code
func (o *LoginToOrgUnauthorized) IsClientError() bool {
	return true
}

// IsServerError returns true when this login to org unauthorized response has a 5xx status code
func (o *LoginToOrgUnauthorized) IsServerError() bool {
	return false
}

// IsCode returns true when this login to org unauthorized response a status code equal to that given
func (o *LoginToOrgUnauthorized) IsCode(code int) bool {
	return code == 401
}

// Code gets the status code for the login to org unauthorized response
func (o *LoginToOrgUnauthorized) Code() int {
	return 401
}

func (o *LoginToOrgUnauthorized) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgUnauthorized %s", 401, payload)
}

func (o *LoginToOrgUnauthorized) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgUnauthorized %s", 401, payload)
}

func (o *LoginToOrgUnauthorized) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LoginToOrgUnauthorized) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginToOrgUnprocessableEntity creates a LoginToOrgUnprocessableEntity with default headers values
func NewLoginToOrgUnprocessableEntity() *LoginToOrgUnprocessableEntity {
	return &LoginToOrgUnprocessableEntity{}
}

/*
LoginToOrgUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type LoginToOrgUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this login to org unprocessable entity response has a 2xx status code
func (o *LoginToOrgUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this login to org unprocessable entity response has a 3xx status code
func (o *LoginToOrgUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this login to org unprocessable entity response has a 4xx status code
func (o *LoginToOrgUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this login to org unprocessable entity response has a 5xx status code
func (o *LoginToOrgUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this login to org unprocessable entity response a status code equal to that given
func (o *LoginToOrgUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the login to org unprocessable entity response
func (o *LoginToOrgUnprocessableEntity) Code() int {
	return 422
}

func (o *LoginToOrgUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgUnprocessableEntity %s", 422, payload)
}

func (o *LoginToOrgUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrgUnprocessableEntity %s", 422, payload)
}

func (o *LoginToOrgUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LoginToOrgUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewLoginToOrgDefault creates a LoginToOrgDefault with default headers values
func NewLoginToOrgDefault(code int) *LoginToOrgDefault {
	return &LoginToOrgDefault{
		_statusCode: code,
	}
}

/*
LoginToOrgDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type LoginToOrgDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this login to org default response has a 2xx status code
func (o *LoginToOrgDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this login to org default response has a 3xx status code
func (o *LoginToOrgDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this login to org default response has a 4xx status code
func (o *LoginToOrgDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this login to org default response has a 5xx status code
func (o *LoginToOrgDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this login to org default response a status code equal to that given
func (o *LoginToOrgDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the login to org default response
func (o *LoginToOrgDefault) Code() int {
	return o._statusCode
}

func (o *LoginToOrgDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrg default %s", o._statusCode, payload)
}

func (o *LoginToOrgDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[POST /user/login/{organization_canonical}][%d] loginToOrg default %s", o._statusCode, payload)
}

func (o *LoginToOrgDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *LoginToOrgDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

/*
LoginToOrgOKBody login to org o k body
swagger:model LoginToOrgOKBody
*/
type LoginToOrgOKBody struct {

	// data
	// Required: true
	Data *models.UserSession `json:"data"`
}

// Validate validates this login to org o k body
func (o *LoginToOrgOKBody) Validate(formats strfmt.Registry) error {
	var res []error

	if err := o.validateData(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginToOrgOKBody) validateData(formats strfmt.Registry) error {

	if err := validate.Required("loginToOrgOK"+"."+"data", "body", o.Data); err != nil {
		return err
	}

	if o.Data != nil {
		if err := o.Data.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToOrgOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToOrgOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this login to org o k body based on the context it is used
func (o *LoginToOrgOKBody) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := o.contextValidateData(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (o *LoginToOrgOKBody) contextValidateData(ctx context.Context, formats strfmt.Registry) error {

	if o.Data != nil {

		if err := o.Data.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("loginToOrgOK" + "." + "data")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("loginToOrgOK" + "." + "data")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (o *LoginToOrgOKBody) MarshalBinary() ([]byte, error) {
	if o == nil {
		return nil, nil
	}
	return swag.WriteJSON(o)
}

// UnmarshalBinary interface implementation
func (o *LoginToOrgOKBody) UnmarshalBinary(b []byte) error {
	var res LoginToOrgOKBody
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*o = res
	return nil
}
