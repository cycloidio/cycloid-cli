// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// PasswordResetReqReader is a Reader for the PasswordResetReq structure.
type PasswordResetReqReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PasswordResetReqReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPasswordResetReqNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 422:
		result := NewPasswordResetReqUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPasswordResetReqDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPasswordResetReqNoContent creates a PasswordResetReqNoContent with default headers values
func NewPasswordResetReqNoContent() *PasswordResetReqNoContent {
	return &PasswordResetReqNoContent{}
}

/*PasswordResetReqNoContent handles this case with default header values.

The password has been changed.
*/
type PasswordResetReqNoContent struct {
}

func (o *PasswordResetReqNoContent) Error() string {
	return fmt.Sprintf("[POST /user/reset_password][%d] passwordResetReqNoContent ", 204)
}

func (o *PasswordResetReqNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPasswordResetReqUnprocessableEntity creates a PasswordResetReqUnprocessableEntity with default headers values
func NewPasswordResetReqUnprocessableEntity() *PasswordResetReqUnprocessableEntity {
	return &PasswordResetReqUnprocessableEntity{}
}

/*PasswordResetReqUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type PasswordResetReqUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *PasswordResetReqUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /user/reset_password][%d] passwordResetReqUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PasswordResetReqUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetReqUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPasswordResetReqDefault creates a PasswordResetReqDefault with default headers values
func NewPasswordResetReqDefault(code int) *PasswordResetReqDefault {
	return &PasswordResetReqDefault{
		_statusCode: code,
	}
}

/*PasswordResetReqDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type PasswordResetReqDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the password reset req default response
func (o *PasswordResetReqDefault) Code() int {
	return o._statusCode
}

func (o *PasswordResetReqDefault) Error() string {
	return fmt.Sprintf("[POST /user/reset_password][%d] passwordResetReq default  %+v", o._statusCode, o.Payload)
}

func (o *PasswordResetReqDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetReqDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
