// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// PasswordResetUpdateReader is a Reader for the PasswordResetUpdate structure.
type PasswordResetUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PasswordResetUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPasswordResetUpdateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPasswordResetUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPasswordResetUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPasswordResetUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPasswordResetUpdateNoContent creates a PasswordResetUpdateNoContent with default headers values
func NewPasswordResetUpdateNoContent() *PasswordResetUpdateNoContent {
	return &PasswordResetUpdateNoContent{}
}

/*PasswordResetUpdateNoContent handles this case with default header values.

The password has been changed.
*/
type PasswordResetUpdateNoContent struct {
}

func (o *PasswordResetUpdateNoContent) Error() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNoContent ", 204)
}

func (o *PasswordResetUpdateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPasswordResetUpdateNotFound creates a PasswordResetUpdateNotFound with default headers values
func NewPasswordResetUpdateNotFound() *PasswordResetUpdateNotFound {
	return &PasswordResetUpdateNotFound{}
}

/*PasswordResetUpdateNotFound handles this case with default header values.

The response sent when any of the entities present in the path is not found.
*/
type PasswordResetUpdateNotFound struct {
	Payload *models.ErrorPayload
}

func (o *PasswordResetUpdateNotFound) Error() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNotFound  %+v", 404, o.Payload)
}

func (o *PasswordResetUpdateNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPasswordResetUpdateUnprocessableEntity creates a PasswordResetUpdateUnprocessableEntity with default headers values
func NewPasswordResetUpdateUnprocessableEntity() *PasswordResetUpdateUnprocessableEntity {
	return &PasswordResetUpdateUnprocessableEntity{}
}

/*PasswordResetUpdateUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type PasswordResetUpdateUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *PasswordResetUpdateUnprocessableEntity) Error() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *PasswordResetUpdateUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPasswordResetUpdateDefault creates a PasswordResetUpdateDefault with default headers values
func NewPasswordResetUpdateDefault(code int) *PasswordResetUpdateDefault {
	return &PasswordResetUpdateDefault{
		_statusCode: code,
	}
}

/*PasswordResetUpdateDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type PasswordResetUpdateDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the password reset update default response
func (o *PasswordResetUpdateDefault) Code() int {
	return o._statusCode
}

func (o *PasswordResetUpdateDefault) Error() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdate default  %+v", o._statusCode, o.Payload)
}

func (o *PasswordResetUpdateDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
