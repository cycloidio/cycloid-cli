// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"

	"github.com/cycloidio/cycloid-cli/client/models"
)

// PasswordResetUpdateReader is a Reader for the PasswordResetUpdate structure.
type PasswordResetUpdateReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *PasswordResetUpdateReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewPasswordResetUpdateNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 404:
		result := NewPasswordResetUpdateNotFound()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewPasswordResetUpdateUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewPasswordResetUpdateDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewPasswordResetUpdateNoContent creates a PasswordResetUpdateNoContent with default headers values
func NewPasswordResetUpdateNoContent() *PasswordResetUpdateNoContent {
	return &PasswordResetUpdateNoContent{}
}

/*
PasswordResetUpdateNoContent describes a response with status code 204, with default header values.

The password has been changed.
*/
type PasswordResetUpdateNoContent struct {
}

// IsSuccess returns true when this password reset update no content response has a 2xx status code
func (o *PasswordResetUpdateNoContent) IsSuccess() bool {
	return true
}

// IsRedirect returns true when this password reset update no content response has a 3xx status code
func (o *PasswordResetUpdateNoContent) IsRedirect() bool {
	return false
}

// IsClientError returns true when this password reset update no content response has a 4xx status code
func (o *PasswordResetUpdateNoContent) IsClientError() bool {
	return false
}

// IsServerError returns true when this password reset update no content response has a 5xx status code
func (o *PasswordResetUpdateNoContent) IsServerError() bool {
	return false
}

// IsCode returns true when this password reset update no content response a status code equal to that given
func (o *PasswordResetUpdateNoContent) IsCode(code int) bool {
	return code == 204
}

// Code gets the status code for the password reset update no content response
func (o *PasswordResetUpdateNoContent) Code() int {
	return 204
}

func (o *PasswordResetUpdateNoContent) Error() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNoContent", 204)
}

func (o *PasswordResetUpdateNoContent) String() string {
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNoContent", 204)
}

func (o *PasswordResetUpdateNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewPasswordResetUpdateNotFound creates a PasswordResetUpdateNotFound with default headers values
func NewPasswordResetUpdateNotFound() *PasswordResetUpdateNotFound {
	return &PasswordResetUpdateNotFound{}
}

/*
PasswordResetUpdateNotFound describes a response with status code 404, with default header values.

The response sent when any of the entities present in the path is not found.
*/
type PasswordResetUpdateNotFound struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this password reset update not found response has a 2xx status code
func (o *PasswordResetUpdateNotFound) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this password reset update not found response has a 3xx status code
func (o *PasswordResetUpdateNotFound) IsRedirect() bool {
	return false
}

// IsClientError returns true when this password reset update not found response has a 4xx status code
func (o *PasswordResetUpdateNotFound) IsClientError() bool {
	return true
}

// IsServerError returns true when this password reset update not found response has a 5xx status code
func (o *PasswordResetUpdateNotFound) IsServerError() bool {
	return false
}

// IsCode returns true when this password reset update not found response a status code equal to that given
func (o *PasswordResetUpdateNotFound) IsCode(code int) bool {
	return code == 404
}

// Code gets the status code for the password reset update not found response
func (o *PasswordResetUpdateNotFound) Code() int {
	return 404
}

func (o *PasswordResetUpdateNotFound) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNotFound %s", 404, payload)
}

func (o *PasswordResetUpdateNotFound) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateNotFound %s", 404, payload)
}

func (o *PasswordResetUpdateNotFound) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateNotFound) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPasswordResetUpdateUnprocessableEntity creates a PasswordResetUpdateUnprocessableEntity with default headers values
func NewPasswordResetUpdateUnprocessableEntity() *PasswordResetUpdateUnprocessableEntity {
	return &PasswordResetUpdateUnprocessableEntity{}
}

/*
PasswordResetUpdateUnprocessableEntity describes a response with status code 422, with default header values.

All the custom errors that are generated from the Cycloid API
*/
type PasswordResetUpdateUnprocessableEntity struct {

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this password reset update unprocessable entity response has a 2xx status code
func (o *PasswordResetUpdateUnprocessableEntity) IsSuccess() bool {
	return false
}

// IsRedirect returns true when this password reset update unprocessable entity response has a 3xx status code
func (o *PasswordResetUpdateUnprocessableEntity) IsRedirect() bool {
	return false
}

// IsClientError returns true when this password reset update unprocessable entity response has a 4xx status code
func (o *PasswordResetUpdateUnprocessableEntity) IsClientError() bool {
	return true
}

// IsServerError returns true when this password reset update unprocessable entity response has a 5xx status code
func (o *PasswordResetUpdateUnprocessableEntity) IsServerError() bool {
	return false
}

// IsCode returns true when this password reset update unprocessable entity response a status code equal to that given
func (o *PasswordResetUpdateUnprocessableEntity) IsCode(code int) bool {
	return code == 422
}

// Code gets the status code for the password reset update unprocessable entity response
func (o *PasswordResetUpdateUnprocessableEntity) Code() int {
	return 422
}

func (o *PasswordResetUpdateUnprocessableEntity) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateUnprocessableEntity %s", 422, payload)
}

func (o *PasswordResetUpdateUnprocessableEntity) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdateUnprocessableEntity %s", 422, payload)
}

func (o *PasswordResetUpdateUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewPasswordResetUpdateDefault creates a PasswordResetUpdateDefault with default headers values
func NewPasswordResetUpdateDefault(code int) *PasswordResetUpdateDefault {
	return &PasswordResetUpdateDefault{
		_statusCode: code,
	}
}

/*
PasswordResetUpdateDefault describes a response with status code -1, with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type PasswordResetUpdateDefault struct {
	_statusCode int

	/* The length of the response body in octets (8-bit bytes).

	   Format: uint64
	*/
	ContentLength uint64

	Payload *models.ErrorPayload
}

// IsSuccess returns true when this password reset update default response has a 2xx status code
func (o *PasswordResetUpdateDefault) IsSuccess() bool {
	return o._statusCode/100 == 2
}

// IsRedirect returns true when this password reset update default response has a 3xx status code
func (o *PasswordResetUpdateDefault) IsRedirect() bool {
	return o._statusCode/100 == 3
}

// IsClientError returns true when this password reset update default response has a 4xx status code
func (o *PasswordResetUpdateDefault) IsClientError() bool {
	return o._statusCode/100 == 4
}

// IsServerError returns true when this password reset update default response has a 5xx status code
func (o *PasswordResetUpdateDefault) IsServerError() bool {
	return o._statusCode/100 == 5
}

// IsCode returns true when this password reset update default response a status code equal to that given
func (o *PasswordResetUpdateDefault) IsCode(code int) bool {
	return o._statusCode == code
}

// Code gets the status code for the password reset update default response
func (o *PasswordResetUpdateDefault) Code() int {
	return o._statusCode
}

func (o *PasswordResetUpdateDefault) Error() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdate default %s", o._statusCode, payload)
}

func (o *PasswordResetUpdateDefault) String() string {
	payload, _ := json.Marshal(o.Payload)
	return fmt.Sprintf("[PUT /user/reset_password][%d] passwordResetUpdate default %s", o._statusCode, payload)
}

func (o *PasswordResetUpdateDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *PasswordResetUpdateDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// hydrates response header Content-Length
	hdrContentLength := response.GetHeader("Content-Length")

	if hdrContentLength != "" {
		valcontentLength, err := swag.ConvertUint64(hdrContentLength)
		if err != nil {
			return errors.InvalidType("Content-Length", "header", "uint64", hdrContentLength)
		}
		o.ContentLength = valcontentLength
	}

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
