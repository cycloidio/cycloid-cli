// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/cycloid-cli/client/models"
)

// SignUpAWSMarketplaceReader is a Reader for the SignUpAWSMarketplace structure.
type SignUpAWSMarketplaceReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignUpAWSMarketplaceReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSignUpAWSMarketplaceNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 411:
		result := NewSignUpAWSMarketplaceLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSignUpAWSMarketplaceUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSignUpAWSMarketplaceDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSignUpAWSMarketplaceNoContent creates a SignUpAWSMarketplaceNoContent with default headers values
func NewSignUpAWSMarketplaceNoContent() *SignUpAWSMarketplaceNoContent {
	return &SignUpAWSMarketplaceNoContent{}
}

/*SignUpAWSMarketplaceNoContent handles this case with default header values.

Account created. The account MUST be verified through the link sent to the email address.
*/
type SignUpAWSMarketplaceNoContent struct {
}

func (o *SignUpAWSMarketplaceNoContent) Error() string {
	return fmt.Sprintf("[POST /user/aws_marketplace][%d] signUpAWSMarketplaceNoContent ", 204)
}

func (o *SignUpAWSMarketplaceNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignUpAWSMarketplaceLengthRequired creates a SignUpAWSMarketplaceLengthRequired with default headers values
func NewSignUpAWSMarketplaceLengthRequired() *SignUpAWSMarketplaceLengthRequired {
	return &SignUpAWSMarketplaceLengthRequired{}
}

/*SignUpAWSMarketplaceLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type SignUpAWSMarketplaceLengthRequired struct {
}

func (o *SignUpAWSMarketplaceLengthRequired) Error() string {
	return fmt.Sprintf("[POST /user/aws_marketplace][%d] signUpAWSMarketplaceLengthRequired ", 411)
}

func (o *SignUpAWSMarketplaceLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignUpAWSMarketplaceUnprocessableEntity creates a SignUpAWSMarketplaceUnprocessableEntity with default headers values
func NewSignUpAWSMarketplaceUnprocessableEntity() *SignUpAWSMarketplaceUnprocessableEntity {
	return &SignUpAWSMarketplaceUnprocessableEntity{}
}

/*SignUpAWSMarketplaceUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type SignUpAWSMarketplaceUnprocessableEntity struct {
	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

func (o *SignUpAWSMarketplaceUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /user/aws_marketplace][%d] signUpAWSMarketplaceUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SignUpAWSMarketplaceUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SignUpAWSMarketplaceUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpAWSMarketplaceDefault creates a SignUpAWSMarketplaceDefault with default headers values
func NewSignUpAWSMarketplaceDefault(code int) *SignUpAWSMarketplaceDefault {
	return &SignUpAWSMarketplaceDefault{
		_statusCode: code,
	}
}

/*SignUpAWSMarketplaceDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type SignUpAWSMarketplaceDefault struct {
	_statusCode int

	/*The length of the response body in octets (8-bit bytes).
	 */
	ContentLength uint64

	Payload *models.ErrorPayload
}

// Code gets the status code for the sign up a w s marketplace default response
func (o *SignUpAWSMarketplaceDefault) Code() int {
	return o._statusCode
}

func (o *SignUpAWSMarketplaceDefault) Error() string {
	return fmt.Sprintf("[POST /user/aws_marketplace][%d] signUpAWSMarketplace default  %+v", o._statusCode, o.Payload)
}

func (o *SignUpAWSMarketplaceDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SignUpAWSMarketplaceDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	// response header Content-Length
	contentLength, err := swag.ConvertUint64(response.GetHeader("Content-Length"))
	if err != nil {
		return errors.InvalidType("Content-Length", "header", "uint64", response.GetHeader("Content-Length"))
	}
	o.ContentLength = contentLength

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
