// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"fmt"
	"io"

	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"

	models "github.com/cycloidio/youdeploy-cli/client/models"
)

// SignUpReader is a Reader for the SignUp structure.
type SignUpReader struct {
	formats strfmt.Registry
}

// ReadResponse reads a server response into the received o.
func (o *SignUpReader) ReadResponse(response runtime.ClientResponse, consumer runtime.Consumer) (interface{}, error) {
	switch response.Code() {
	case 204:
		result := NewSignUpNoContent()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return result, nil
	case 411:
		result := NewSignUpLengthRequired()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	case 422:
		result := NewSignUpUnprocessableEntity()
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		return nil, result
	default:
		result := NewSignUpDefault(response.Code())
		if err := result.readResponse(response, consumer, o.formats); err != nil {
			return nil, err
		}
		if response.Code()/100 == 2 {
			return result, nil
		}
		return nil, result
	}
}

// NewSignUpNoContent creates a SignUpNoContent with default headers values
func NewSignUpNoContent() *SignUpNoContent {
	return &SignUpNoContent{}
}

/*SignUpNoContent handles this case with default header values.

Account created. The account MUST be verified through the link sent to the email address.
*/
type SignUpNoContent struct {
}

func (o *SignUpNoContent) Error() string {
	return fmt.Sprintf("[POST /user][%d] signUpNoContent ", 204)
}

func (o *SignUpNoContent) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignUpLengthRequired creates a SignUpLengthRequired with default headers values
func NewSignUpLengthRequired() *SignUpLengthRequired {
	return &SignUpLengthRequired{}
}

/*SignUpLengthRequired handles this case with default header values.

The request has a body but it doesn't have a Content-Length header.
*/
type SignUpLengthRequired struct {
}

func (o *SignUpLengthRequired) Error() string {
	return fmt.Sprintf("[POST /user][%d] signUpLengthRequired ", 411)
}

func (o *SignUpLengthRequired) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	return nil
}

// NewSignUpUnprocessableEntity creates a SignUpUnprocessableEntity with default headers values
func NewSignUpUnprocessableEntity() *SignUpUnprocessableEntity {
	return &SignUpUnprocessableEntity{}
}

/*SignUpUnprocessableEntity handles this case with default header values.

All the custom errors that are generated from the Cycloid API
*/
type SignUpUnprocessableEntity struct {
	Payload *models.ErrorPayload
}

func (o *SignUpUnprocessableEntity) Error() string {
	return fmt.Sprintf("[POST /user][%d] signUpUnprocessableEntity  %+v", 422, o.Payload)
}

func (o *SignUpUnprocessableEntity) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SignUpUnprocessableEntity) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}

// NewSignUpDefault creates a SignUpDefault with default headers values
func NewSignUpDefault(code int) *SignUpDefault {
	return &SignUpDefault{
		_statusCode: code,
	}
}

/*SignUpDefault handles this case with default header values.

The response sent when an unexpected error happened, as known as an internal server error.
*/
type SignUpDefault struct {
	_statusCode int

	Payload *models.ErrorPayload
}

// Code gets the status code for the sign up default response
func (o *SignUpDefault) Code() int {
	return o._statusCode
}

func (o *SignUpDefault) Error() string {
	return fmt.Sprintf("[POST /user][%d] signUp default  %+v", o._statusCode, o.Payload)
}

func (o *SignUpDefault) GetPayload() *models.ErrorPayload {
	return o.Payload
}

func (o *SignUpDefault) readResponse(response runtime.ClientResponse, consumer runtime.Consumer, formats strfmt.Registry) error {

	o.Payload = new(models.ErrorPayload)

	// response payload
	if err := consumer.Consume(response.Body(), o.Payload); err != nil && err != io.EOF {
		return err
	}

	return nil
}
