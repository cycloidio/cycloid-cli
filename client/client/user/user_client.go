// Code generated by go-swagger; DO NOT EDIT.

package user

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"
	httptransport "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/strfmt"
)

// New creates a new user API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) ClientService {
	return &Client{transport: transport, formats: formats}
}

// New creates a new user API client with basic auth credentials.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - user: user for basic authentication header.
// - password: password for basic authentication header.
func NewClientWithBasicAuth(host, basePath, scheme, user, password string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BasicAuth(user, password)
	return &Client{transport: transport, formats: strfmt.Default}
}

// New creates a new user API client with a bearer token for authentication.
// It takes the following parameters:
// - host: http host (github.com).
// - basePath: any base path for the API client ("/v1", "/v3").
// - scheme: http scheme ("http", "https").
// - bearerToken: bearer token for Bearer authentication header.
func NewClientWithBearerToken(host, basePath, scheme, bearerToken string) ClientService {
	transport := httptransport.New(host, basePath, []string{scheme})
	transport.DefaultAuthentication = httptransport.BearerToken(bearerToken)
	return &Client{transport: transport, formats: strfmt.Default}
}

/*
Client for user API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

// ClientOption may be used to customize the behavior of Client methods.
type ClientOption func(*runtime.ClientOperation)

// This client is generated with a few options you might find useful for your swagger spec.
//
// Feel free to add you own set of options.

// WithContentType allows the client to force the Content-Type header
// to negotiate a specific Consumer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithContentType(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ConsumesMediaTypes = []string{mime}
	}
}

// WithContentTypeApplicationJSON sets the Content-Type header to "application/json".
func WithContentTypeApplicationJSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/json"}
}

// WithContentTypeApplicationVndCycloidIoV1JSON sets the Content-Type header to "application/vnd.cycloid.io.v1+json".
func WithContentTypeApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// WithContentTypeApplicationxWwwFormUrlencoded sets the Content-Type header to "application/x-www-form-urlencoded".
func WithContentTypeApplicationxWwwFormUrlencoded(r *runtime.ClientOperation) {
	r.ConsumesMediaTypes = []string{"application/x-www-form-urlencoded"}
}

// WithAccept allows the client to force the Accept header
// to negotiate a specific Producer from the server.
//
// You may use this option to set arbitrary extensions to your MIME media type.
func WithAccept(mime string) ClientOption {
	return func(r *runtime.ClientOperation) {
		r.ProducesMediaTypes = []string{mime}
	}
}

// WithAcceptApplicationJSON sets the Accept header to "application/json".
func WithAcceptApplicationJSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/json"}
}

// WithAcceptApplicationVndCycloidIoV1JSON sets the Accept header to "application/vnd.cycloid.io.v1+json".
func WithAcceptApplicationVndCycloidIoV1JSON(r *runtime.ClientOperation) {
	r.ProducesMediaTypes = []string{"application/vnd.cycloid.io.v1+json"}
}

// ClientService is the interface for Client methods
type ClientService interface {
	CreateOAuthUser(params *CreateOAuthUserParams, opts ...ClientOption) (*CreateOAuthUserOK, error)

	CreateWatchRule(params *CreateWatchRuleParams, opts ...ClientOption) (*CreateWatchRuleOK, error)

	DeleteAllNotifications(params *DeleteAllNotificationsParams, opts ...ClientOption) (*DeleteAllNotificationsNoContent, error)

	DeleteNotification(params *DeleteNotificationParams, opts ...ClientOption) (*DeleteNotificationNoContent, error)

	DeleteUserAccount(params *DeleteUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserAccountNoContent, error)

	DeleteWatchRule(params *DeleteWatchRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWatchRuleOK, error)

	EmailAuthenticationVerification(params *EmailAuthenticationVerificationParams, opts ...ClientOption) (*EmailAuthenticationVerificationOK, error)

	EmailVerification(params *EmailVerificationParams, opts ...ClientOption) (*EmailVerificationNoContent, error)

	EmailVerificationResend(params *EmailVerificationResendParams, opts ...ClientOption) (*EmailVerificationResendNoContent, error)

	GetNotification(params *GetNotificationParams, opts ...ClientOption) (*GetNotificationOK, error)

	GetNotificationSettings(params *GetNotificationSettingsParams, opts ...ClientOption) (*GetNotificationSettingsOK, error)

	GetOAuthUser(params *GetOAuthUserParams, opts ...ClientOption) (*GetOAuthUserOK, error)

	GetUserAccount(params *GetUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAccountOK, error)

	GetWatchRule(params *GetWatchRuleParams, opts ...ClientOption) (*GetWatchRuleOK, error)

	HandleAWSMarketplaceUserEntitlement(params *HandleAWSMarketplaceUserEntitlementParams, opts ...ClientOption) error

	ListNotifications(params *ListNotificationsParams, opts ...ClientOption) (*ListNotificationsOK, error)

	ListWatchRules(params *ListWatchRulesParams, opts ...ClientOption) (*ListWatchRulesOK, error)

	Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error)

	LoginToOrg(params *LoginToOrgParams, opts ...ClientOption) (*LoginToOrgOK, error)

	MarkAllNotificationAsRead(params *MarkAllNotificationAsReadParams, opts ...ClientOption) (*MarkAllNotificationAsReadOK, error)

	MarkNotificationAsRead(params *MarkNotificationAsReadParams, opts ...ClientOption) (*MarkNotificationAsReadOK, error)

	MarkNotificationAsUnread(params *MarkNotificationAsUnreadParams, opts ...ClientOption) (*MarkNotificationAsUnreadOK, error)

	PasswordResetReq(params *PasswordResetReqParams, opts ...ClientOption) (*PasswordResetReqNoContent, error)

	PasswordResetUpdate(params *PasswordResetUpdateParams, opts ...ClientOption) (*PasswordResetUpdateNoContent, error)

	RefreshToken(params *RefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshTokenOK, error)

	SignUp(params *SignUpParams, opts ...ClientOption) (*SignUpNoContent, error)

	SignUpAWSMarketplace(params *SignUpAWSMarketplaceParams, opts ...ClientOption) (*SignUpAWSMarketplaceNoContent, error)

	UpdateNotificationSettings(params *UpdateNotificationSettingsParams, opts ...ClientOption) (*UpdateNotificationSettingsNoContent, error)

	UpdateUserAccount(params *UpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAccountOK, error)

	UpdateUserGuide(params *UpdateUserGuideParams, opts ...ClientOption) (*UpdateUserGuideNoContent, error)

	UpdateWatchRule(params *UpdateWatchRuleParams, opts ...ClientOption) (*UpdateWatchRuleOK, error)

	SetTransport(transport runtime.ClientTransport)
}

/*
CreateOAuthUser Create a user from the OAuth 'social_type'
*/
func (a *Client) CreateOAuthUser(params *CreateOAuthUserParams, opts ...ClientOption) (*CreateOAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateOAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createOAuthUser",
		Method:             "POST",
		PathPattern:        "/user/{social_type}/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateOAuthUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateOAuthUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateOAuthUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
CreateWatchRule Create a new watch rule for the user.
*/
func (a *Client) CreateWatchRule(params *CreateWatchRuleParams, opts ...ClientOption) (*CreateWatchRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewCreateWatchRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "createWatchRule",
		Method:             "POST",
		PathPattern:        "/user/watch_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &CreateWatchRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*CreateWatchRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*CreateWatchRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteAllNotifications Delete all the notifications for the user at once.
*/
func (a *Client) DeleteAllNotifications(params *DeleteAllNotificationsParams, opts ...ClientOption) (*DeleteAllNotificationsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteAllNotificationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteAllNotifications",
		Method:             "DELETE",
		PathPattern:        "/user/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteAllNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteAllNotificationsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteAllNotificationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteNotification Delete the notification for the user.
*/
func (a *Client) DeleteNotification(params *DeleteNotificationParams, opts ...ClientOption) (*DeleteNotificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteNotification",
		Method:             "DELETE",
		PathPattern:        "/user/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteNotificationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteNotificationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteUserAccount The authenticated user delete itself from the system.
*/
func (a *Client) DeleteUserAccount(params *DeleteUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteUserAccountNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteUserAccount",
		Method:             "DELETE",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteUserAccountNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteUserAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
DeleteWatchRule Delete the watch rule for the user.
*/
func (a *Client) DeleteWatchRule(params *DeleteWatchRuleParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*DeleteWatchRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewDeleteWatchRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "deleteWatchRule",
		Method:             "DELETE",
		PathPattern:        "/user/watch_rules/{watch_rule_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &DeleteWatchRuleReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*DeleteWatchRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*DeleteWatchRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailAuthenticationVerification Verify that the email address is own by the user.
*/
func (a *Client) EmailAuthenticationVerification(params *EmailAuthenticationVerificationParams, opts ...ClientOption) (*EmailAuthenticationVerificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailAuthenticationVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "emailAuthenticationVerification",
		Method:             "PUT",
		PathPattern:        "/user/email/authentication/{authentication_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailAuthenticationVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailAuthenticationVerificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailAuthenticationVerificationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailVerification Verify that the email address is own by the user.
*/
func (a *Client) EmailVerification(params *EmailVerificationParams, opts ...ClientOption) (*EmailVerificationNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailVerificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "emailVerification",
		Method:             "PUT",
		PathPattern:        "/user/email/verification/{verification_token}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailVerificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailVerificationNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailVerificationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
EmailVerificationResend Re-send the verification user's email to the indicated address.
*/
func (a *Client) EmailVerificationResend(params *EmailVerificationResendParams, opts ...ClientOption) (*EmailVerificationResendNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewEmailVerificationResendParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "emailVerificationResend",
		Method:             "POST",
		PathPattern:        "/user/email/verification",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &EmailVerificationResendReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*EmailVerificationResendNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*EmailVerificationResendDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNotification Get the notification for the user.
*/
func (a *Client) GetNotification(params *GetNotificationParams, opts ...ClientOption) (*GetNotificationOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNotification",
		Method:             "GET",
		PathPattern:        "/user/notifications/{notification_id}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNotificationReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNotificationDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetNotificationSettings Get the notification settings for the user.
*/
func (a *Client) GetNotificationSettings(params *GetNotificationSettingsParams, opts ...ClientOption) (*GetNotificationSettingsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetNotificationSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getNotificationSettings",
		Method:             "GET",
		PathPattern:        "/user/notification_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetNotificationSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetNotificationSettingsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetNotificationSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetOAuthUser Used to know if a user from the platform exists on that 'social_type'. If it exists we'll return the JWT 'token', if it does not we'll return the data of that user on the 'user' so it can be confirmed and created
*/
func (a *Client) GetOAuthUser(params *GetOAuthUserParams, opts ...ClientOption) (*GetOAuthUserOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetOAuthUserParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getOAuthUser",
		Method:             "GET",
		PathPattern:        "/user/{social_type}/oauth",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetOAuthUserReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetOAuthUserOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetOAuthUserDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetUserAccount Get the information of the account of the authenticated user.
*/
func (a *Client) GetUserAccount(params *GetUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*GetUserAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getUserAccount",
		Method:             "GET",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetUserAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetUserAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
GetWatchRule Get the watch rule for the user.
*/
func (a *Client) GetWatchRule(params *GetWatchRuleParams, opts ...ClientOption) (*GetWatchRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewGetWatchRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "getWatchRule",
		Method:             "GET",
		PathPattern:        "/user/watch_rules/{watch_rule_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &GetWatchRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*GetWatchRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*GetWatchRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
	HandleAWSMarketplaceUserEntitlement This endpoint handles redirections from AWS Marketplace to our system.

If user doesn't exist, he'll be redirected to registration page.
If user exist, he'll be redirected to login page.
*/
func (a *Client) HandleAWSMarketplaceUserEntitlement(params *HandleAWSMarketplaceUserEntitlementParams, opts ...ClientOption) error {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewHandleAWSMarketplaceUserEntitlementParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "handleAWSMarketplaceUserEntitlement",
		Method:             "POST",
		PathPattern:        "/user/aws_marketplace/entitlement",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &HandleAWSMarketplaceUserEntitlementReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	_, err := a.transport.Submit(op)
	if err != nil {
		return err
	}
	return nil
}

/*
ListNotifications List all the notifications for the user.
*/
func (a *Client) ListNotifications(params *ListNotificationsParams, opts ...ClientOption) (*ListNotificationsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListNotificationsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listNotifications",
		Method:             "GET",
		PathPattern:        "/user/notifications",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListNotificationsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListNotificationsOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListNotificationsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
ListWatchRules List all the watch rules for the user.
*/
func (a *Client) ListWatchRules(params *ListWatchRulesParams, opts ...ClientOption) (*ListWatchRulesOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewListWatchRulesParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "listWatchRules",
		Method:             "GET",
		PathPattern:        "/user/watch_rules",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &ListWatchRulesReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*ListWatchRulesOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*ListWatchRulesDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
Login Authenticate a user and return a new JWT token.
*/
func (a *Client) Login(params *LoginParams, opts ...ClientOption) (*LoginOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "login",
		Method:             "POST",
		PathPattern:        "/user/login",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
LoginToOrg Authenticate a user and return a new JWT token.
*/
func (a *Client) LoginToOrg(params *LoginToOrgParams, opts ...ClientOption) (*LoginToOrgOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewLoginToOrgParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "loginToOrg",
		Method:             "POST",
		PathPattern:        "/user/login/{organization_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &LoginToOrgReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*LoginToOrgOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*LoginToOrgDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MarkAllNotificationAsRead Mark the all notification as read for the user.
*/
func (a *Client) MarkAllNotificationAsRead(params *MarkAllNotificationAsReadParams, opts ...ClientOption) (*MarkAllNotificationAsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkAllNotificationAsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markAllNotificationAsRead",
		Method:             "POST",
		PathPattern:        "/user/notifications/read_all",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkAllNotificationAsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkAllNotificationAsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MarkAllNotificationAsReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MarkNotificationAsRead Mark the notification as read for the user.
*/
func (a *Client) MarkNotificationAsRead(params *MarkNotificationAsReadParams, opts ...ClientOption) (*MarkNotificationAsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkNotificationAsReadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markNotificationAsRead",
		Method:             "POST",
		PathPattern:        "/user/notifications/{notification_id}/read",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkNotificationAsReadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkNotificationAsReadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MarkNotificationAsReadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
MarkNotificationAsUnread Mark the notification as unread for the user.
*/
func (a *Client) MarkNotificationAsUnread(params *MarkNotificationAsUnreadParams, opts ...ClientOption) (*MarkNotificationAsUnreadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewMarkNotificationAsUnreadParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "markNotificationAsUnread",
		Method:             "POST",
		PathPattern:        "/user/notifications/{notification_id}/unread",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &MarkNotificationAsUnreadReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*MarkNotificationAsUnreadOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*MarkNotificationAsUnreadDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PasswordResetReq Request to reset the password. Due to security reasons, this endpoint doesn't return Not Found (404) when the email doesn't exist or belongs to a user primary email.
*/
func (a *Client) PasswordResetReq(params *PasswordResetReqParams, opts ...ClientOption) (*PasswordResetReqNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPasswordResetReqParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "passwordResetReq",
		Method:             "POST",
		PathPattern:        "/user/reset_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PasswordResetReqReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PasswordResetReqNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PasswordResetReqDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
PasswordResetUpdate Reset the user password when it has been forgotten. Due to security reasons, the endpoint doesn't return a Unprocessable Entity (422) when the token is invalid. 404 Status code is returned if the user has been deleted of the system between the user password request and this request.
*/
func (a *Client) PasswordResetUpdate(params *PasswordResetUpdateParams, opts ...ClientOption) (*PasswordResetUpdateNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewPasswordResetUpdateParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "passwordResetUpdate",
		Method:             "PUT",
		PathPattern:        "/user/reset_password",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &PasswordResetUpdateReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*PasswordResetUpdateNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*PasswordResetUpdateDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
RefreshToken Refresh the user JWT and returns a new one if the previous is valid. The 'organization_canonical_query' has to be of an organization in which the user belongs to, and the 'child_canonical_query' of a child of the 'organization_canonical_query' in any level (could be of a grand child).
*/
func (a *Client) RefreshToken(params *RefreshTokenParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*RefreshTokenOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewRefreshTokenParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "refreshToken",
		Method:             "GET",
		PathPattern:        "/user/refresh_token",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &RefreshTokenReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*RefreshTokenOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*RefreshTokenDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SignUp Create a new User (sign-up).
*/
func (a *Client) SignUp(params *SignUpParams, opts ...ClientOption) (*SignUpNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignUpParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signUp",
		Method:             "POST",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SignUpReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignUpNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SignUpDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
SignUpAWSMarketplace Create a new AWS Marketplace User.
*/
func (a *Client) SignUpAWSMarketplace(params *SignUpAWSMarketplaceParams, opts ...ClientOption) (*SignUpAWSMarketplaceNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewSignUpAWSMarketplaceParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "signUpAWSMarketplace",
		Method:             "POST",
		PathPattern:        "/user/aws_marketplace",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &SignUpAWSMarketplaceReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*SignUpAWSMarketplaceNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*SignUpAWSMarketplaceDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateNotificationSettings A user's notification settings.
*/
func (a *Client) UpdateNotificationSettings(params *UpdateNotificationSettingsParams, opts ...ClientOption) (*UpdateNotificationSettingsNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateNotificationSettingsParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateNotificationSettings",
		Method:             "POST",
		PathPattern:        "/user/notification_settings",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateNotificationSettingsReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateNotificationSettingsNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateNotificationSettingsDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUserAccount Update the information of the account of the authenticated user.
*/
func (a *Client) UpdateUserAccount(params *UpdateUserAccountParams, authInfo runtime.ClientAuthInfoWriter, opts ...ClientOption) (*UpdateUserAccountOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserAccountParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserAccount",
		Method:             "PUT",
		PathPattern:        "/user",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserAccountReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserAccountOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserAccountDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateUserGuide Update user's guide progress.
*/
func (a *Client) UpdateUserGuide(params *UpdateUserGuideParams, opts ...ClientOption) (*UpdateUserGuideNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateUserGuideParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateUserGuide",
		Method:             "PUT",
		PathPattern:        "/user/guide",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateUserGuideReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateUserGuideNoContent)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateUserGuideDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

/*
UpdateWatchRule Update the watch rule for the user.
*/
func (a *Client) UpdateWatchRule(params *UpdateWatchRuleParams, opts ...ClientOption) (*UpdateWatchRuleOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewUpdateWatchRuleParams()
	}
	op := &runtime.ClientOperation{
		ID:                 "updateWatchRule",
		Method:             "PUT",
		PathPattern:        "/user/watch_rules/{watch_rule_canonical}",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/vnd.cycloid.io.v1+json", "application/x-www-form-urlencoded"},
		Schemes:            []string{"https"},
		Params:             params,
		Reader:             &UpdateWatchRuleReader{formats: a.formats},
		Context:            params.Context,
		Client:             params.HTTPClient,
	}
	for _, opt := range opts {
		opt(op)
	}

	result, err := a.transport.Submit(op)
	if err != nil {
		return nil, err
	}
	success, ok := result.(*UpdateWatchRuleOK)
	if ok {
		return success, nil
	}
	// unexpected success response
	unexpectedSuccess := result.(*UpdateWatchRuleDefault)
	return nil, runtime.NewAPIError("unexpected success response: content available as default response in error", unexpectedSuccess, unexpectedSuccess.Code())
}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
