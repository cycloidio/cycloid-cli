// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// AWSInfrastructureResourcesAggregation AWS Infrastructure Resources Aggregation
// swagger:model AWSInfrastructureResourcesAggregation
type AWSInfrastructureResourcesAggregation struct {

	// buckets
	Buckets *InfrastructureResourcesAggregationItem `json:"buckets,omitempty"`

	// cache clusters
	CacheClusters *InfrastructureResourcesAggregationItem `json:"cache_clusters,omitempty"`

	// db instances
	DbInstances *InfrastructureResourcesAggregationItem `json:"db_instances,omitempty"`

	// images
	Images *InfrastructureResourcesAggregationItem `json:"images,omitempty"`

	// instances
	Instances *InfrastructureResourcesAggregationItem `json:"instances,omitempty"`

	// load balancers v1
	LoadBalancersV1 *InfrastructureResourcesAggregationItem `json:"load_balancers_v1,omitempty"`

	// load balancers v2
	LoadBalancersV2 *InfrastructureResourcesAggregationItem `json:"load_balancers_v2,omitempty"`

	// security groups
	SecurityGroups *InfrastructureResourcesAggregationItem `json:"security_groups,omitempty"`

	// snapshots
	Snapshots *InfrastructureResourcesAggregationItem `json:"snapshots,omitempty"`

	// subnets
	Subnets *InfrastructureResourcesAggregationItem `json:"subnets,omitempty"`

	// volumes
	Volumes *InfrastructureResourcesAggregationItem `json:"volumes,omitempty"`

	// vpcs
	Vpcs *InfrastructureResourcesAggregationItem `json:"vpcs,omitempty"`
}

// Validate validates this a w s infrastructure resources aggregation
func (m *AWSInfrastructureResourcesAggregation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCacheClusters(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDbInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateImages(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInstances(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancersV1(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLoadBalancersV2(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSecurityGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSnapshots(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubnets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVpcs(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateBuckets(formats strfmt.Registry) error {

	if swag.IsZero(m.Buckets) { // not required
		return nil
	}

	if m.Buckets != nil {
		if err := m.Buckets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("buckets")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateCacheClusters(formats strfmt.Registry) error {

	if swag.IsZero(m.CacheClusters) { // not required
		return nil
	}

	if m.CacheClusters != nil {
		if err := m.CacheClusters.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cache_clusters")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateDbInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.DbInstances) { // not required
		return nil
	}

	if m.DbInstances != nil {
		if err := m.DbInstances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("db_instances")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateImages(formats strfmt.Registry) error {

	if swag.IsZero(m.Images) { // not required
		return nil
	}

	if m.Images != nil {
		if err := m.Images.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("images")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateInstances(formats strfmt.Registry) error {

	if swag.IsZero(m.Instances) { // not required
		return nil
	}

	if m.Instances != nil {
		if err := m.Instances.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("instances")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateLoadBalancersV1(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadBalancersV1) { // not required
		return nil
	}

	if m.LoadBalancersV1 != nil {
		if err := m.LoadBalancersV1.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load_balancers_v1")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateLoadBalancersV2(formats strfmt.Registry) error {

	if swag.IsZero(m.LoadBalancersV2) { // not required
		return nil
	}

	if m.LoadBalancersV2 != nil {
		if err := m.LoadBalancersV2.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("load_balancers_v2")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateSecurityGroups(formats strfmt.Registry) error {

	if swag.IsZero(m.SecurityGroups) { // not required
		return nil
	}

	if m.SecurityGroups != nil {
		if err := m.SecurityGroups.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("security_groups")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateSnapshots(formats strfmt.Registry) error {

	if swag.IsZero(m.Snapshots) { // not required
		return nil
	}

	if m.Snapshots != nil {
		if err := m.Snapshots.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("snapshots")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateSubnets(formats strfmt.Registry) error {

	if swag.IsZero(m.Subnets) { // not required
		return nil
	}

	if m.Subnets != nil {
		if err := m.Subnets.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subnets")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateVolumes(formats strfmt.Registry) error {

	if swag.IsZero(m.Volumes) { // not required
		return nil
	}

	if m.Volumes != nil {
		if err := m.Volumes.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("volumes")
			}
			return err
		}
	}

	return nil
}

func (m *AWSInfrastructureResourcesAggregation) validateVpcs(formats strfmt.Registry) error {

	if swag.IsZero(m.Vpcs) { // not required
		return nil
	}

	if m.Vpcs != nil {
		if err := m.Vpcs.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vpcs")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AWSInfrastructureResourcesAggregation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AWSInfrastructureResourcesAggregation) UnmarshalBinary(b []byte) error {
	var res AWSInfrastructureResourcesAggregation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
