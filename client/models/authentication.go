// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// Authentication AuthenticationWrapper
//
// swagger:model Authentication
type Authentication struct {
	configField AuthenticationConfig
}

// Config gets the config of this base type
func (m *Authentication) Config() AuthenticationConfig {
	return m.configField
}

// SetConfig sets the config of this base type
func (m *Authentication) SetConfig(val AuthenticationConfig) {
	m.configField = val
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *Authentication) UnmarshalJSON(raw []byte) error {
	var data struct {
		Config json.RawMessage `json:"config,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var propConfig AuthenticationConfig
	if string(data.Config) != "null" {
		config, err := UnmarshalAuthenticationConfig(bytes.NewBuffer(data.Config), runtime.JSONConsumer())
		if err != nil && err != io.EOF {
			return err
		}
		propConfig = config
	}

	var result Authentication

	// config
	result.configField = propConfig

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m Authentication) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {
	}{})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Config AuthenticationConfig `json:"config,omitempty"`
	}{

		Config: m.configField,
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this authentication
func (m *Authentication) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authentication) validateConfig(formats strfmt.Registry) error {
	if swag.IsZero(m.Config()) { // not required
		return nil
	}

	if err := m.Config().Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("config")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("config")
		}
		return err
	}

	return nil
}

// ContextValidate validate this authentication based on the context it is used
func (m *Authentication) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateConfig(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Authentication) contextValidateConfig(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Config()) { // not required
		return nil
	}

	if err := m.Config().ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("config")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("config")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Authentication) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Authentication) UnmarshalBinary(b []byte) error {
	var res Authentication
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
