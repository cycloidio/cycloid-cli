// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"
	"io"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/validate"
)

// AuthenticationConfig AuthenticationConfig
//
// swagger:discriminator AuthenticationConfig type
type AuthenticationConfig interface {
	runtime.Validatable
	runtime.ContextValidatable

	// Whether the authentication is enabled
	// Required: true
	Enabled() *bool
	SetEnabled(*bool)

	// type
	// Required: true
	Type() string
	SetType(string)

	// AdditionalProperties in base type shoud be handled just like regular properties
	// At this moment, the base type property is pushed down to the subtype
}

type authenticationConfig struct {
	enabledField *bool

	typeField string
}

// Enabled gets the enabled of this polymorphic type
func (m *authenticationConfig) Enabled() *bool {
	return m.enabledField
}

// SetEnabled sets the enabled of this polymorphic type
func (m *authenticationConfig) SetEnabled(val *bool) {
	m.enabledField = val
}

// Type gets the type of this polymorphic type
func (m *authenticationConfig) Type() string {
	return "AuthenticationConfig"
}

// SetType sets the type of this polymorphic type
func (m *authenticationConfig) SetType(val string) {
}

// UnmarshalAuthenticationConfigSlice unmarshals polymorphic slices of AuthenticationConfig
func UnmarshalAuthenticationConfigSlice(reader io.Reader, consumer runtime.Consumer) ([]AuthenticationConfig, error) {
	var elements []json.RawMessage
	if err := consumer.Consume(reader, &elements); err != nil {
		return nil, err
	}

	var result []AuthenticationConfig
	for _, element := range elements {
		obj, err := unmarshalAuthenticationConfig(element, consumer)
		if err != nil {
			return nil, err
		}
		result = append(result, obj)
	}
	return result, nil
}

// UnmarshalAuthenticationConfig unmarshals polymorphic AuthenticationConfig
func UnmarshalAuthenticationConfig(reader io.Reader, consumer runtime.Consumer) (AuthenticationConfig, error) {
	// we need to read this twice, so first into a buffer
	data, err := io.ReadAll(reader)
	if err != nil {
		return nil, err
	}
	return unmarshalAuthenticationConfig(data, consumer)
}

func unmarshalAuthenticationConfig(data []byte, consumer runtime.Consumer) (AuthenticationConfig, error) {
	buf := bytes.NewBuffer(data)
	buf2 := bytes.NewBuffer(data)

	// the first time this is read is to fetch the value of the type property.
	var getType struct {
		Type string `json:"type"`
	}
	if err := consumer.Consume(buf, &getType); err != nil {
		return nil, err
	}

	if err := validate.RequiredString("type", "body", getType.Type); err != nil {
		return nil, err
	}

	// The value of type is used to determine which type to create and unmarshal the data into
	switch getType.Type {
	case "AuthenticationAzureAD":
		var result AuthenticationAzureAD
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AuthenticationConfig":
		var result authenticationConfig
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AuthenticationGitHub":
		var result AuthenticationGitHub
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AuthenticationGoogle":
		var result AuthenticationGoogle
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AuthenticationLocal":
		var result AuthenticationLocal
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	case "AuthenticationSAML":
		var result AuthenticationSAML
		if err := consumer.Consume(buf2, &result); err != nil {
			return nil, err
		}
		return &result, nil
	}
	return nil, errors.New(422, "invalid type value: %q", getType.Type)
}

// Validate validates this authentication config
func (m *authenticationConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *authenticationConfig) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled()); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this authentication config based on context it is used
func (m *authenticationConfig) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}
