// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureADAuthConfig AppConfigAzureADOAuth
//
// AzureAD OAuth configuration
// swagger:model AzureADAuthConfig
type AzureADAuthConfig struct {
	clientIdField *string

	providerField *string

	// ID of the OAuth tenant.
	// Required: true
	TenantID *string `json:"tenant_id"`
}

// ClientID gets the client id of this subtype
func (m *AzureADAuthConfig) ClientID() *string {
	return m.clientIdField
}

// SetClientID sets the client id of this subtype
func (m *AzureADAuthConfig) SetClientID(val *string) {
	m.clientIdField = val
}

// Provider gets the provider of this subtype
func (m *AzureADAuthConfig) Provider() *string {
	return m.providerField
}

// SetProvider sets the provider of this subtype
func (m *AzureADAuthConfig) SetProvider(val *string) {
	m.providerField = val
}

// Type gets the type of this subtype
func (m *AzureADAuthConfig) Type() string {
	return "AzureADAuthConfig"
}

// SetType sets the type of this subtype
func (m *AzureADAuthConfig) SetType(val string) {

}

// TenantID gets the tenant id of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AzureADAuthConfig) UnmarshalJSON(raw []byte) error {
	var data struct {

		// ID of the OAuth tenant.
		// Required: true
		TenantID *string `json:"tenant_id"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		ClientID *string `json:"client_id"`

		Provider *string `json:"provider"`

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AzureADAuthConfig

	result.clientIdField = base.ClientID

	result.providerField = base.Provider

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.TenantID = data.TenantID

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AzureADAuthConfig) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// ID of the OAuth tenant.
		// Required: true
		TenantID *string `json:"tenant_id"`
	}{

		TenantID: m.TenantID,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		ClientID *string `json:"client_id"`

		Provider *string `json:"provider"`

		Type string `json:"type"`
	}{

		ClientID: m.ClientID(),

		Provider: m.Provider(),

		Type: m.Type(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this azure a d auth config
func (m *AzureADAuthConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateClientID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTenantID(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureADAuthConfig) validateClientID(formats strfmt.Registry) error {

	if err := validate.Required("client_id", "body", m.ClientID()); err != nil {
		return err
	}

	return nil
}

func (m *AzureADAuthConfig) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider()); err != nil {
		return err
	}

	return nil
}

func (m *AzureADAuthConfig) validateTenantID(formats strfmt.Registry) error {

	if err := validate.Required("tenant_id", "body", m.TenantID); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureADAuthConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureADAuthConfig) UnmarshalBinary(b []byte) error {
	var res AzureADAuthConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
