// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AzureStorage Representation of azure remote tf state for external backend.
// Must be matched with a credential of the "azure_storage" type.
//
// swagger:model AzureStorage
type AzureStorage struct {

	// The Azure blob contained in the container, will be
	// required if the EB is not default
	//
	Blob string `json:"blob,omitempty"`

	// The Azure container where the resource exists
	//
	// Required: true
	Container *string `json:"container"`

	// A custom endpoint for the Azure API
	// (default: "https://{account_name}.blob.core.windows.net/", where
	// the "account_name" is the one from the credential)
	//
	Endpoint string `json:"endpoint,omitempty"`
}

// Engine gets the engine of this subtype
func (m *AzureStorage) Engine() string {
	return "AzureStorage"
}

// SetEngine sets the engine of this subtype
func (m *AzureStorage) SetEngine(val string) {

}

// Blob gets the blob of this subtype

// Container gets the container of this subtype

// Endpoint gets the endpoint of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *AzureStorage) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The Azure blob contained in the container, will be
		// required if the EB is not default
		//
		Blob string `json:"blob,omitempty"`

		// The Azure container where the resource exists
		//
		// Required: true
		Container *string `json:"container"`

		// A custom endpoint for the Azure API
		// (default: "https://{account_name}.blob.core.windows.net/", where
		// the "account_name" is the one from the credential)
		//
		Endpoint string `json:"endpoint,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Engine string `json:"engine"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result AzureStorage

	if base.Engine != result.Engine() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid engine value: %q", base.Engine)
	}

	result.Blob = data.Blob

	result.Container = data.Container

	result.Endpoint = data.Endpoint

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m AzureStorage) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The Azure blob contained in the container, will be
		// required if the EB is not default
		//
		Blob string `json:"blob,omitempty"`

		// The Azure container where the resource exists
		//
		// Required: true
		Container *string `json:"container"`

		// A custom endpoint for the Azure API
		// (default: "https://{account_name}.blob.core.windows.net/", where
		// the "account_name" is the one from the credential)
		//
		Endpoint string `json:"endpoint,omitempty"`
	}{

		Blob: m.Blob,

		Container: m.Container,

		Endpoint: m.Endpoint,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Engine string `json:"engine"`
	}{

		Engine: m.Engine(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this azure storage
func (m *AzureStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateContainer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AzureStorage) validateContainer(formats strfmt.Registry) error {

	if err := validate.Required("container", "body", m.Container); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AzureStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AzureStorage) UnmarshalBinary(b []byte) error {
	var res AzureStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
