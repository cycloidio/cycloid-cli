// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CheckReport CheckReport
// swagger:model CheckReport
type CheckReport struct {

	// The name of the service checked.
	// Required: true
	// Min Length: 1
	Canonical *string `json:"canonical"`

	// The category of the service checked.
	// Required: true
	// Min Length: 1
	Category *string `json:"category"`

	// The message providing information regarding the state of the service.
	// Required: true
	// Min Length: 1
	Message *string `json:"message"`

	// The status of the service checked.
	// Required: true
	// Enum: [Unknown Success Error]
	Status *string `json:"status"`
}

// Validate validates this check report
func (m *CheckReport) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCategory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CheckReport) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", string(*m.Canonical), 1); err != nil {
		return err
	}

	return nil
}

func (m *CheckReport) validateCategory(formats strfmt.Registry) error {

	if err := validate.Required("category", "body", m.Category); err != nil {
		return err
	}

	if err := validate.MinLength("category", "body", string(*m.Category), 1); err != nil {
		return err
	}

	return nil
}

func (m *CheckReport) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", string(*m.Message), 1); err != nil {
		return err
	}

	return nil
}

var checkReportTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["Unknown","Success","Error"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		checkReportTypeStatusPropEnum = append(checkReportTypeStatusPropEnum, v)
	}
}

const (

	// CheckReportStatusUnknown captures enum value "Unknown"
	CheckReportStatusUnknown string = "Unknown"

	// CheckReportStatusSuccess captures enum value "Success"
	CheckReportStatusSuccess string = "Success"

	// CheckReportStatusError captures enum value "Error"
	CheckReportStatusError string = "Error"
)

// prop value enum
func (m *CheckReport) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, checkReportTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CheckReport) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CheckReport) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CheckReport) UnmarshalBinary(b []byte) error {
	var res CheckReport
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
