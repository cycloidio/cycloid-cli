// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudCostManagementProjectsDashboard CloudCostManagementProjectsDashboard
//
// The projects dashboard of the Cloud Cost Management, it contains
// - a histogram of the cost aggregated by date and project
// - a histogram of cost aggregated by projects and providers
//
// swagger:model CloudCostManagementProjectsDashboard
type CloudCostManagementProjectsDashboard struct {

	// project providers
	// Required: true
	ProjectProviders *CloudCostManagementHistogram `json:"project_providers"`

	// projects
	// Required: true
	Projects *CloudCostManagementHistogram `json:"projects"`
}

// Validate validates this cloud cost management projects dashboard
func (m *CloudCostManagementProjectsDashboard) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateProjectProviders(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProjects(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCostManagementProjectsDashboard) validateProjectProviders(formats strfmt.Registry) error {

	if err := validate.Required("project_providers", "body", m.ProjectProviders); err != nil {
		return err
	}

	if m.ProjectProviders != nil {
		if err := m.ProjectProviders.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_providers")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCostManagementProjectsDashboard) validateProjects(formats strfmt.Registry) error {

	if err := validate.Required("projects", "body", m.Projects); err != nil {
		return err
	}

	if m.Projects != nil {
		if err := m.Projects.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this cloud cost management projects dashboard based on the context it is used
func (m *CloudCostManagementProjectsDashboard) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateProjectProviders(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateProjects(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudCostManagementProjectsDashboard) contextValidateProjectProviders(ctx context.Context, formats strfmt.Registry) error {

	if m.ProjectProviders != nil {

		if err := m.ProjectProviders.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("project_providers")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("project_providers")
			}
			return err
		}
	}

	return nil
}

func (m *CloudCostManagementProjectsDashboard) contextValidateProjects(ctx context.Context, formats strfmt.Registry) error {

	if m.Projects != nil {

		if err := m.Projects.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("projects")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("projects")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CloudCostManagementProjectsDashboard) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudCostManagementProjectsDashboard) UnmarshalBinary(b []byte) error {
	var res CloudCostManagementProjectsDashboard
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
