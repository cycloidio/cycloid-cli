// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CloudProviderVMWareVSphereConfiguration Representation of VMware vSphere configuration
//
// swagger:model CloudProviderVMWareVSphereConfiguration
type CloudProviderVMWareVSphereConfiguration struct {

	// Used to disable verification of server's SSL certificate.
	//
	// Required: true
	AllowUnverifiedSsl *bool `json:"allow_unverified_ssl"`

	// This is the vCenter Server FQDN or IP Address for vSphere API operations
	//
	// Required: true
	Server *string `json:"server"`
}

// Type gets the type of this subtype
func (m *CloudProviderVMWareVSphereConfiguration) Type() string {
	return "CloudProviderVMWareVSphereConfiguration"
}

// SetType sets the type of this subtype
func (m *CloudProviderVMWareVSphereConfiguration) SetType(val string) {
}

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *CloudProviderVMWareVSphereConfiguration) UnmarshalJSON(raw []byte) error {
	var data struct {

		// Used to disable verification of server's SSL certificate.
		//
		// Required: true
		AllowUnverifiedSsl *bool `json:"allow_unverified_ssl"`

		// This is the vCenter Server FQDN or IP Address for vSphere API operations
		//
		// Required: true
		Server *string `json:"server"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Type string `json:"type"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result CloudProviderVMWareVSphereConfiguration

	if base.Type != result.Type() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid type value: %q", base.Type)
	}

	result.AllowUnverifiedSsl = data.AllowUnverifiedSsl
	result.Server = data.Server

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m CloudProviderVMWareVSphereConfiguration) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// Used to disable verification of server's SSL certificate.
		//
		// Required: true
		AllowUnverifiedSsl *bool `json:"allow_unverified_ssl"`

		// This is the vCenter Server FQDN or IP Address for vSphere API operations
		//
		// Required: true
		Server *string `json:"server"`
	}{

		AllowUnverifiedSsl: m.AllowUnverifiedSsl,

		Server: m.Server,
	})
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Type string `json:"type"`
	}{

		Type: m.Type(),
	})
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this cloud provider VM ware v sphere configuration
func (m *CloudProviderVMWareVSphereConfiguration) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAllowUnverifiedSsl(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServer(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CloudProviderVMWareVSphereConfiguration) validateAllowUnverifiedSsl(formats strfmt.Registry) error {

	if err := validate.Required("allow_unverified_ssl", "body", m.AllowUnverifiedSsl); err != nil {
		return err
	}

	return nil
}

func (m *CloudProviderVMWareVSphereConfiguration) validateServer(formats strfmt.Registry) error {

	if err := validate.Required("server", "body", m.Server); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this cloud provider VM ware v sphere configuration based on the context it is used
func (m *CloudProviderVMWareVSphereConfiguration) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *CloudProviderVMWareVSphereConfiguration) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CloudProviderVMWareVSphereConfiguration) UnmarshalBinary(b []byte) error {
	var res CloudProviderVMWareVSphereConfiguration
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
