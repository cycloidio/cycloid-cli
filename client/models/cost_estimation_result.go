// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostEstimationResult CostEstimationResult
//
// The result of cost estimation.
// swagger:model CostEstimationResult
type CostEstimationResult struct {

	// Planned monhtly cost of the plan in decimal form.
	PlannedCost string `json:"planned_cost,omitempty"`

	// Planned hourly cost of the plan in decimal form.
	PlannedHourlyCost string `json:"planned_hourly_cost,omitempty"`

	// Prior monthly cost of the plan in decimal form.
	PriorCost string `json:"prior_cost,omitempty"`

	// Prior hourly cost of the plan in decimal form.
	PriorHourlyCost string `json:"prior_hourly_cost,omitempty"`

	// resource estimates
	// Required: true
	ResourceEstimates []*CostEstimationResourceEstimate `json:"resource_estimates"`

	// A list of addresses of resources that were skipped from the estimation process. A resource might be skipped
	// due to being invalid or unsupported by Terracost.
	//
	SkippedResourceAddresses []string `json:"skipped_resource_addresses"`
}

// Validate validates this cost estimation result
func (m *CostEstimationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateResourceEstimates(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostEstimationResult) validateResourceEstimates(formats strfmt.Registry) error {

	if err := validate.Required("resource_estimates", "body", m.ResourceEstimates); err != nil {
		return err
	}

	for i := 0; i < len(m.ResourceEstimates); i++ {
		if swag.IsZero(m.ResourceEstimates[i]) { // not required
			continue
		}

		if m.ResourceEstimates[i] != nil {
			if err := m.ResourceEstimates[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("resource_estimates" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostEstimationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostEstimationResult) UnmarshalBinary(b []byte) error {
	var res CostEstimationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
