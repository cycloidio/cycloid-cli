// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostExplorerAccount CostExplorerAccount
//
// Object containing Cost Explorer account parameters
// swagger:model CostExplorerAccount
type CostExplorerAccount struct {

	// The ID of an account on the CP
	// Required: true
	AccountID *string `json:"account_id"`

	// canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// cloud provider
	// Required: true
	CloudProvider *CloudProvider `json:"cloud_provider"`

	// created at
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// credential
	Credential *CredentialSimple `json:"credential,omitempty"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// external backend
	ExternalBackend *ExternalBackend `json:"external_backend,omitempty"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// last ingestion ended at
	// Minimum: 0
	LastIngestionEndedAt *uint64 `json:"last_ingestion_ended_at,omitempty"`

	// last ingestion started at
	// Minimum: 0
	LastIngestionStartedAt *uint64 `json:"last_ingestion_started_at,omitempty"`

	// The ID of the parent account on the CP
	ParentAccountID string `json:"parent_account_id,omitempty"`

	// status
	// Required: true
	// Enum: [idle error import]
	Status *string `json:"status"`

	// status message
	StatusMessage string `json:"status_message,omitempty"`

	// updated at
	// Required: true
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at"`
}

// Validate validates this cost explorer account
func (m *CostExplorerAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAccountID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredential(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExternalBackend(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastIngestionEndedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastIngestionStartedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostExplorerAccount) validateAccountID(formats strfmt.Registry) error {

	if err := validate.Required("account_id", "body", m.AccountID); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", string(*m.Canonical), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", string(*m.Canonical), 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", string(*m.Canonical), `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateCloudProvider(formats strfmt.Registry) error {

	if err := validate.Required("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	if m.CloudProvider != nil {
		if err := m.CloudProvider.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("cloud_provider")
			}
			return err
		}
	}

	return nil
}

func (m *CostExplorerAccount) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("created_at", "body", int64(*m.CreatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateCredential(formats strfmt.Registry) error {

	if swag.IsZero(m.Credential) { // not required
		return nil
	}

	if m.Credential != nil {
		if err := m.Credential.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("credential")
			}
			return err
		}
	}

	return nil
}

func (m *CostExplorerAccount) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateExternalBackend(formats strfmt.Registry) error {

	if swag.IsZero(m.ExternalBackend) { // not required
		return nil
	}

	if m.ExternalBackend != nil {
		if err := m.ExternalBackend.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("external_backend")
			}
			return err
		}
	}

	return nil
}

func (m *CostExplorerAccount) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateLastIngestionEndedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastIngestionEndedAt) { // not required
		return nil
	}

	if err := validate.MinimumInt("last_ingestion_ended_at", "body", int64(*m.LastIngestionEndedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateLastIngestionStartedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastIngestionStartedAt) { // not required
		return nil
	}

	if err := validate.MinimumInt("last_ingestion_started_at", "body", int64(*m.LastIngestionStartedAt), 0, false); err != nil {
		return err
	}

	return nil
}

var costExplorerAccountTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["idle","error","import"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		costExplorerAccountTypeStatusPropEnum = append(costExplorerAccountTypeStatusPropEnum, v)
	}
}

const (

	// CostExplorerAccountStatusIdle captures enum value "idle"
	CostExplorerAccountStatusIdle string = "idle"

	// CostExplorerAccountStatusError captures enum value "error"
	CostExplorerAccountStatusError string = "error"

	// CostExplorerAccountStatusImport captures enum value "import"
	CostExplorerAccountStatusImport string = "import"
)

// prop value enum
func (m *CostExplorerAccount) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, costExplorerAccountTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *CostExplorerAccount) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerAccount) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("updated_at", "body", int64(*m.UpdatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostExplorerAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostExplorerAccount) UnmarshalBinary(b []byte) error {
	var res CostExplorerAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
