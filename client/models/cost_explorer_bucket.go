// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostExplorerBucket CostExplorerBucket
//
// A sum of the cost generated in a period aggregated by one or more terms,
// for example if we aggregate costs by project here we have all the cost
// generated by a specific project in the peiod of time defined by the
// filters of the histogram.  In case the filter specifies more than one
// aggregation term this type will recursively contain the other levels of
// agregation.
//
// swagger:model CostExplorerBucket
type CostExplorerBucket struct {

	// buckets
	Buckets []*CostExplorerBucket `json:"buckets"`

	// cost
	// Required: true
	Cost *float64 `json:"cost"`

	// The value of the aggregation term, for example if we aggregate cost
	// by region aggregate_value can be us-east-2, if we aggregate by project
	// this can be cool_peoject_nuber_42, by service can be S3 or EC2, etc..
	//
	// Required: true
	Value *string `json:"value"`
}

// Validate validates this cost explorer bucket
func (m *CostExplorerBucket) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuckets(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateValue(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostExplorerBucket) validateBuckets(formats strfmt.Registry) error {

	if swag.IsZero(m.Buckets) { // not required
		return nil
	}

	for i := 0; i < len(m.Buckets); i++ {
		if swag.IsZero(m.Buckets[i]) { // not required
			continue
		}

		if m.Buckets[i] != nil {
			if err := m.Buckets[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("buckets" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CostExplorerBucket) validateCost(formats strfmt.Registry) error {

	if err := validate.Required("cost", "body", m.Cost); err != nil {
		return err
	}

	return nil
}

func (m *CostExplorerBucket) validateValue(formats strfmt.Registry) error {

	if err := validate.Required("value", "body", m.Value); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostExplorerBucket) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostExplorerBucket) UnmarshalBinary(b []byte) error {
	var res CostExplorerBucket
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
