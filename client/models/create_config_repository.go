// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateConfigRepository CreateConfigRepository
// swagger:model CreateConfigRepository
type CreateConfigRepository struct {

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// credential id
	// Required: true
	// Minimum: 1
	CredentialID *uint32 `json:"credential_id"`

	// default
	// Required: true
	Default *bool `json:"default"`

	// name
	// Required: true
	Name *string `json:"name"`

	// url
	// Required: true
	// Pattern: (?:http|https|git|ssh|git@[-\w.]+):(\/\/)?(.*?)(\.git)?(\/?|\#[-\d\w._]+?)$
	URL *string `json:"url"`
}

// Validate validates this create config repository
func (m *CreateConfigRepository) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDefault(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateConfigRepository) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *CreateConfigRepository) validateCredentialID(formats strfmt.Registry) error {

	if err := validate.Required("credential_id", "body", m.CredentialID); err != nil {
		return err
	}

	if err := validate.MinimumInt("credential_id", "body", int64(*m.CredentialID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateConfigRepository) validateDefault(formats strfmt.Registry) error {

	if err := validate.Required("default", "body", m.Default); err != nil {
		return err
	}

	return nil
}

func (m *CreateConfigRepository) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateConfigRepository) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.Pattern("url", "body", string(*m.URL), `(?:http|https|git|ssh|git@[-\w.]+):(\/\/)?(.*?)(\.git)?(\/?|\#[-\d\w._]+?)$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateConfigRepository) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateConfigRepository) UnmarshalBinary(b []byte) error {
	var res CreateConfigRepository
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
