// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CreateServiceCatalogSource ServiceCatalogSource
// swagger:model CreateServiceCatalogSource
type CreateServiceCatalogSource struct {

	// branch
	// Required: true
	Branch *string `json:"branch"`

	// credential id
	// Minimum: 1
	CredentialID uint32 `json:"credential_id,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// User canonical that owns this service catalog source. If omitted then the person
	// creating this service catalog source will be assigned as owner. When a user is the
	// owner of a service catalog source they has all the permissions on it.
	//
	Owner string `json:"owner,omitempty"`

	// url
	// Required: true
	// Pattern: (?:http|https|git|ssh|git@[-\w.]+):(\/\/)?(.*?)(\.git)?(\/?|\#[-\d\w._]+?)$
	URL *string `json:"url"`
}

// Validate validates this create service catalog source
func (m *CreateServiceCatalogSource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCredentialID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateURL(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CreateServiceCatalogSource) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	return nil
}

func (m *CreateServiceCatalogSource) validateCredentialID(formats strfmt.Registry) error {

	if swag.IsZero(m.CredentialID) { // not required
		return nil
	}

	if err := validate.MinimumInt("credential_id", "body", int64(m.CredentialID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *CreateServiceCatalogSource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *CreateServiceCatalogSource) validateURL(formats strfmt.Registry) error {

	if err := validate.Required("url", "body", m.URL); err != nil {
		return err
	}

	if err := validate.Pattern("url", "body", string(*m.URL), `(?:http|https|git|ssh|git@[-\w.]+):(\/\/)?(.*?)(\.git)?(\/?|\#[-\d\w._]+?)$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CreateServiceCatalogSource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CreateServiceCatalogSource) UnmarshalBinary(b []byte) error {
	var res CreateServiceCatalogSource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
