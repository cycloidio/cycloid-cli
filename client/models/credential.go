// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Credential Credential
//
// # Represents the Credential
//
// swagger:model Credential
type Credential struct {

	// canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// created at
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// in use
	InUse *CredentialInUse `json:"in_use,omitempty"`

	// List of all the keys available for the Credential
	// Required: true
	Keys []string `json:"keys"`

	// name
	// Required: true
	Name *string `json:"name"`

	// Organization member that owns this credential. When a user is the owner of a
	// credential he has all the permissions on it.
	// In the event where the user has been deleted that field might be empty.
	//
	Owner *User `json:"owner,omitempty"`

	// path
	// Required: true
	Path *string `json:"path"`

	// raw
	// Required: true
	Raw *CredentialRaw `json:"raw"`

	// type
	// Required: true
	// Enum: ["ssh","aws","custom","azure","azure_storage","gcp","basic_auth","elasticsearch","swift","vmware"]
	Type *string `json:"type"`

	// updated at
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at,omitempty"`
}

// Validate validates this credential
func (m *Credential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInUse(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Credential) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", *m.Canonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", *m.Canonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", *m.Canonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateCreatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.CreatedAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("created_at", "body", *m.CreatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateInUse(formats strfmt.Registry) error {
	if swag.IsZero(m.InUse) { // not required
		return nil
	}

	if m.InUse != nil {
		if err := m.InUse.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in_use")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in_use")
			}
			return err
		}
	}

	return nil
}

func (m *Credential) validateKeys(formats strfmt.Registry) error {

	if err := validate.Required("keys", "body", m.Keys); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateOwner(formats strfmt.Registry) error {
	if swag.IsZero(m.Owner) { // not required
		return nil
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Credential) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("raw", "body", m.Raw); err != nil {
		return err
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

var credentialTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssh","aws","custom","azure","azure_storage","gcp","basic_auth","elasticsearch","swift","vmware"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialTypeTypePropEnum = append(credentialTypeTypePropEnum, v)
	}
}

const (

	// CredentialTypeSSH captures enum value "ssh"
	CredentialTypeSSH string = "ssh"

	// CredentialTypeAws captures enum value "aws"
	CredentialTypeAws string = "aws"

	// CredentialTypeCustom captures enum value "custom"
	CredentialTypeCustom string = "custom"

	// CredentialTypeAzure captures enum value "azure"
	CredentialTypeAzure string = "azure"

	// CredentialTypeAzureStorage captures enum value "azure_storage"
	CredentialTypeAzureStorage string = "azure_storage"

	// CredentialTypeGcp captures enum value "gcp"
	CredentialTypeGcp string = "gcp"

	// CredentialTypeBasicAuth captures enum value "basic_auth"
	CredentialTypeBasicAuth string = "basic_auth"

	// CredentialTypeElasticsearch captures enum value "elasticsearch"
	CredentialTypeElasticsearch string = "elasticsearch"

	// CredentialTypeSwift captures enum value "swift"
	CredentialTypeSwift string = "swift"

	// CredentialTypeVmware captures enum value "vmware"
	CredentialTypeVmware string = "vmware"
)

// prop value enum
func (m *Credential) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *Credential) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

func (m *Credential) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("updated_at", "body", *m.UpdatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this credential based on the context it is used
func (m *Credential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInUse(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateOwner(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Credential) contextValidateInUse(ctx context.Context, formats strfmt.Registry) error {

	if m.InUse != nil {

		if swag.IsZero(m.InUse) { // not required
			return nil
		}

		if err := m.InUse.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("in_use")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("in_use")
			}
			return err
		}
	}

	return nil
}

func (m *Credential) contextValidateOwner(ctx context.Context, formats strfmt.Registry) error {

	if m.Owner != nil {

		if swag.IsZero(m.Owner) { // not required
			return nil
		}

		if err := m.Owner.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

func (m *Credential) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {

		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Credential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Credential) UnmarshalBinary(b []byte) error {
	var res Credential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
