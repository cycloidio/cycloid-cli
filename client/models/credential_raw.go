// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CredentialRaw Credential Raw
//
// # All the possible fields inside it
//
// swagger:model CredentialRaw
type CredentialRaw struct {

	// access key
	AccessKey string `json:"access_key,omitempty"`

	// account name
	AccountName string `json:"account_name,omitempty"`

	// auth url
	AuthURL string `json:"auth_url,omitempty"`

	// ca cert
	CaCert string `json:"ca_cert,omitempty"`

	// client id
	ClientID string `json:"client_id,omitempty"`

	// client secret
	ClientSecret string `json:"client_secret,omitempty"`

	// domain id
	DomainID string `json:"domain_id,omitempty"`

	// environment
	// Enum: ["public","usgovernment","china","german"]
	Environment string `json:"environment,omitempty"`

	// json key
	JSONKey string `json:"json_key,omitempty"`

	// password
	Password string `json:"password,omitempty"`

	// raw
	Raw interface{} `json:"raw,omitempty"`

	// secret key
	SecretKey string `json:"secret_key,omitempty"`

	// ssh key
	SSHKey string `json:"ssh_key,omitempty"`

	// subscription id
	SubscriptionID string `json:"subscription_id,omitempty"`

	// tenant id
	TenantID string `json:"tenant_id,omitempty"`

	// username
	Username string `json:"username,omitempty"`
}

// Validate validates this credential raw
func (m *CredentialRaw) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironment(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var credentialRawTypeEnvironmentPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["public","usgovernment","china","german"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		credentialRawTypeEnvironmentPropEnum = append(credentialRawTypeEnvironmentPropEnum, v)
	}
}

const (

	// CredentialRawEnvironmentPublic captures enum value "public"
	CredentialRawEnvironmentPublic string = "public"

	// CredentialRawEnvironmentUsgovernment captures enum value "usgovernment"
	CredentialRawEnvironmentUsgovernment string = "usgovernment"

	// CredentialRawEnvironmentChina captures enum value "china"
	CredentialRawEnvironmentChina string = "china"

	// CredentialRawEnvironmentGerman captures enum value "german"
	CredentialRawEnvironmentGerman string = "german"
)

// prop value enum
func (m *CredentialRaw) validateEnvironmentEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, credentialRawTypeEnvironmentPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *CredentialRaw) validateEnvironment(formats strfmt.Registry) error {
	if swag.IsZero(m.Environment) { // not required
		return nil
	}

	// value enum
	if err := m.validateEnvironmentEnum("environment", "body", m.Environment); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this credential raw based on context it is used
func (m *CredentialRaw) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *CredentialRaw) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CredentialRaw) UnmarshalBinary(b []byte) error {
	var res CredentialRaw
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
