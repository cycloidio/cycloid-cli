// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormGroup Forms File Group
// swagger:model FormGroup
type FormGroup struct {

	// name
	// Required: true
	Name *string `json:"name"`

	// technologies
	// Required: true
	Technologies []string `json:"technologies"`

	// vars
	// Required: true
	Vars []*FormEntity `json:"vars"`
}

// Validate validates this form group
func (m *FormGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTechnologies(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormGroup) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *FormGroup) validateTechnologies(formats strfmt.Registry) error {

	if err := validate.Required("technologies", "body", m.Technologies); err != nil {
		return err
	}

	return nil
}

func (m *FormGroup) validateVars(formats strfmt.Registry) error {

	if err := validate.Required("vars", "body", m.Vars); err != nil {
		return err
	}

	for i := 0; i < len(m.Vars); i++ {
		if swag.IsZero(m.Vars[i]) { // not required
			continue
		}

		if m.Vars[i] != nil {
			if err := m.Vars[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("vars" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormGroup) UnmarshalBinary(b []byte) error {
	var res FormGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
