// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// FormInput Forms input
//
// The variables set within a form with the corresponding
// environment canonical and use case
//
// swagger:model FormInput
type FormInput struct {

	// The environment canonical
	// Required: true
	EnvironmentCanonical *string `json:"environment_canonical"`

	// The use-case to load
	// Required: true
	UseCase *string `json:"use_case"`

	// Forms variables filled, the format to respect is as follows
	// {
	//   "ansible": {
	//     "key1": "value1",
	//     "key2": "value2",
	//     "key3": "value3"
	//   },
	//   "terraform": {
	//     "key1": "value1",
	//     "key2": "value2",
	//     "key3": "value3"
	//   },
	//   "pipeline": {
	//     "key1": "value2"
	//   }
	// }
	// Keys being the variable name that you want to see substituted/defined.
	//
	// Required: true
	Vars interface{} `json:"vars"`
}

// Validate validates this form input
func (m *FormInput) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEnvironmentCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *FormInput) validateEnvironmentCanonical(formats strfmt.Registry) error {

	if err := validate.Required("environment_canonical", "body", m.EnvironmentCanonical); err != nil {
		return err
	}

	return nil
}

func (m *FormInput) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("use_case", "body", m.UseCase); err != nil {
		return err
	}

	return nil
}

func (m *FormInput) validateVars(formats strfmt.Registry) error {

	if err := validate.Required("vars", "body", m.Vars); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *FormInput) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *FormInput) UnmarshalBinary(b []byte) error {
	var res FormInput
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
