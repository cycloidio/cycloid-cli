// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// GCPCostStorage Representation of BigQuery external backend.
// Must be matched with a credential of the "gcp" type.
//
// swagger:model GCPCostStorage
type GCPCostStorage struct {

	// The GCP BigQuery dataset containing tables
	//
	Dataset string `json:"dataset,omitempty"`

	// The GCP BigQuery table containing data
	//
	Table string `json:"table,omitempty"`
}

// Engine gets the engine of this subtype
func (m *GCPCostStorage) Engine() string {
	return "GCPCostStorage"
}

// SetEngine sets the engine of this subtype
func (m *GCPCostStorage) SetEngine(val string) {

}

// Dataset gets the dataset of this subtype

// Table gets the table of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *GCPCostStorage) UnmarshalJSON(raw []byte) error {
	var data struct {

		// The GCP BigQuery dataset containing tables
		//
		Dataset string `json:"dataset,omitempty"`

		// The GCP BigQuery table containing data
		//
		Table string `json:"table,omitempty"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Engine string `json:"engine"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result GCPCostStorage

	if base.Engine != result.Engine() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid engine value: %q", base.Engine)
	}

	result.Dataset = data.Dataset

	result.Table = data.Table

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m GCPCostStorage) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// The GCP BigQuery dataset containing tables
		//
		Dataset string `json:"dataset,omitempty"`

		// The GCP BigQuery table containing data
		//
		Table string `json:"table,omitempty"`
	}{

		Dataset: m.Dataset,

		Table: m.Table,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Engine string `json:"engine"`
	}{

		Engine: m.Engine(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this g c p cost storage
func (m *GCPCostStorage) Validate(formats strfmt.Registry) error {
	var res []error

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

// MarshalBinary interface implementation
func (m *GCPCostStorage) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *GCPCostStorage) UnmarshalBinary(b []byte) error {
	var res GCPCostStorage
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
