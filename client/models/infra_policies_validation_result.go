// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
)

// InfraPoliciesValidationResult Infra policies validation results.
//
// The set of not respected rules for the checked policies.
//
// swagger:model InfraPoliciesValidationResult
type InfraPoliciesValidationResult struct {

	// advisories
	Advisories []*InfraPoliciesValidationResultItem `json:"advisories"`

	// criticals
	Criticals []*InfraPoliciesValidationResultItem `json:"criticals"`

	// warnings
	Warnings []*InfraPoliciesValidationResultItem `json:"warnings"`
}

// Validate validates this infra policies validation result
func (m *InfraPoliciesValidationResult) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdvisories(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCriticals(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateWarnings(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraPoliciesValidationResult) validateAdvisories(formats strfmt.Registry) error {
	if swag.IsZero(m.Advisories) { // not required
		return nil
	}

	for i := 0; i < len(m.Advisories); i++ {
		if swag.IsZero(m.Advisories[i]) { // not required
			continue
		}

		if m.Advisories[i] != nil {
			if err := m.Advisories[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advisories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advisories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraPoliciesValidationResult) validateCriticals(formats strfmt.Registry) error {
	if swag.IsZero(m.Criticals) { // not required
		return nil
	}

	for i := 0; i < len(m.Criticals); i++ {
		if swag.IsZero(m.Criticals[i]) { // not required
			continue
		}

		if m.Criticals[i] != nil {
			if err := m.Criticals[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criticals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criticals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraPoliciesValidationResult) validateWarnings(formats strfmt.Registry) error {
	if swag.IsZero(m.Warnings) { // not required
		return nil
	}

	for i := 0; i < len(m.Warnings); i++ {
		if swag.IsZero(m.Warnings[i]) { // not required
			continue
		}

		if m.Warnings[i] != nil {
			if err := m.Warnings[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// ContextValidate validate this infra policies validation result based on the context it is used
func (m *InfraPoliciesValidationResult) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdvisories(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateCriticals(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateWarnings(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraPoliciesValidationResult) contextValidateAdvisories(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Advisories); i++ {

		if m.Advisories[i] != nil {

			if swag.IsZero(m.Advisories[i]) { // not required
				return nil
			}

			if err := m.Advisories[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("advisories" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("advisories" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraPoliciesValidationResult) contextValidateCriticals(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Criticals); i++ {

		if m.Criticals[i] != nil {

			if swag.IsZero(m.Criticals[i]) { // not required
				return nil
			}

			if err := m.Criticals[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("criticals" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("criticals" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *InfraPoliciesValidationResult) contextValidateWarnings(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Warnings); i++ {

		if m.Warnings[i] != nil {

			if swag.IsZero(m.Warnings[i]) { // not required
				return nil
			}

			if err := m.Warnings[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("warnings" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("warnings" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraPoliciesValidationResult) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraPoliciesValidationResult) UnmarshalBinary(b []byte) error {
	var res InfraPoliciesValidationResult
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
