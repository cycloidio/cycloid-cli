// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// InfraPolicy InfraPolicy
//
// The policy to control operations across infrastructure.
// swagger:model InfraPolicy
type InfraPolicy struct {

	// The body field is the code in plain text that defines the rules for the policy.
	// Required: true
	Body *string `json:"body"`

	// canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// created at
	// Required: true
	CreatedAt *uint64 `json:"created_at"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// name
	// Required: true
	// Min Length: 3
	Name *string `json:"name"`

	// Organization member that owns this InfraPolicy. When a user is the owner of an
	// InfraPolicy it has all the permissions on it.
	// In the event where the user has been deleted then it will be null.
	//
	// Required: true
	Owner *MemberOrg `json:"owner"`

	// It defines the enforcement level. It must be used from the caller of the InfraPolicy
	// validation endpoint to apply the specific logic in case of not respected InfraPolicies.
	// Uses critical to block the changes.
	// Uses warning to block the changes but allow to override manually.
	// Uses advisory to allow them but a notification must be send.
	//
	// Required: true
	// Enum: [critical warning advisory]
	Severity *string `json:"severity"`

	// updated at
	// Required: true
	UpdatedAt *uint64 `json:"updated_at"`
}

// Validate validates this infra policy
func (m *InfraPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *InfraPolicy) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", string(*m.Canonical), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", string(*m.Canonical), 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", string(*m.Canonical), `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if m.Owner != nil {
		if err := m.Owner.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("owner")
			}
			return err
		}
	}

	return nil
}

var infraPolicyTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["critical","warning","advisory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		infraPolicyTypeSeverityPropEnum = append(infraPolicyTypeSeverityPropEnum, v)
	}
}

const (

	// InfraPolicySeverityCritical captures enum value "critical"
	InfraPolicySeverityCritical string = "critical"

	// InfraPolicySeverityWarning captures enum value "warning"
	InfraPolicySeverityWarning string = "warning"

	// InfraPolicySeverityAdvisory captures enum value "advisory"
	InfraPolicySeverityAdvisory string = "advisory"
)

// prop value enum
func (m *InfraPolicy) validateSeverityEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, infraPolicyTypeSeverityPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *InfraPolicy) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

func (m *InfraPolicy) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *InfraPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *InfraPolicy) UnmarshalBinary(b []byte) error {
	var res InfraPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
