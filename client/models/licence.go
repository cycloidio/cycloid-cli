// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Licence Licence
//
// Object containing licence parameters
// swagger:model Licence
type Licence struct {

	// company name
	// Required: true
	CompanyName *string `json:"company_name"`

	// created at
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// current members
	// Required: true
	// Minimum: 0
	CurrentMembers *uint64 `json:"current_members"`

	// email address
	// Required: true
	EmailAddress *string `json:"email_address"`

	// expires at
	// Required: true
	// Minimum: 0
	ExpiresAt *uint64 `json:"expires_at"`

	// Licence's key in the JWT format
	// Required: true
	Key *string `json:"key"`

	// members count
	// Required: true
	// Minimum: 0
	MembersCount *uint64 `json:"members_count"`

	// on prem
	// Required: true
	OnPrem *bool `json:"on_prem"`

	// updated at
	// Required: true
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this licence
func (m *Licence) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCompanyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCurrentMembers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmailAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateExpiresAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKey(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMembersCount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOnPrem(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Licence) validateCompanyName(formats strfmt.Registry) error {

	if err := validate.Required("company_name", "body", m.CompanyName); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("created_at", "body", int64(*m.CreatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateCurrentMembers(formats strfmt.Registry) error {

	if err := validate.Required("current_members", "body", m.CurrentMembers); err != nil {
		return err
	}

	if err := validate.MinimumInt("current_members", "body", int64(*m.CurrentMembers), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateEmailAddress(formats strfmt.Registry) error {

	if err := validate.Required("email_address", "body", m.EmailAddress); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateExpiresAt(formats strfmt.Registry) error {

	if err := validate.Required("expires_at", "body", m.ExpiresAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("expires_at", "body", int64(*m.ExpiresAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateKey(formats strfmt.Registry) error {

	if err := validate.Required("key", "body", m.Key); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateMembersCount(formats strfmt.Registry) error {

	if err := validate.Required("members_count", "body", m.MembersCount); err != nil {
		return err
	}

	if err := validate.MinimumInt("members_count", "body", int64(*m.MembersCount), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateOnPrem(formats strfmt.Registry) error {

	if err := validate.Required("on_prem", "body", m.OnPrem); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("updated_at", "body", int64(*m.UpdatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Licence) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Licence) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Licence) UnmarshalBinary(b []byte) error {
	var res Licence
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
