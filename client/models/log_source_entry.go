// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// LogSourceEntry Log entry
//
// A log's entry which pertains to a specific log's source.
// swagger:model LogSourceEntry
type LogSourceEntry struct {

	// The host registered with the log's entry.
	// Required: true
	// Min Length: 1
	Host *string `json:"host"`

	// The original (i.e. raw) log's entry.
	// Required: true
	// Min Length: 1
	Message *string `json:"message"`

	// The timestamp extracted from the orginal log entry in order to be homogeneous to all the different supported underlying log systems.
	// Required: true
	Timestamp *string `json:"timestamp"`
}

// Validate validates this log source entry
func (m *LogSourceEntry) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *LogSourceEntry) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("host", "body", m.Host); err != nil {
		return err
	}

	if err := validate.MinLength("host", "body", string(*m.Host), 1); err != nil {
		return err
	}

	return nil
}

func (m *LogSourceEntry) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("message", "body", m.Message); err != nil {
		return err
	}

	if err := validate.MinLength("message", "body", string(*m.Message), 1); err != nil {
		return err
	}

	return nil
}

func (m *LogSourceEntry) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *LogSourceEntry) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *LogSourceEntry) UnmarshalBinary(b []byte) error {
	var res LogSourceEntry
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
