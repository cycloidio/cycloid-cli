// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MemberOrg Member of an organization
//
// Member is a user who is associated to an organization.
//
// swagger:model MemberOrg
type MemberOrg struct {

	// When the user became a member.
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// user email
	// Format: email
	Email strfmt.Email `json:"email,omitempty"`

	// family name
	// Min Length: 2
	FamilyName string `json:"family_name,omitempty"`

	// given name
	// Min Length: 2
	GivenName string `json:"given_name,omitempty"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// The email address to which the invitation was sent. It's used to resend the invitation.
	// Format: email
	InvitationEmail strfmt.Email `json:"invitation_email,omitempty"`

	// invitation resent at
	// Minimum: 0
	InvitationResentAt *uint64 `json:"invitation_resent_at,omitempty"`

	// invitation state
	// Enum: ["pending","accepted","declined"]
	InvitationState string `json:"invitation_state,omitempty"`

	// When the user had been invited to join as a member. When not present, the user is already a member, so she/he has verified her/his invitation.
	// Minimum: 0
	InvitedAt *uint64 `json:"invited_at,omitempty"`

	// Organization member who invited the current user.
	InvitedBy *MemberOrg `json:"invited_by,omitempty"`

	// When the user logged in last time.
	// Minimum: 0
	LastLoginAt *uint64 `json:"last_login_at,omitempty"`

	// User's preferred language
	// Enum: ["en","fr","es"]
	Locale string `json:"locale,omitempty"`

	// mfa enabled
	MfaEnabled bool `json:"mfa_enabled,omitempty"`

	// picture url
	// Format: uri
	PictureURL strfmt.URI `json:"picture_url,omitempty"`

	// role
	// Required: true
	Role *Role `json:"role"`

	// When the user had the role modified.
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at,omitempty"`

	// username
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Username string `json:"username,omitempty"`
}

// Validate validates this member org
func (m *MemberOrg) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationResentAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitationState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePictureURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRole(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberOrg) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumUint("created_at", "body", *m.CreatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.Email) { // not required
		return nil
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateFamilyName(formats strfmt.Registry) error {
	if swag.IsZero(m.FamilyName) { // not required
		return nil
	}

	if err := validate.MinLength("family_name", "body", m.FamilyName, 2); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateGivenName(formats strfmt.Registry) error {
	if swag.IsZero(m.GivenName) { // not required
		return nil
	}

	if err := validate.MinLength("given_name", "body", m.GivenName, 2); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateInvitationEmail(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitationEmail) { // not required
		return nil
	}

	if err := validate.FormatOf("invitation_email", "body", "email", m.InvitationEmail.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateInvitationResentAt(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitationResentAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("invitation_resent_at", "body", *m.InvitationResentAt, 0, false); err != nil {
		return err
	}

	return nil
}

var memberOrgTypeInvitationStatePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["pending","accepted","declined"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memberOrgTypeInvitationStatePropEnum = append(memberOrgTypeInvitationStatePropEnum, v)
	}
}

const (

	// MemberOrgInvitationStatePending captures enum value "pending"
	MemberOrgInvitationStatePending string = "pending"

	// MemberOrgInvitationStateAccepted captures enum value "accepted"
	MemberOrgInvitationStateAccepted string = "accepted"

	// MemberOrgInvitationStateDeclined captures enum value "declined"
	MemberOrgInvitationStateDeclined string = "declined"
)

// prop value enum
func (m *MemberOrg) validateInvitationStateEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, memberOrgTypeInvitationStatePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MemberOrg) validateInvitationState(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitationState) { // not required
		return nil
	}

	// value enum
	if err := m.validateInvitationStateEnum("invitation_state", "body", m.InvitationState); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateInvitedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitedAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("invited_at", "body", *m.InvitedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateInvitedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitedBy) { // not required
		return nil
	}

	if m.InvitedBy != nil {
		if err := m.InvitedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invited_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invited_by")
			}
			return err
		}
	}

	return nil
}

func (m *MemberOrg) validateLastLoginAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLoginAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("last_login_at", "body", *m.LastLoginAt, 0, false); err != nil {
		return err
	}

	return nil
}

var memberOrgTypeLocalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en","fr","es"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		memberOrgTypeLocalePropEnum = append(memberOrgTypeLocalePropEnum, v)
	}
}

const (

	// MemberOrgLocaleEn captures enum value "en"
	MemberOrgLocaleEn string = "en"

	// MemberOrgLocaleFr captures enum value "fr"
	MemberOrgLocaleFr string = "fr"

	// MemberOrgLocaleEs captures enum value "es"
	MemberOrgLocaleEs string = "es"
)

// prop value enum
func (m *MemberOrg) validateLocaleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, memberOrgTypeLocalePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *MemberOrg) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocaleEnum("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validatePictureURL(formats strfmt.Registry) error {
	if swag.IsZero(m.PictureURL) { // not required
		return nil
	}

	if err := validate.FormatOf("picture_url", "body", "uri", m.PictureURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateRole(formats strfmt.Registry) error {

	if err := validate.Required("role", "body", m.Role); err != nil {
		return err
	}

	if m.Role != nil {
		if err := m.Role.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

func (m *MemberOrg) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("updated_at", "body", *m.UpdatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberOrg) validateUsername(formats strfmt.Registry) error {
	if swag.IsZero(m.Username) { // not required
		return nil
	}

	if err := validate.MinLength("username", "body", m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", m.Username, 100); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", m.Username, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this member org based on the context it is used
func (m *MemberOrg) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvitedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateRole(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberOrg) contextValidateInvitedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.InvitedBy != nil {

		if swag.IsZero(m.InvitedBy) { // not required
			return nil
		}

		if err := m.InvitedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invited_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invited_by")
			}
			return err
		}
	}

	return nil
}

func (m *MemberOrg) contextValidateRole(ctx context.Context, formats strfmt.Registry) error {

	if m.Role != nil {

		if err := m.Role.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("role")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("role")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberOrg) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberOrg) UnmarshalBinary(b []byte) error {
	var res MemberOrg
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
