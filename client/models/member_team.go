// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// MemberTeam Member of a team
//
// Member is a user who is associated to a team.
//
// swagger:model MemberTeam
type MemberTeam struct {

	// When the user became a member.
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// user email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// family name
	// Required: true
	// Min Length: 2
	FamilyName *string `json:"family_name"`

	// given name
	// Required: true
	// Min Length: 2
	GivenName *string `json:"given_name"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// Team member who invited the current user to the team.
	InvitedBy *MemberOrg `json:"invited_by,omitempty"`

	// When the user logged in last time.
	// Minimum: 0
	LastLoginAt *uint64 `json:"last_login_at,omitempty"`

	// mfa enabled
	// Required: true
	MfaEnabled *bool `json:"mfa_enabled"`

	// picture url
	// Format: uri
	PictureURL strfmt.URI `json:"picture_url,omitempty"`

	// When the user had the role modified.
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at,omitempty"`

	// username
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Username *string `json:"username"`
}

// Validate validates this member team
func (m *MemberTeam) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInvitedBy(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfaEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePictureURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberTeam) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumUint("created_at", "body", *m.CreatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("family_name", "body", m.FamilyName); err != nil {
		return err
	}

	if err := validate.MinLength("family_name", "body", *m.FamilyName, 2); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateGivenName(formats strfmt.Registry) error {

	if err := validate.Required("given_name", "body", m.GivenName); err != nil {
		return err
	}

	if err := validate.MinLength("given_name", "body", *m.GivenName, 2); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateInvitedBy(formats strfmt.Registry) error {
	if swag.IsZero(m.InvitedBy) { // not required
		return nil
	}

	if m.InvitedBy != nil {
		if err := m.InvitedBy.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invited_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invited_by")
			}
			return err
		}
	}

	return nil
}

func (m *MemberTeam) validateLastLoginAt(formats strfmt.Registry) error {
	if swag.IsZero(m.LastLoginAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("last_login_at", "body", *m.LastLoginAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateMfaEnabled(formats strfmt.Registry) error {

	if err := validate.Required("mfa_enabled", "body", m.MfaEnabled); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validatePictureURL(formats strfmt.Registry) error {
	if swag.IsZero(m.PictureURL) { // not required
		return nil
	}

	if err := validate.FormatOf("picture_url", "body", "uri", m.PictureURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateUpdatedAt(formats strfmt.Registry) error {
	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.MinimumUint("updated_at", "body", *m.UpdatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *MemberTeam) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 100); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this member team based on the context it is used
func (m *MemberTeam) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateInvitedBy(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *MemberTeam) contextValidateInvitedBy(ctx context.Context, formats strfmt.Registry) error {

	if m.InvitedBy != nil {

		if swag.IsZero(m.InvitedBy) { // not required
			return nil
		}

		if err := m.InvitedBy.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("invited_by")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("invited_by")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *MemberTeam) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *MemberTeam) UnmarshalBinary(b []byte) error {
	var res MemberTeam
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
