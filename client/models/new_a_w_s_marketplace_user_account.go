// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewAWSMarketplaceUserAccount Sign up from AWS Marketplace
//
// Create a new AWS Marketplace user account.
//
// swagger:model NewAWSMarketplaceUserAccount
type NewAWSMarketplaceUserAccount struct {

	// The AWS marketplace token
	// Required: true
	// Min Length: 1
	AwsMarketplaceToken *string `json:"aws_marketplace_token"`

	// Code of a country the user is from
	// Pattern: ^[A-Z]{2}$
	CountryCode string `json:"country_code,omitempty"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// family name
	// Required: true
	// Min Length: 2
	FamilyName *string `json:"family_name"`

	// given name
	// Required: true
	// Min Length: 2
	GivenName *string `json:"given_name"`

	// User's preferred language
	// Enum: ["en","fr","es"]
	Locale string `json:"locale,omitempty"`

	// password
	// Required: true
	// Min Length: 12
	// Format: password
	Password *strfmt.Password `json:"password"`

	// username
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Username *string `json:"username"`
}

// Validate validates this new a w s marketplace user account
func (m *NewAWSMarketplaceUserAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAwsMarketplaceToken(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateAwsMarketplaceToken(formats strfmt.Registry) error {

	if err := validate.Required("aws_marketplace_token", "body", m.AwsMarketplaceToken); err != nil {
		return err
	}

	if err := validate.MinLength("aws_marketplace_token", "body", *m.AwsMarketplaceToken, 1); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateCountryCode(formats strfmt.Registry) error {
	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.Pattern("country_code", "body", m.CountryCode, `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("family_name", "body", m.FamilyName); err != nil {
		return err
	}

	if err := validate.MinLength("family_name", "body", *m.FamilyName, 2); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateGivenName(formats strfmt.Registry) error {

	if err := validate.Required("given_name", "body", m.GivenName); err != nil {
		return err
	}

	if err := validate.MinLength("given_name", "body", *m.GivenName, 2); err != nil {
		return err
	}

	return nil
}

var newAWSMarketplaceUserAccountTypeLocalePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["en","fr","es"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newAWSMarketplaceUserAccountTypeLocalePropEnum = append(newAWSMarketplaceUserAccountTypeLocalePropEnum, v)
	}
}

const (

	// NewAWSMarketplaceUserAccountLocaleEn captures enum value "en"
	NewAWSMarketplaceUserAccountLocaleEn string = "en"

	// NewAWSMarketplaceUserAccountLocaleFr captures enum value "fr"
	NewAWSMarketplaceUserAccountLocaleFr string = "fr"

	// NewAWSMarketplaceUserAccountLocaleEs captures enum value "es"
	NewAWSMarketplaceUserAccountLocaleEs string = "es"
)

// prop value enum
func (m *NewAWSMarketplaceUserAccount) validateLocaleEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, newAWSMarketplaceUserAccountTypeLocalePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateLocale(formats strfmt.Registry) error {
	if swag.IsZero(m.Locale) { // not required
		return nil
	}

	// value enum
	if err := m.validateLocaleEnum("locale", "body", m.Locale); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", m.Password.String(), 12); err != nil {
		return err
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewAWSMarketplaceUserAccount) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", *m.Username, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", *m.Username, 100); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", *m.Username, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new a w s marketplace user account based on context it is used
func (m *NewAWSMarketplaceUserAccount) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewAWSMarketplaceUserAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewAWSMarketplaceUserAccount) UnmarshalBinary(b []byte) error {
	var res NewAWSMarketplaceUserAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
