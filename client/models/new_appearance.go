// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewAppearance Appearance
//
// An Appearance holds the values of the branding configuration, which are rendered across an organization
// swagger:model NewAppearance
type NewAppearance struct {

	// color
	// Required: true
	Color *NewAppearanceColor `json:"color"`

	// display name
	// Required: true
	// Max Length: 50
	// Min Length: 1
	DisplayName *string `json:"display_name"`

	// favicon
	// Required: true
	// Format: uri
	Favicon *strfmt.URI `json:"favicon"`

	// footer
	// Required: true
	// Max Length: 1000
	// Min Length: 0
	Footer *string `json:"footer"`

	// logo
	// Required: true
	// Format: uri
	Logo *strfmt.URI `json:"logo"`

	// name
	// Required: true
	// Max Length: 50
	// Min Length: 1
	Name *string `json:"name"`

	// tab title
	// Required: true
	// Max Length: 50
	// Min Length: 1
	TabTitle *string `json:"tab_title"`
}

// Validate validates this new appearance
func (m *NewAppearance) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDisplayName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFavicon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFooter(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLogo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTabTitle(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewAppearance) validateColor(formats strfmt.Registry) error {

	if err := validate.Required("color", "body", m.Color); err != nil {
		return err
	}

	if m.Color != nil {
		if err := m.Color.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("color")
			}
			return err
		}
	}

	return nil
}

func (m *NewAppearance) validateDisplayName(formats strfmt.Registry) error {

	if err := validate.Required("display_name", "body", m.DisplayName); err != nil {
		return err
	}

	if err := validate.MinLength("display_name", "body", string(*m.DisplayName), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("display_name", "body", string(*m.DisplayName), 50); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearance) validateFavicon(formats strfmt.Registry) error {

	if err := validate.Required("favicon", "body", m.Favicon); err != nil {
		return err
	}

	if err := validate.FormatOf("favicon", "body", "uri", m.Favicon.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearance) validateFooter(formats strfmt.Registry) error {

	if err := validate.Required("footer", "body", m.Footer); err != nil {
		return err
	}

	if err := validate.MinLength("footer", "body", string(*m.Footer), 0); err != nil {
		return err
	}

	if err := validate.MaxLength("footer", "body", string(*m.Footer), 1000); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearance) validateLogo(formats strfmt.Registry) error {

	if err := validate.Required("logo", "body", m.Logo); err != nil {
		return err
	}

	if err := validate.FormatOf("logo", "body", "uri", m.Logo.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearance) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("name", "body", string(*m.Name), 50); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearance) validateTabTitle(formats strfmt.Registry) error {

	if err := validate.Required("tab_title", "body", m.TabTitle); err != nil {
		return err
	}

	if err := validate.MinLength("tab_title", "body", string(*m.TabTitle), 1); err != nil {
		return err
	}

	if err := validate.MaxLength("tab_title", "body", string(*m.TabTitle), 50); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewAppearance) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewAppearance) UnmarshalBinary(b []byte) error {
	var res NewAppearance
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// NewAppearanceColor new appearance color
// swagger:model NewAppearanceColor
type NewAppearanceColor struct {

	// Blue color value of the RGB color
	// Required: true
	// Maximum: 255
	// Minimum: 0
	B *uint32 `json:"b"`

	// Green color value of the RGB color
	// Required: true
	// Maximum: 255
	// Minimum: 0
	G *uint32 `json:"g"`

	// Red color value of the RGB color
	// Required: true
	// Maximum: 255
	// Minimum: 0
	R *uint32 `json:"r"`
}

// Validate validates this new appearance color
func (m *NewAppearanceColor) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateB(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateG(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateR(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewAppearanceColor) validateB(formats strfmt.Registry) error {

	if err := validate.Required("color"+"."+"b", "body", m.B); err != nil {
		return err
	}

	if err := validate.MinimumInt("color"+"."+"b", "body", int64(*m.B), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("color"+"."+"b", "body", int64(*m.B), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearanceColor) validateG(formats strfmt.Registry) error {

	if err := validate.Required("color"+"."+"g", "body", m.G); err != nil {
		return err
	}

	if err := validate.MinimumInt("color"+"."+"g", "body", int64(*m.G), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("color"+"."+"g", "body", int64(*m.G), 255, false); err != nil {
		return err
	}

	return nil
}

func (m *NewAppearanceColor) validateR(formats strfmt.Registry) error {

	if err := validate.Required("color"+"."+"r", "body", m.R); err != nil {
		return err
	}

	if err := validate.MinimumInt("color"+"."+"r", "body", int64(*m.R), 0, false); err != nil {
		return err
	}

	if err := validate.MaximumInt("color"+"."+"r", "body", int64(*m.R), 255, false); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewAppearanceColor) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewAppearanceColor) UnmarshalBinary(b []byte) error {
	var res NewAppearanceColor
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
