// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewBillingInformation Organization Billing Information
//
// The billing information of the Organization
// swagger:model NewBillingInformation
type NewBillingInformation struct {

	// address
	Address *BillingInformationAddress `json:"address,omitempty"`

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// language
	Language string `json:"language,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// phone
	Phone string `json:"phone,omitempty"`

	// tax information
	TaxInformation *BillingInformationTaxInformation `json:"tax_information,omitempty"`
}

// Validate validates this new billing information
func (m *NewBillingInformation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAddress(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaxInformation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewBillingInformation) validateAddress(formats strfmt.Registry) error {

	if swag.IsZero(m.Address) { // not required
		return nil
	}

	if m.Address != nil {
		if err := m.Address.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("address")
			}
			return err
		}
	}

	return nil
}

func (m *NewBillingInformation) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *NewBillingInformation) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewBillingInformation) validateTaxInformation(formats strfmt.Registry) error {

	if swag.IsZero(m.TaxInformation) { // not required
		return nil
	}

	if m.TaxInformation != nil {
		if err := m.TaxInformation.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("tax_information")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewBillingInformation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewBillingInformation) UnmarshalBinary(b []byte) error {
	var res NewBillingInformation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
