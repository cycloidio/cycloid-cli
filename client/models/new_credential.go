// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewCredential Credential
//
// # Represents the Credential
//
// swagger:model NewCredential
type NewCredential struct {

	// canonical
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical string `json:"canonical,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// User canonical that owns this credential. If omitted then the person creating this
	// credential will be assigned as owner. When a user is the owner of a credential he has
	// all the permissions on it.
	//
	Owner string `json:"owner,omitempty"`

	// path
	// Required: true
	// Pattern: [a-zA-z0-9_\-./]
	Path *string `json:"path"`

	// raw
	// Required: true
	Raw *CredentialRaw `json:"raw"`

	// type
	// Required: true
	// Enum: ["ssh","aws","custom","azure","azure_storage","gcp","basic_auth","elasticsearch","swift","vmware"]
	Type *string `json:"type"`
}

// Validate validates this new credential
func (m *NewCredential) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePath(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRaw(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewCredential) validateCanonical(formats strfmt.Registry) error {
	if swag.IsZero(m.Canonical) { // not required
		return nil
	}

	if err := validate.MinLength("canonical", "body", m.Canonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", m.Canonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", m.Canonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *NewCredential) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewCredential) validatePath(formats strfmt.Registry) error {

	if err := validate.Required("path", "body", m.Path); err != nil {
		return err
	}

	if err := validate.Pattern("path", "body", *m.Path, `[a-zA-z0-9_\-./]`); err != nil {
		return err
	}

	return nil
}

func (m *NewCredential) validateRaw(formats strfmt.Registry) error {

	if err := validate.Required("raw", "body", m.Raw); err != nil {
		return err
	}

	if m.Raw != nil {
		if err := m.Raw.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

var newCredentialTypeTypePropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["ssh","aws","custom","azure","azure_storage","gcp","basic_auth","elasticsearch","swift","vmware"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newCredentialTypeTypePropEnum = append(newCredentialTypeTypePropEnum, v)
	}
}

const (

	// NewCredentialTypeSSH captures enum value "ssh"
	NewCredentialTypeSSH string = "ssh"

	// NewCredentialTypeAws captures enum value "aws"
	NewCredentialTypeAws string = "aws"

	// NewCredentialTypeCustom captures enum value "custom"
	NewCredentialTypeCustom string = "custom"

	// NewCredentialTypeAzure captures enum value "azure"
	NewCredentialTypeAzure string = "azure"

	// NewCredentialTypeAzureStorage captures enum value "azure_storage"
	NewCredentialTypeAzureStorage string = "azure_storage"

	// NewCredentialTypeGcp captures enum value "gcp"
	NewCredentialTypeGcp string = "gcp"

	// NewCredentialTypeBasicAuth captures enum value "basic_auth"
	NewCredentialTypeBasicAuth string = "basic_auth"

	// NewCredentialTypeElasticsearch captures enum value "elasticsearch"
	NewCredentialTypeElasticsearch string = "elasticsearch"

	// NewCredentialTypeSwift captures enum value "swift"
	NewCredentialTypeSwift string = "swift"

	// NewCredentialTypeVmware captures enum value "vmware"
	NewCredentialTypeVmware string = "vmware"
)

// prop value enum
func (m *NewCredential) validateTypeEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, newCredentialTypeTypePropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *NewCredential) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	// value enum
	if err := m.validateTypeEnum("type", "body", *m.Type); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this new credential based on the context it is used
func (m *NewCredential) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateRaw(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewCredential) contextValidateRaw(ctx context.Context, formats strfmt.Registry) error {

	if m.Raw != nil {

		if err := m.Raw.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("raw")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("raw")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewCredential) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewCredential) UnmarshalBinary(b []byte) error {
	var res NewCredential
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
