// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewInventoryResource New Inventory Resource
//
// The Resource of the Inventory representing an element of your infrastructure
// swagger:model NewInventoryResource
type NewInventoryResource struct {

	// The amount of cpu cores that it has in units
	// Minimum: 0
	CPU *uint64 `json:"cpu,omitempty"`

	// List of attributes (key value object) of the Resource, can be anything
	CustomAttributes interface{} `json:"custom_attributes,omitempty"`

	// A way to distinguish and categorize resources
	// Required: true
	Label *string `json:"label"`

	// The amount of memory that it has in MB
	// Minimum: 0
	Memory *uint64 `json:"memory,omitempty"`

	// The name of the resource
	// Required: true
	Name *string `json:"name"`

	// The provider of the created Resource
	// Required: true
	Provider *string `json:"provider"`

	// The amount of storage that it has in MB
	// Minimum: 0
	Storage *uint64 `json:"storage,omitempty"`

	// The type of the resource
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this new inventory resource
func (m *NewInventoryResource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLabel(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewInventoryResource) validateCPU(formats strfmt.Registry) error {

	if swag.IsZero(m.CPU) { // not required
		return nil
	}

	if err := validate.MinimumInt("cpu", "body", int64(*m.CPU), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateLabel(formats strfmt.Registry) error {

	if err := validate.Required("label", "body", m.Label); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateMemory(formats strfmt.Registry) error {

	if swag.IsZero(m.Memory) { // not required
		return nil
	}

	if err := validate.MinimumInt("memory", "body", int64(*m.Memory), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateProvider(formats strfmt.Registry) error {

	if err := validate.Required("provider", "body", m.Provider); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateStorage(formats strfmt.Registry) error {

	if swag.IsZero(m.Storage) { // not required
		return nil
	}

	if err := validate.MinimumInt("storage", "body", int64(*m.Storage), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *NewInventoryResource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewInventoryResource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewInventoryResource) UnmarshalBinary(b []byte) error {
	var res NewInventoryResource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
