// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewPipeline Create Pipeline
//
// The entity which represents a new pipeline to create in the application.
//
// swagger:model NewPipeline
type NewPipeline struct {

	// Validate credentials manager variables in the pipeline config.
	CheckCredentials bool `json:"check_credentials,omitempty"`

	// passed config
	PassedConfig string `json:"passed_config,omitempty"`

	// pipeline name
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-._]+[a-z0-9]+$
	PipelineName *string `json:"pipeline_name"`

	// yaml vars
	YamlVars string `json:"yaml_vars,omitempty"`
}

// Validate validates this new pipeline
func (m *NewPipeline) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validatePipelineName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewPipeline) validatePipelineName(formats strfmt.Registry) error {

	if err := validate.Required("pipeline_name", "body", m.PipelineName); err != nil {
		return err
	}

	if err := validate.MinLength("pipeline_name", "body", *m.PipelineName, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("pipeline_name", "body", *m.PipelineName, 100); err != nil {
		return err
	}

	if err := validate.Pattern("pipeline_name", "body", *m.PipelineName, `^[a-z0-9]+[a-z0-9\-._]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new pipeline based on context it is used
func (m *NewPipeline) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewPipeline) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewPipeline) UnmarshalBinary(b []byte) error {
	var res NewPipeline
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
