// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewServiceCatalogFromTemplate NewServiceCatalogFromTemplate
//
// # Represents the Service Catalog item
//
// swagger:model NewServiceCatalogFromTemplate
type NewServiceCatalogFromTemplate struct {

	// author
	Author string `json:"author,omitempty"`

	// canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// name
	// Required: true
	Name *string `json:"name"`

	// service catalog source canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	ServiceCatalogSourceCanonical *string `json:"service_catalog_source_canonical"`

	// Team responsible for the maintenance of the underlying service catalogs
	//
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	TeamCanonical string `json:"team_canonical,omitempty"`

	// use case
	// Required: true
	UseCase *string `json:"use_case"`

	// visibility
	Visibility string `json:"visibility,omitempty"`
}

// Validate validates this new service catalog from template
func (m *NewServiceCatalogFromTemplate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCatalogSourceCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewServiceCatalogFromTemplate) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", *m.Canonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", *m.Canonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", *m.Canonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *NewServiceCatalogFromTemplate) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *NewServiceCatalogFromTemplate) validateServiceCatalogSourceCanonical(formats strfmt.Registry) error {

	if err := validate.Required("service_catalog_source_canonical", "body", m.ServiceCatalogSourceCanonical); err != nil {
		return err
	}

	if err := validate.MinLength("service_catalog_source_canonical", "body", *m.ServiceCatalogSourceCanonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("service_catalog_source_canonical", "body", *m.ServiceCatalogSourceCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("service_catalog_source_canonical", "body", *m.ServiceCatalogSourceCanonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *NewServiceCatalogFromTemplate) validateTeamCanonical(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamCanonical) { // not required
		return nil
	}

	if err := validate.MinLength("team_canonical", "body", m.TeamCanonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("team_canonical", "body", m.TeamCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("team_canonical", "body", m.TeamCanonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *NewServiceCatalogFromTemplate) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("use_case", "body", m.UseCase); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new service catalog from template based on context it is used
func (m *NewServiceCatalogFromTemplate) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewServiceCatalogFromTemplate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewServiceCatalogFromTemplate) UnmarshalBinary(b []byte) error {
	var res NewServiceCatalogFromTemplate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
