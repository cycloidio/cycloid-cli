// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewWatchRuleFilter New Watch rule filter
//
// # The entity which represents the information of an Watch rule filter
//
// swagger:model NewWatchRuleFilter
type NewWatchRuleFilter struct {

	// * means the filter is applied to all the entities
	// Required: true
	Entity *string `json:"entity"`

	// * means the filter is applied to all the operations
	// Required: true
	Operation *string `json:"operation"`
}

// Validate validates this new watch rule filter
func (m *NewWatchRuleFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewWatchRuleFilter) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

func (m *NewWatchRuleFilter) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this new watch rule filter based on context it is used
func (m *NewWatchRuleFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *NewWatchRuleFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewWatchRuleFilter) UnmarshalBinary(b []byte) error {
	var res NewWatchRuleFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
