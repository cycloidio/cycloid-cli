// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"strconv"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Organization Organization
//
// The entity which holds all the direct information attached to an organization.
//
// swagger:model Organization
type Organization struct {

	// admins
	Admins []*MemberOrg `json:"admins"`

	// appearance
	Appearance *Appearance `json:"appearance,omitempty"`

	// blocked
	// Required: true
	Blocked []string `json:"blocked"`

	// can children create appearance
	// Required: true
	CanChildrenCreateAppearance *bool `json:"can_children_create_appearance"`

	// can children use dedicated authentication
	// Required: true
	CanChildrenUseDedicatedAuthentication *bool `json:"can_children_use_dedicated_authentication"`

	// can create appearance
	// Required: true
	CanCreateAppearance *bool `json:"can_create_appearance"`

	// can use dedicated authentication
	// Required: true
	CanUseDedicatedAuthentication *bool `json:"can_use_dedicated_authentication"`

	// canonical
	// Required: true
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// ci port
	// Required: true
	CiPort *string `json:"ci_port"`

	// ci team name
	// Required: true
	CiTeamName *string `json:"ci_team_name"`

	// ci url
	// Required: true
	CiURL *string `json:"ci_url"`

	// created at
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// has children
	// Required: true
	HasChildren *bool `json:"has_children"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// Defines if this organization is the root one on the platform or not
	// Required: true
	IsRoot *bool `json:"is_root"`

	// is using dedicated authentication
	// Required: true
	IsUsingDedicatedAuthentication *bool `json:"is_using_dedicated_authentication"`

	// mfa enabled
	// Required: true
	MfaEnabled *bool `json:"mfa_enabled"`

	// name
	// Required: true
	// Min Length: 3
	Name *string `json:"name"`

	// quotas
	// Required: true
	Quotas *bool `json:"quotas"`

	// subscription
	Subscription *Subscription `json:"subscription,omitempty"`

	// updated at
	// Required: true
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at"`
}

// Validate validates this organization
func (m *Organization) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAdmins(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateAppearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateBlocked(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanChildrenCreateAppearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanChildrenUseDedicatedAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanCreateAppearance(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanUseDedicatedAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiPort(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiTeamName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCiURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateHasChildren(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsRoot(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIsUsingDedicatedAuthentication(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfaEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateQuotas(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSubscription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) validateAdmins(formats strfmt.Registry) error {
	if swag.IsZero(m.Admins) { // not required
		return nil
	}

	for i := 0; i < len(m.Admins); i++ {
		if swag.IsZero(m.Admins[i]) { // not required
			continue
		}

		if m.Admins[i] != nil {
			if err := m.Admins[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("admins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("admins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Organization) validateAppearance(formats strfmt.Registry) error {
	if swag.IsZero(m.Appearance) { // not required
		return nil
	}

	if m.Appearance != nil {
		if err := m.Appearance.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appearance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appearance")
			}
			return err
		}
	}

	return nil
}

func (m *Organization) validateBlocked(formats strfmt.Registry) error {

	if err := validate.Required("blocked", "body", m.Blocked); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCanChildrenCreateAppearance(formats strfmt.Registry) error {

	if err := validate.Required("can_children_create_appearance", "body", m.CanChildrenCreateAppearance); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCanChildrenUseDedicatedAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("can_children_use_dedicated_authentication", "body", m.CanChildrenUseDedicatedAuthentication); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCanCreateAppearance(formats strfmt.Registry) error {

	if err := validate.Required("can_create_appearance", "body", m.CanCreateAppearance); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCanUseDedicatedAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("can_use_dedicated_authentication", "body", m.CanUseDedicatedAuthentication); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", *m.Canonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", *m.Canonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", *m.Canonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCiPort(formats strfmt.Registry) error {

	if err := validate.Required("ci_port", "body", m.CiPort); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCiTeamName(formats strfmt.Registry) error {

	if err := validate.Required("ci_team_name", "body", m.CiTeamName); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCiURL(formats strfmt.Registry) error {

	if err := validate.Required("ci_url", "body", m.CiURL); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumUint("created_at", "body", *m.CreatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateHasChildren(formats strfmt.Registry) error {

	if err := validate.Required("has_children", "body", m.HasChildren); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateIsRoot(formats strfmt.Registry) error {

	if err := validate.Required("is_root", "body", m.IsRoot); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateIsUsingDedicatedAuthentication(formats strfmt.Registry) error {

	if err := validate.Required("is_using_dedicated_authentication", "body", m.IsUsingDedicatedAuthentication); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateMfaEnabled(formats strfmt.Registry) error {

	if err := validate.Required("mfa_enabled", "body", m.MfaEnabled); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateQuotas(formats strfmt.Registry) error {

	if err := validate.Required("quotas", "body", m.Quotas); err != nil {
		return err
	}

	return nil
}

func (m *Organization) validateSubscription(formats strfmt.Registry) error {
	if swag.IsZero(m.Subscription) { // not required
		return nil
	}

	if m.Subscription != nil {
		if err := m.Subscription.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

func (m *Organization) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.MinimumUint("updated_at", "body", *m.UpdatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this organization based on the context it is used
func (m *Organization) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateAdmins(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateAppearance(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateSubscription(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Organization) contextValidateAdmins(ctx context.Context, formats strfmt.Registry) error {

	for i := 0; i < len(m.Admins); i++ {

		if m.Admins[i] != nil {

			if swag.IsZero(m.Admins[i]) { // not required
				return nil
			}

			if err := m.Admins[i].ContextValidate(ctx, formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("admins" + "." + strconv.Itoa(i))
				} else if ce, ok := err.(*errors.CompositeError); ok {
					return ce.ValidateName("admins" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Organization) contextValidateAppearance(ctx context.Context, formats strfmt.Registry) error {

	if m.Appearance != nil {

		if swag.IsZero(m.Appearance) { // not required
			return nil
		}

		if err := m.Appearance.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("appearance")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("appearance")
			}
			return err
		}
	}

	return nil
}

func (m *Organization) contextValidateSubscription(ctx context.Context, formats strfmt.Registry) error {

	if m.Subscription != nil {

		if swag.IsZero(m.Subscription) { // not required
			return nil
		}

		if err := m.Subscription.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("subscription")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("subscription")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Organization) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Organization) UnmarshalBinary(b []byte) error {
	var res Organization
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
