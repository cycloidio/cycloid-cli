// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PageConcourse PageConcourse
// swagger:model PageConcourse
type PageConcourse struct {

	// The maximum number of entities to return
	// Required: true
	Limit *int64 `json:"limit"`

	// Entities returned should have a higher timestamp than this one
	// Required: true
	Since *int64 `json:"since"`

	// Entities returned should have a lower timestamp than this one
	// Required: true
	Until *int64 `json:"until"`
}

// Validate validates this page concourse
func (m *PageConcourse) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateLimit(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSince(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUntil(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PageConcourse) validateLimit(formats strfmt.Registry) error {

	if err := validate.Required("limit", "body", m.Limit); err != nil {
		return err
	}

	return nil
}

func (m *PageConcourse) validateSince(formats strfmt.Registry) error {

	if err := validate.Required("since", "body", m.Since); err != nil {
		return err
	}

	return nil
}

func (m *PageConcourse) validateUntil(formats strfmt.Registry) error {

	if err := validate.Required("until", "body", m.Until); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PageConcourse) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PageConcourse) UnmarshalBinary(b []byte) error {
	var res PageConcourse
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
