// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
)

// PlanConfig PlanConfig
//
// The plan configuration when creating new build.
// swagger:model PlanConfig
type PlanConfig struct {

	// aggregate
	Aggregate []*PlanConfig `json:"aggregate"`

	// conditions
	Conditions []string `json:"conditions"`

	// do
	Do []*PlanConfig `json:"do"`

	// get
	Get string `json:"get,omitempty"`

	// params
	Params map[string]interface{} `json:"params,omitempty"`

	// passed
	Passed []string `json:"passed"`

	// privileged
	Privileged bool `json:"privileged,omitempty"`

	// put
	Put string `json:"put,omitempty"`

	// raw name
	RawName string `json:"raw_name,omitempty"`

	// raw trigger
	RawTrigger bool `json:"raw_trigger,omitempty"`

	// resource
	Resource string `json:"resource,omitempty"`

	// task
	Task string `json:"task,omitempty"`

	// task config
	TaskConfig *TaskConfig `json:"taskConfig,omitempty"`

	// task config path
	TaskConfigPath string `json:"taskConfigPath,omitempty"`
}

// Validate validates this plan config
func (m *PlanConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAggregate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDo(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTaskConfig(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PlanConfig) validateAggregate(formats strfmt.Registry) error {

	if swag.IsZero(m.Aggregate) { // not required
		return nil
	}

	for i := 0; i < len(m.Aggregate); i++ {
		if swag.IsZero(m.Aggregate[i]) { // not required
			continue
		}

		if m.Aggregate[i] != nil {
			if err := m.Aggregate[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("aggregate" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlanConfig) validateDo(formats strfmt.Registry) error {

	if swag.IsZero(m.Do) { // not required
		return nil
	}

	for i := 0; i < len(m.Do); i++ {
		if swag.IsZero(m.Do[i]) { // not required
			continue
		}

		if m.Do[i] != nil {
			if err := m.Do[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("do" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PlanConfig) validateTaskConfig(formats strfmt.Registry) error {

	if swag.IsZero(m.TaskConfig) { // not required
		return nil
	}

	if m.TaskConfig != nil {
		if err := m.TaskConfig.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("taskConfig")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PlanConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PlanConfig) UnmarshalBinary(b []byte) error {
	var res PlanConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
