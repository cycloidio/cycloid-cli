// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ProjectEnvironmentConfig Project Environment Config
//
// Representation of project's environment configuration done via the forms.
// The full forms file is returned, but the use-case picked has the
// Set variables matching the current configuration - if any.
//
// swagger:model ProjectEnvironmentConfig
type ProjectEnvironmentConfig struct {

	// forms
	// Required: true
	Forms FormsFile `json:"forms"`

	// The use case picked for that environment
	// Required: true
	UseCase *string `json:"use_case"`
}

// Validate validates this project environment config
func (m *ProjectEnvironmentConfig) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateForms(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ProjectEnvironmentConfig) validateForms(formats strfmt.Registry) error {

	if err := m.Forms.Validate(formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("forms")
		}
		return err
	}

	return nil
}

func (m *ProjectEnvironmentConfig) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("use_case", "body", m.UseCase); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ProjectEnvironmentConfig) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ProjectEnvironmentConfig) UnmarshalBinary(b []byte) error {
	var res ProjectEnvironmentConfig
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
