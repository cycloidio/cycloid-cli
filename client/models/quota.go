// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Quota Quota
//
// # A Quota holds the information of the restrictions applied to a Team having as source a Resource Pool
//
// swagger:model Quota
type Quota struct {

	// The amount of cpu that it has in units
	// Required: true
	// Minimum: 0
	CPU *uint64 `json:"cpu"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// The amount of memory that it has in MB
	// Required: true
	// Minimum: 0
	Memory *uint64 `json:"memory"`

	// resource pool
	// Required: true
	ResourcePool *ResourcePool `json:"resource_pool"`

	// The amount of storage that it has in MB
	// Required: true
	// Minimum: 0
	Storage *uint64 `json:"storage"`

	// team
	// Required: true
	Team *SimpleTeam `json:"team"`

	// The amount of CPU that is used in units
	// Required: true
	// Minimum: 0
	UsedCPU *uint64 `json:"used_cpu"`

	// The amount of memory that is used in MB
	// Required: true
	// Minimum: 0
	UsedMemory *uint64 `json:"used_memory"`

	// The amount of Storage that is used in MB
	// Required: true
	// Minimum: 0
	UsedStorage *uint64 `json:"used_storage"`
}

// Validate validates this quota
func (m *Quota) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResourcePool(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStorage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeam(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedCPU(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedMemory(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsedStorage(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Quota) validateCPU(formats strfmt.Registry) error {

	if err := validate.Required("cpu", "body", m.CPU); err != nil {
		return err
	}

	if err := validate.MinimumUint("cpu", "body", *m.CPU, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateMemory(formats strfmt.Registry) error {

	if err := validate.Required("memory", "body", m.Memory); err != nil {
		return err
	}

	if err := validate.MinimumUint("memory", "body", *m.Memory, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateResourcePool(formats strfmt.Registry) error {

	if err := validate.Required("resource_pool", "body", m.ResourcePool); err != nil {
		return err
	}

	if m.ResourcePool != nil {
		if err := m.ResourcePool.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_pool")
			}
			return err
		}
	}

	return nil
}

func (m *Quota) validateStorage(formats strfmt.Registry) error {

	if err := validate.Required("storage", "body", m.Storage); err != nil {
		return err
	}

	if err := validate.MinimumUint("storage", "body", *m.Storage, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateTeam(formats strfmt.Registry) error {

	if err := validate.Required("team", "body", m.Team); err != nil {
		return err
	}

	if m.Team != nil {
		if err := m.Team.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

func (m *Quota) validateUsedCPU(formats strfmt.Registry) error {

	if err := validate.Required("used_cpu", "body", m.UsedCPU); err != nil {
		return err
	}

	if err := validate.MinimumUint("used_cpu", "body", *m.UsedCPU, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateUsedMemory(formats strfmt.Registry) error {

	if err := validate.Required("used_memory", "body", m.UsedMemory); err != nil {
		return err
	}

	if err := validate.MinimumUint("used_memory", "body", *m.UsedMemory, 0, false); err != nil {
		return err
	}

	return nil
}

func (m *Quota) validateUsedStorage(formats strfmt.Registry) error {

	if err := validate.Required("used_storage", "body", m.UsedStorage); err != nil {
		return err
	}

	if err := validate.MinimumUint("used_storage", "body", *m.UsedStorage, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validate this quota based on the context it is used
func (m *Quota) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateResourcePool(ctx, formats); err != nil {
		res = append(res, err)
	}

	if err := m.contextValidateTeam(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Quota) contextValidateResourcePool(ctx context.Context, formats strfmt.Registry) error {

	if m.ResourcePool != nil {

		if err := m.ResourcePool.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("resource_pool")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("resource_pool")
			}
			return err
		}
	}

	return nil
}

func (m *Quota) contextValidateTeam(ctx context.Context, formats strfmt.Registry) error {

	if m.Team != nil {

		if err := m.Team.ContextValidate(ctx, formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("team")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("team")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Quota) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Quota) UnmarshalBinary(b []byte) error {
	var res Quota
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
