// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateComponent Update Component
//
// The entity which represents the information of a component to update.
//
// swagger:model UpdateComponent
type UpdateComponent struct {

	// description
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// use case
	// Required: true
	// Max Length: 100
	// Min Length: 1
	// Pattern: (^[a-z0-9]+(([a-z0-9\-_]+)?[a-z0-9]+)?$)
	UseCase *string `json:"use_case"`

	// vars
	Vars FormVariables `json:"vars,omitempty"`
}

// Validate validates this update component
func (m *UpdateComponent) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUseCase(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVars(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateComponent) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateComponent) validateUseCase(formats strfmt.Registry) error {

	if err := validate.Required("use_case", "body", m.UseCase); err != nil {
		return err
	}

	if err := validate.MinLength("use_case", "body", *m.UseCase, 1); err != nil {
		return err
	}

	if err := validate.MaxLength("use_case", "body", *m.UseCase, 100); err != nil {
		return err
	}

	if err := validate.Pattern("use_case", "body", *m.UseCase, `(^[a-z0-9]+(([a-z0-9\-_]+)?[a-z0-9]+)?$)`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateComponent) validateVars(formats strfmt.Registry) error {
	if swag.IsZero(m.Vars) { // not required
		return nil
	}

	if m.Vars != nil {
		if err := m.Vars.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("vars")
			} else if ce, ok := err.(*errors.CompositeError); ok {
				return ce.ValidateName("vars")
			}
			return err
		}
	}

	return nil
}

// ContextValidate validate this update component based on the context it is used
func (m *UpdateComponent) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	var res []error

	if err := m.contextValidateVars(ctx, formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateComponent) contextValidateVars(ctx context.Context, formats strfmt.Registry) error {

	if swag.IsZero(m.Vars) { // not required
		return nil
	}

	if err := m.Vars.ContextValidate(ctx, formats); err != nil {
		if ve, ok := err.(*errors.Validation); ok {
			return ve.ValidateName("vars")
		} else if ce, ok := err.(*errors.CompositeError); ok {
			return ce.ValidateName("vars")
		}
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateComponent) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateComponent) UnmarshalBinary(b []byte) error {
	var res UpdateComponent
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
