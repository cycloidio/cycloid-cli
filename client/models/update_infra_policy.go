// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateInfraPolicy Update InfraPolicy
//
// Update a policy to control operations across infrastructure.
//
// swagger:model UpdateInfraPolicy
type UpdateInfraPolicy struct {

	// The body field is the code in plain text that defines the rules for the policy.
	// Required: true
	Body *string `json:"body"`

	// description
	// Required: true
	Description *string `json:"description"`

	// enabled
	// Required: true
	Enabled *bool `json:"enabled"`

	// name
	// Required: true
	// Min Length: 3
	Name *string `json:"name"`

	// User canonical that owns this InfraPolicy. When a user is the
	// owner of an InfraPolicy it has all the permissions on it.
	// In the event where the Owner has been deleted then a new one can be assigned
	// or an empty canonical is allowed to not reset it.
	//
	// Required: true
	// Max Length: 100
	Owner *string `json:"owner"`

	// severity
	// Required: true
	// Enum: ["critical","warning","advisory"]
	Severity *string `json:"severity"`
}

// Validate validates this update infra policy
func (m *UpdateInfraPolicy) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBody(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateDescription(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOwner(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSeverity(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateInfraPolicy) validateBody(formats strfmt.Registry) error {

	if err := validate.Required("body", "body", m.Body); err != nil {
		return err
	}

	return nil
}

func (m *UpdateInfraPolicy) validateDescription(formats strfmt.Registry) error {

	if err := validate.Required("description", "body", m.Description); err != nil {
		return err
	}

	return nil
}

func (m *UpdateInfraPolicy) validateEnabled(formats strfmt.Registry) error {

	if err := validate.Required("enabled", "body", m.Enabled); err != nil {
		return err
	}

	return nil
}

func (m *UpdateInfraPolicy) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 3); err != nil {
		return err
	}

	return nil
}

func (m *UpdateInfraPolicy) validateOwner(formats strfmt.Registry) error {

	if err := validate.Required("owner", "body", m.Owner); err != nil {
		return err
	}

	if err := validate.MaxLength("owner", "body", *m.Owner, 100); err != nil {
		return err
	}

	return nil
}

var updateInfraPolicyTypeSeverityPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["critical","warning","advisory"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateInfraPolicyTypeSeverityPropEnum = append(updateInfraPolicyTypeSeverityPropEnum, v)
	}
}

const (

	// UpdateInfraPolicySeverityCritical captures enum value "critical"
	UpdateInfraPolicySeverityCritical string = "critical"

	// UpdateInfraPolicySeverityWarning captures enum value "warning"
	UpdateInfraPolicySeverityWarning string = "warning"

	// UpdateInfraPolicySeverityAdvisory captures enum value "advisory"
	UpdateInfraPolicySeverityAdvisory string = "advisory"
)

// prop value enum
func (m *UpdateInfraPolicy) validateSeverityEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateInfraPolicyTypeSeverityPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateInfraPolicy) validateSeverity(formats strfmt.Registry) error {

	if err := validate.Required("severity", "body", m.Severity); err != nil {
		return err
	}

	// value enum
	if err := m.validateSeverityEnum("severity", "body", *m.Severity); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update infra policy based on context it is used
func (m *UpdateInfraPolicy) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateInfraPolicy) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateInfraPolicy) UnmarshalBinary(b []byte) error {
	var res UpdateInfraPolicy
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
