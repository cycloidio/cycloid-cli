// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"
	"encoding/json"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateProject Update Project
//
// The entity which represents the information of the project to be updated.
//
// swagger:model UpdateProject
type UpdateProject struct {

	// The cloud provider canonical that this project is using - between the
	// supported ones.
	//
	// Enum: ["aws","google","azurerm","flexibleengine","openstack"]
	CloudProvider string `json:"cloud_provider,omitempty"`

	// color
	// Max Length: 64
	Color string `json:"color,omitempty"`

	// The config_repository_canonical points to new Config Repository the project
	// will be using. If this value is filled and it's different from the
	// current one, the whole project will be migrated to new CR, meaning
	// configuration files will also be moved.
	// If the project didn't have config_repository_canonical set, this action will
	// only attach the project to the CR, it won't create/move any files.
	// In order to be sure everything works, make sure the
	// config_repository_canonical is pointing at the CR with the same git
	// repository that was used during project creation.
	// Although the config_repository_canonical is not marked as required,
	// it's actually required for projects that are already using CR. This
	// field not being required is only for compatibility with older projects,
	// which are not having CR yet.
	//
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	ConfigRepositoryCanonical string `json:"config_repository_canonical,omitempty"`

	// description
	Description string `json:"description,omitempty"`

	// icon
	// Max Length: 64
	Icon string `json:"icon,omitempty"`

	// name
	// Required: true
	// Min Length: 1
	Name *string `json:"name"`

	// User canonical that owns this project. Only the owner or an
	// organization admin can update such a field. When a user is the owner
	// of a project it has all the permission on it.
	//
	Owner string `json:"owner,omitempty"`

	// This will be used to assert that the Project is in it's last updated form
	// because if not we could have inconsistencies with the environments. The
	// format is in seconds, basically UNIX format.
	//
	// Required: true
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at"`
}

// Validate validates this update project
func (m *UpdateProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateColor(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigRepositoryCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateIcon(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

var updateProjectTypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws","google","azurerm","flexibleengine","openstack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		updateProjectTypeCloudProviderPropEnum = append(updateProjectTypeCloudProviderPropEnum, v)
	}
}

const (

	// UpdateProjectCloudProviderAws captures enum value "aws"
	UpdateProjectCloudProviderAws string = "aws"

	// UpdateProjectCloudProviderGoogle captures enum value "google"
	UpdateProjectCloudProviderGoogle string = "google"

	// UpdateProjectCloudProviderAzurerm captures enum value "azurerm"
	UpdateProjectCloudProviderAzurerm string = "azurerm"

	// UpdateProjectCloudProviderFlexibleengine captures enum value "flexibleengine"
	UpdateProjectCloudProviderFlexibleengine string = "flexibleengine"

	// UpdateProjectCloudProviderOpenstack captures enum value "openstack"
	UpdateProjectCloudProviderOpenstack string = "openstack"
)

// prop value enum
func (m *UpdateProject) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.EnumCase(path, location, value, updateProjectTypeCloudProviderPropEnum, true); err != nil {
		return err
	}
	return nil
}

func (m *UpdateProject) validateCloudProvider(formats strfmt.Registry) error {
	if swag.IsZero(m.CloudProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProject) validateColor(formats strfmt.Registry) error {
	if swag.IsZero(m.Color) { // not required
		return nil
	}

	if err := validate.MaxLength("color", "body", m.Color, 64); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProject) validateConfigRepositoryCanonical(formats strfmt.Registry) error {
	if swag.IsZero(m.ConfigRepositoryCanonical) { // not required
		return nil
	}

	if err := validate.MinLength("config_repository_canonical", "body", m.ConfigRepositoryCanonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("config_repository_canonical", "body", m.ConfigRepositoryCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("config_repository_canonical", "body", m.ConfigRepositoryCanonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProject) validateIcon(formats strfmt.Registry) error {
	if swag.IsZero(m.Icon) { // not required
		return nil
	}

	if err := validate.MaxLength("icon", "body", m.Icon, 64); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProject) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", *m.Name, 1); err != nil {
		return err
	}

	return nil
}

func (m *UpdateProject) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	if err := validate.MinimumUint("updated_at", "body", *m.UpdatedAt, 0, false); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update project based on context it is used
func (m *UpdateProject) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateProject) UnmarshalBinary(b []byte) error {
	var res UpdateProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
