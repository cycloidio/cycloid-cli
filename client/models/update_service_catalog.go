// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateServiceCatalog UpdateServiceCatalog
//
// # Represents the Service Catalog item to be updated
//
// swagger:model UpdateServiceCatalog
type UpdateServiceCatalog struct {

	// Team responsible for the maintenance of the underlying service catalogs
	//
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	TeamCanonical string `json:"team_canonical,omitempty"`

	// visibility
	// Required: true
	Visibility *string `json:"visibility"`
}

// Validate validates this update service catalog
func (m *UpdateServiceCatalog) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateTeamCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVisibility(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateServiceCatalog) validateTeamCanonical(formats strfmt.Registry) error {
	if swag.IsZero(m.TeamCanonical) { // not required
		return nil
	}

	if err := validate.MinLength("team_canonical", "body", m.TeamCanonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("team_canonical", "body", m.TeamCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("team_canonical", "body", m.TeamCanonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateServiceCatalog) validateVisibility(formats strfmt.Registry) error {

	if err := validate.Required("visibility", "body", m.Visibility); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this update service catalog based on context it is used
func (m *UpdateServiceCatalog) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UpdateServiceCatalog) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateServiceCatalog) UnmarshalBinary(b []byte) error {
	var res UpdateServiceCatalog
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
