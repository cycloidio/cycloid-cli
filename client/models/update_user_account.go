// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UpdateUserAccount Update user's account
//
// The user's account information of the authenticated user to be updated. Emails and password can be omitted if they don't have to be updated, because we can now if they have been sent or not although go-swagger doesn't currently support `PATCH` updates (see [comment](https://github.com/cycloidio/youdeploy-http-api/pull/71#issuecomment-321894076)), we do for this one with this 2 properties because they are good for the user, specially for the `password_update` one. In order to detect if they have been sent or not, we check if the length of array of emails is 0 (if it's sent, then the length MUST be greater than 0 as specified with minItems) and in case of the `password_update` field if it's `nil` or not. If the 'picture_url' is not send then it's removed from the user as it implies that it has deleted it, and also because we do not support partial updates
// swagger:model UpdateUserAccount
type UpdateUserAccount struct {

	// emails
	// Min Items: 1
	Emails []*UpdateUserAccountEmail `json:"emails"`

	// family name
	// Required: true
	// Min Length: 2
	FamilyName *string `json:"family_name"`

	// given name
	// Required: true
	// Min Length: 2
	GivenName *string `json:"given_name"`

	// The local that the user prefer.
	// Required: true
	// Pattern: ^[a-z]{2}(?:-[a-z][a-z])?$
	Locale *string `json:"locale"`

	// password update
	PasswordUpdate *UpdateUserAccountPasswordUpdate `json:"password_update,omitempty"`

	// picture url
	// Format: uri
	PictureURL strfmt.URI `json:"picture_url,omitempty"`

	// username
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Username *string `json:"username"`
}

// Validate validates this update user account
func (m *UpdateUserAccount) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmails(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePasswordUpdate(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePictureURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserAccount) validateEmails(formats strfmt.Registry) error {

	if swag.IsZero(m.Emails) { // not required
		return nil
	}

	iEmailsSize := int64(len(m.Emails))

	if err := validate.MinItems("emails", "body", iEmailsSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Emails); i++ {
		if swag.IsZero(m.Emails[i]) { // not required
			continue
		}

		if m.Emails[i] != nil {
			if err := m.Emails[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("emails" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *UpdateUserAccount) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("family_name", "body", m.FamilyName); err != nil {
		return err
	}

	if err := validate.MinLength("family_name", "body", string(*m.FamilyName), 2); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserAccount) validateGivenName(formats strfmt.Registry) error {

	if err := validate.Required("given_name", "body", m.GivenName); err != nil {
		return err
	}

	if err := validate.MinLength("given_name", "body", string(*m.GivenName), 2); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserAccount) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if err := validate.Pattern("locale", "body", string(*m.Locale), `^[a-z]{2}(?:-[a-z][a-z])?$`); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserAccount) validatePasswordUpdate(formats strfmt.Registry) error {

	if swag.IsZero(m.PasswordUpdate) { // not required
		return nil
	}

	if m.PasswordUpdate != nil {
		if err := m.PasswordUpdate.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("password_update")
			}
			return err
		}
	}

	return nil
}

func (m *UpdateUserAccount) validatePictureURL(formats strfmt.Registry) error {

	if swag.IsZero(m.PictureURL) { // not required
		return nil
	}

	if err := validate.FormatOf("picture_url", "body", "uri", m.PictureURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserAccount) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", string(*m.Username), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", string(*m.Username), 30); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", string(*m.Username), `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUserAccount) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUserAccount) UnmarshalBinary(b []byte) error {
	var res UpdateUserAccount
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// UpdateUserAccountPasswordUpdate The update password requires to confirm the old password.
// swagger:model UpdateUserAccountPasswordUpdate
type UpdateUserAccountPasswordUpdate struct {

	// current
	// Required: true
	// Min Length: 8
	// Format: password
	Current *strfmt.Password `json:"current"`

	// new
	// Required: true
	// Min Length: 8
	// Format: password
	New *strfmt.Password `json:"new"`
}

// Validate validates this update user account password update
func (m *UpdateUserAccountPasswordUpdate) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCurrent(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateNew(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UpdateUserAccountPasswordUpdate) validateCurrent(formats strfmt.Registry) error {

	if err := validate.Required("password_update"+"."+"current", "body", m.Current); err != nil {
		return err
	}

	if err := validate.MinLength("password_update"+"."+"current", "body", string(*m.Current), 8); err != nil {
		return err
	}

	if err := validate.FormatOf("password_update"+"."+"current", "body", "password", m.Current.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UpdateUserAccountPasswordUpdate) validateNew(formats strfmt.Registry) error {

	if err := validate.Required("password_update"+"."+"new", "body", m.New); err != nil {
		return err
	}

	if err := validate.MinLength("password_update"+"."+"new", "body", string(*m.New), 8); err != nil {
		return err
	}

	if err := validate.FormatOf("password_update"+"."+"new", "body", "password", m.New.String(), formats); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *UpdateUserAccountPasswordUpdate) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UpdateUserAccountPasswordUpdate) UnmarshalBinary(b []byte) error {
	var res UpdateUserAccountPasswordUpdate
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
