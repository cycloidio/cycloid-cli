// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// User Basic info of a user
//
// A summary of a user to be used in places where only the basic information are need or are enough.
// swagger:model User
type User struct {

	// Code of a country the user is from
	// Pattern: ^[A-Z]{2}$
	CountryCode string `json:"country_code,omitempty"`

	// When the user became a member.
	// Required: true
	// Minimum: 0
	CreatedAt *uint64 `json:"created_at"`

	// User's primary email.
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// family name
	// Required: true
	// Min Length: 2
	FamilyName *string `json:"family_name"`

	// given name
	// Required: true
	// Min Length: 2
	GivenName *string `json:"given_name"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// When the user logged in last time.
	// Minimum: 0
	LastLoginAt *uint64 `json:"last_login_at,omitempty"`

	// The local that the user prefer.
	// Required: true
	// Pattern: ^[a-z]{2}(?:-[a-z][a-z])?$
	Locale *string `json:"locale"`

	// mfa enabled
	// Required: true
	MfaEnabled *bool `json:"mfa_enabled"`

	// picture url
	// Format: uri
	PictureURL strfmt.URI `json:"picture_url,omitempty"`

	// When the user had the role modified.
	// Minimum: 0
	UpdatedAt *uint64 `json:"updated_at,omitempty"`

	// username
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Username *string `json:"username"`
}

// Validate validates this user
func (m *User) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCountryCode(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateFamilyName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGivenName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLastLoginAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateLocale(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMfaEnabled(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePictureURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUsername(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *User) validateCountryCode(formats strfmt.Registry) error {

	if swag.IsZero(m.CountryCode) { // not required
		return nil
	}

	if err := validate.Pattern("country_code", "body", string(m.CountryCode), `^[A-Z]{2}$`); err != nil {
		return err
	}

	return nil
}

func (m *User) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	if err := validate.MinimumInt("created_at", "body", int64(*m.CreatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateFamilyName(formats strfmt.Registry) error {

	if err := validate.Required("family_name", "body", m.FamilyName); err != nil {
		return err
	}

	if err := validate.MinLength("family_name", "body", string(*m.FamilyName), 2); err != nil {
		return err
	}

	return nil
}

func (m *User) validateGivenName(formats strfmt.Registry) error {

	if err := validate.Required("given_name", "body", m.GivenName); err != nil {
		return err
	}

	if err := validate.MinLength("given_name", "body", string(*m.GivenName), 2); err != nil {
		return err
	}

	return nil
}

func (m *User) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumInt("id", "body", int64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLastLoginAt(formats strfmt.Registry) error {

	if swag.IsZero(m.LastLoginAt) { // not required
		return nil
	}

	if err := validate.MinimumInt("last_login_at", "body", int64(*m.LastLoginAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateLocale(formats strfmt.Registry) error {

	if err := validate.Required("locale", "body", m.Locale); err != nil {
		return err
	}

	if err := validate.Pattern("locale", "body", string(*m.Locale), `^[a-z]{2}(?:-[a-z][a-z])?$`); err != nil {
		return err
	}

	return nil
}

func (m *User) validateMfaEnabled(formats strfmt.Registry) error {

	if err := validate.Required("mfa_enabled", "body", m.MfaEnabled); err != nil {
		return err
	}

	return nil
}

func (m *User) validatePictureURL(formats strfmt.Registry) error {

	if swag.IsZero(m.PictureURL) { // not required
		return nil
	}

	if err := validate.FormatOf("picture_url", "body", "uri", m.PictureURL.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUpdatedAt(formats strfmt.Registry) error {

	if swag.IsZero(m.UpdatedAt) { // not required
		return nil
	}

	if err := validate.MinimumInt("updated_at", "body", int64(*m.UpdatedAt), 0, false); err != nil {
		return err
	}

	return nil
}

func (m *User) validateUsername(formats strfmt.Registry) error {

	if err := validate.Required("username", "body", m.Username); err != nil {
		return err
	}

	if err := validate.MinLength("username", "body", string(*m.Username), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("username", "body", string(*m.Username), 30); err != nil {
		return err
	}

	if err := validate.Pattern("username", "body", string(*m.Username), `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *User) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *User) UnmarshalBinary(b []byte) error {
	var res User
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
