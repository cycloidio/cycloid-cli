// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// UserLogin Log in
//
// Validate the user to access to the application. The user can login with the primary email address.
//
// swagger:model UserLogin
type UserLogin struct {

	// email
	// Required: true
	// Format: email
	Email *strfmt.Email `json:"email"`

	// organization canonical
	// Max Length: 100
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	OrganizationCanonical string `json:"organization_canonical,omitempty"`

	// password
	// Required: true
	// Min Length: 8
	// Format: password
	Password *strfmt.Password `json:"password"`
}

// Validate validates this user login
func (m *UserLogin) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEmail(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOrganizationCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePassword(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *UserLogin) validateEmail(formats strfmt.Registry) error {

	if err := validate.Required("email", "body", m.Email); err != nil {
		return err
	}

	if err := validate.FormatOf("email", "body", "email", m.Email.String(), formats); err != nil {
		return err
	}

	return nil
}

func (m *UserLogin) validateOrganizationCanonical(formats strfmt.Registry) error {
	if swag.IsZero(m.OrganizationCanonical) { // not required
		return nil
	}

	if err := validate.MinLength("organization_canonical", "body", m.OrganizationCanonical, 3); err != nil {
		return err
	}

	if err := validate.MaxLength("organization_canonical", "body", m.OrganizationCanonical, 100); err != nil {
		return err
	}

	if err := validate.Pattern("organization_canonical", "body", m.OrganizationCanonical, `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *UserLogin) validatePassword(formats strfmt.Registry) error {

	if err := validate.Required("password", "body", m.Password); err != nil {
		return err
	}

	if err := validate.MinLength("password", "body", m.Password.String(), 8); err != nil {
		return err
	}

	if err := validate.FormatOf("password", "body", "password", m.Password.String(), formats); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this user login based on context it is used
func (m *UserLogin) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *UserLogin) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *UserLogin) UnmarshalBinary(b []byte) error {
	var res UserLogin
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
