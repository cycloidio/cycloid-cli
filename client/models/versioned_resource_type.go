// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// VersionedResourceType VersionedResourceType
//
// The versioned resources type.
// swagger:model VersionedResourceType
type VersionedResourceType struct {

	// id
	// Required: true
	ID *uint32 `json:"id"`

	// name
	// Required: true
	Name *string `json:"name"`

	// privileged
	// Required: true
	Privileged *bool `json:"privileged"`

	// source
	// Required: true
	Source map[string]interface{} `json:"source"`

	// tags
	// Required: true
	Tags map[string]string `json:"tags"`

	// type
	// Required: true
	Type *string `json:"type"`

	// version
	// Required: true
	Version map[string]string `json:"version"`
}

// Validate validates this versioned resource type
func (m *VersionedResourceType) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePrivileged(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateSource(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTags(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *VersionedResourceType) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *VersionedResourceType) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *VersionedResourceType) validatePrivileged(formats strfmt.Registry) error {

	if err := validate.Required("privileged", "body", m.Privileged); err != nil {
		return err
	}

	return nil
}

func (m *VersionedResourceType) validateSource(formats strfmt.Registry) error {

	for k := range m.Source {

		if err := validate.Required("source"+"."+k, "body", m.Source[k]); err != nil {
			return err
		}

		if err := validate.Required("source"+"."+k, "body", m.Source[k]); err != nil {
			return err
		}

	}

	return nil
}

func (m *VersionedResourceType) validateTags(formats strfmt.Registry) error {

	return nil
}

func (m *VersionedResourceType) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

func (m *VersionedResourceType) validateVersion(formats strfmt.Registry) error {

	return nil
}

// MarshalBinary interface implementation
func (m *VersionedResourceType) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *VersionedResourceType) UnmarshalBinary(b []byte) error {
	var res VersionedResourceType
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
