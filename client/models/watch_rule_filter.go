// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/strfmt"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// WatchRuleFilter Watch rule filter
//
// # The entity which represents the information of a Watch rule filter
//
// swagger:model WatchRuleFilter
type WatchRuleFilter struct {

	// created at
	// Required: true
	CreatedAt *uint64 `json:"created_at"`

	// * means the filter is applied to all the entities
	// Required: true
	Entity *string `json:"entity"`

	// id
	// Required: true
	// Minimum: 1
	ID *uint32 `json:"id"`

	// * means the filter is applied to all the operations
	// Required: true
	Operation *string `json:"operation"`

	// updated at
	// Required: true
	UpdatedAt *uint64 `json:"updated_at"`
}

// Validate validates this watch rule filter
func (m *WatchRuleFilter) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCreatedAt(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEntity(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateOperation(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUpdatedAt(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *WatchRuleFilter) validateCreatedAt(formats strfmt.Registry) error {

	if err := validate.Required("created_at", "body", m.CreatedAt); err != nil {
		return err
	}

	return nil
}

func (m *WatchRuleFilter) validateEntity(formats strfmt.Registry) error {

	if err := validate.Required("entity", "body", m.Entity); err != nil {
		return err
	}

	return nil
}

func (m *WatchRuleFilter) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	if err := validate.MinimumUint("id", "body", uint64(*m.ID), 1, false); err != nil {
		return err
	}

	return nil
}

func (m *WatchRuleFilter) validateOperation(formats strfmt.Registry) error {

	if err := validate.Required("operation", "body", m.Operation); err != nil {
		return err
	}

	return nil
}

func (m *WatchRuleFilter) validateUpdatedAt(formats strfmt.Registry) error {

	if err := validate.Required("updated_at", "body", m.UpdatedAt); err != nil {
		return err
	}

	return nil
}

// ContextValidate validates this watch rule filter based on context it is used
func (m *WatchRuleFilter) ContextValidate(ctx context.Context, formats strfmt.Registry) error {
	return nil
}

// MarshalBinary interface implementation
func (m *WatchRuleFilter) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *WatchRuleFilter) UnmarshalBinary(b []byte) error {
	var res WatchRuleFilter
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
