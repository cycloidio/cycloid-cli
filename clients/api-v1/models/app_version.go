// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// AppVersion AppVersion
// swagger:model AppVersion
type AppVersion struct {

	// The Git branch used to build the application.
	// Required: true
	// Min Length: 1
	Branch *string `json:"branch"`

	// The Git revision used to build the application.
	// Required: true
	// Max Length: 40
	// Min Length: 8
	Revision *string `json:"revision"`

	// The version of the application.
	// Required: true
	// Min Length: 5
	Version *string `json:"version"`
}

// Validate validates this app version
func (m *AppVersion) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBranch(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateRevision(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *AppVersion) validateBranch(formats strfmt.Registry) error {

	if err := validate.Required("branch", "body", m.Branch); err != nil {
		return err
	}

	if err := validate.MinLength("branch", "body", string(*m.Branch), 1); err != nil {
		return err
	}

	return nil
}

func (m *AppVersion) validateRevision(formats strfmt.Registry) error {

	if err := validate.Required("revision", "body", m.Revision); err != nil {
		return err
	}

	if err := validate.MinLength("revision", "body", string(*m.Revision), 8); err != nil {
		return err
	}

	if err := validate.MaxLength("revision", "body", string(*m.Revision), 40); err != nil {
		return err
	}

	return nil
}

func (m *AppVersion) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	if err := validate.MinLength("version", "body", string(*m.Version), 5); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *AppVersion) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *AppVersion) UnmarshalBinary(b []byte) error {
	var res AppVersion
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
