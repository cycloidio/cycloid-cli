// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Costs Costs
//
// This object contains the items described in the Output of the GetCostAndUsage method from the AWS go-sdk described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#GetCostAndUsageOutput It also contains 2 extra elements: total and unit - in order to return that pre- calculated.
// swagger:model Costs
type Costs struct {

	// group definitions
	// Required: true
	GroupDefinitions []*CostGroupDefinitions `json:"group_definitions"`

	// results by time
	// Required: true
	ResultsByTime []*CostResultByTime `json:"results_by_time"`

	// total
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[0-9]+.[0-9]+$
	Total *string `json:"total"`

	// unit
	// Required: true
	// Max Length: 3
	// Min Length: 2
	// Pattern: ^[A-Z]+$
	Unit *string `json:"unit"`
}

// Validate validates this costs
func (m *Costs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateGroupDefinitions(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateResultsByTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Costs) validateGroupDefinitions(formats strfmt.Registry) error {

	if err := validate.Required("group_definitions", "body", m.GroupDefinitions); err != nil {
		return err
	}

	for i := 0; i < len(m.GroupDefinitions); i++ {
		if swag.IsZero(m.GroupDefinitions[i]) { // not required
			continue
		}

		if m.GroupDefinitions[i] != nil {
			if err := m.GroupDefinitions[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("group_definitions" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Costs) validateResultsByTime(formats strfmt.Registry) error {

	if err := validate.Required("results_by_time", "body", m.ResultsByTime); err != nil {
		return err
	}

	for i := 0; i < len(m.ResultsByTime); i++ {
		if swag.IsZero(m.ResultsByTime[i]) { // not required
			continue
		}

		if m.ResultsByTime[i] != nil {
			if err := m.ResultsByTime[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("results_by_time" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *Costs) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	if err := validate.MinLength("total", "body", string(*m.Total), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("total", "body", string(*m.Total), 30); err != nil {
		return err
	}

	if err := validate.Pattern("total", "body", string(*m.Total), `^[0-9]+.[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *Costs) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.MinLength("unit", "body", string(*m.Unit), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("unit", "body", string(*m.Unit), 3); err != nil {
		return err
	}

	if err := validate.Pattern("unit", "body", string(*m.Unit), `^[A-Z]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Costs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Costs) UnmarshalBinary(b []byte) error {
	var res Costs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
