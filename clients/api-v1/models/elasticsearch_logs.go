// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"bytes"
	"encoding/json"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// ElasticsearchLogs Representation of Elasticsearch logs for external backend.
//
// swagger:model ElasticsearchLogs
type ElasticsearchLogs struct {

	// It's an object where the key is the 'environment' and the value
	// another object where the key is the 'source-name' and value a Source.
	//
	// Required: true
	Sources map[string]map[string]ElasticsearchLogsSourcesAnon `json:"sources"`

	// List of the URLs
	//
	// Required: true
	Urls []string `json:"urls"`

	// Only 7 is supported
	//
	// Required: true
	Version *string `json:"version"`
}

// Engine gets the engine of this subtype
func (m *ElasticsearchLogs) Engine() string {
	return "ElasticsearchLogs"
}

// SetEngine sets the engine of this subtype
func (m *ElasticsearchLogs) SetEngine(val string) {

}

// Sources gets the sources of this subtype

// Urls gets the urls of this subtype

// Version gets the version of this subtype

// UnmarshalJSON unmarshals this object with a polymorphic type from a JSON structure
func (m *ElasticsearchLogs) UnmarshalJSON(raw []byte) error {
	var data struct {

		// It's an object where the key is the 'environment' and the value
		// another object where the key is the 'source-name' and value a Source.
		//
		// Required: true
		Sources map[string]map[string]ElasticsearchLogsSourcesAnon `json:"sources"`

		// List of the URLs
		//
		// Required: true
		Urls []string `json:"urls"`

		// Only 7 is supported
		//
		// Required: true
		Version *string `json:"version"`
	}
	buf := bytes.NewBuffer(raw)
	dec := json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&data); err != nil {
		return err
	}

	var base struct {
		/* Just the base type fields. Used for unmashalling polymorphic types.*/

		Engine string `json:"engine"`
	}
	buf = bytes.NewBuffer(raw)
	dec = json.NewDecoder(buf)
	dec.UseNumber()

	if err := dec.Decode(&base); err != nil {
		return err
	}

	var result ElasticsearchLogs

	if base.Engine != result.Engine() {
		/* Not the type we're looking for. */
		return errors.New(422, "invalid engine value: %q", base.Engine)
	}

	result.Sources = data.Sources

	result.Urls = data.Urls

	result.Version = data.Version

	*m = result

	return nil
}

// MarshalJSON marshals this object with a polymorphic type to a JSON structure
func (m ElasticsearchLogs) MarshalJSON() ([]byte, error) {
	var b1, b2, b3 []byte
	var err error
	b1, err = json.Marshal(struct {

		// It's an object where the key is the 'environment' and the value
		// another object where the key is the 'source-name' and value a Source.
		//
		// Required: true
		Sources map[string]map[string]ElasticsearchLogsSourcesAnon `json:"sources"`

		// List of the URLs
		//
		// Required: true
		Urls []string `json:"urls"`

		// Only 7 is supported
		//
		// Required: true
		Version *string `json:"version"`
	}{

		Sources: m.Sources,

		Urls: m.Urls,

		Version: m.Version,
	},
	)
	if err != nil {
		return nil, err
	}
	b2, err = json.Marshal(struct {
		Engine string `json:"engine"`
	}{

		Engine: m.Engine(),
	},
	)
	if err != nil {
		return nil, err
	}

	return swag.ConcatJSON(b1, b2, b3), nil
}

// Validate validates this elasticsearch logs
func (m *ElasticsearchLogs) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateSources(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUrls(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchLogs) validateSources(formats strfmt.Registry) error {

	for k := range m.Sources {

		if err := validate.Required("sources"+"."+k, "body", m.Sources[k]); err != nil {
			return err
		}

		for kk := range m.Sources[k] {

			if err := validate.Required("sources"+"."+k+"."+kk, "body", m.Sources[k][kk]); err != nil {
				return err
			}
			if val, ok := m.Sources[k][kk]; ok {
				if err := val.Validate(formats); err != nil {
					return err
				}
			}

		}

	}

	return nil
}

func (m *ElasticsearchLogs) validateUrls(formats strfmt.Registry) error {

	if err := validate.Required("urls", "body", m.Urls); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchLogs) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchLogs) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchLogs) UnmarshalBinary(b []byte) error {
	var res ElasticsearchLogs
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ElasticsearchLogsSourcesAnon elasticsearch logs sources anon
// swagger:model ElasticsearchLogsSourcesAnon
type ElasticsearchLogsSourcesAnon struct {

	// Index to use
	//
	Index string `json:"index,omitempty"`

	// mapping
	Mapping *ElasticsearchLogsSourcesAnonMapping `json:"mapping,omitempty"`

	// JSON representing the prefilters to apply to the index to get
	// the specific values.
	//
	Prefilters interface{} `json:"prefilters,omitempty"`

	// List of URLs to override the main URL defined
	//
	Urls []string `json:"urls"`
}

// Validate validates this elasticsearch logs sources anon
func (m *ElasticsearchLogsSourcesAnon) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateMapping(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchLogsSourcesAnon) validateMapping(formats strfmt.Registry) error {

	if swag.IsZero(m.Mapping) { // not required
		return nil
	}

	if m.Mapping != nil {
		if err := m.Mapping.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("mapping")
			}
			return err
		}
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchLogsSourcesAnon) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchLogsSourcesAnon) UnmarshalBinary(b []byte) error {
	var res ElasticsearchLogsSourcesAnon
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}

// ElasticsearchLogsSourcesAnonMapping Object with the mapping to know which attributes are the ones
// we have to map to the ones we want
//
// swagger:model ElasticsearchLogsSourcesAnonMapping
type ElasticsearchLogsSourcesAnonMapping struct {

	// The Host of the log
	//
	// Required: true
	Host *string `json:"host"`

	// The Message the user wants to show
	//
	// Required: true
	Message *string `json:"message"`

	// The Timestamp of the log
	//
	// Required: true
	Timestamp *string `json:"timestamp"`
}

// Validate validates this elasticsearch logs sources anon mapping
func (m *ElasticsearchLogsSourcesAnonMapping) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateHost(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMessage(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTimestamp(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *ElasticsearchLogsSourcesAnonMapping) validateHost(formats strfmt.Registry) error {

	if err := validate.Required("mapping"+"."+"host", "body", m.Host); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchLogsSourcesAnonMapping) validateMessage(formats strfmt.Registry) error {

	if err := validate.Required("mapping"+"."+"message", "body", m.Message); err != nil {
		return err
	}

	return nil
}

func (m *ElasticsearchLogsSourcesAnonMapping) validateTimestamp(formats strfmt.Registry) error {

	if err := validate.Required("mapping"+"."+"timestamp", "body", m.Timestamp); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *ElasticsearchLogsSourcesAnonMapping) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *ElasticsearchLogsSourcesAnonMapping) UnmarshalBinary(b []byte) error {
	var res ElasticsearchLogsSourcesAnonMapping
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
