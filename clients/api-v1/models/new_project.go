// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// NewProject Create Project
//
// The entity which represents the information of a new project.
// swagger:model NewProject
type NewProject struct {

	// canonical
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$
	Canonical *string `json:"canonical"`

	// The cloud provider canonical that this project is using - between the
	// supported ones.
	//
	// Enum: [aws google azurerm flexibleengine openstack]
	CloudProvider string `json:"cloud_provider,omitempty"`

	// config repository id
	// Required: true
	ConfigRepositoryID *uint32 `json:"config_repository_id"`

	// A description regarding the project to help identify/remember details,
	// implementation, purpose, etc.
	//
	Description string `json:"description,omitempty"`

	// name
	// Required: true
	// Min Length: 3
	Name *string `json:"name"`

	// User canonical that owns this project. If omitted then the person
	// creating this project will be assigned as owner. When a user is the
	// owner of a project it has all the permissions on it.
	//
	Owner string `json:"owner,omitempty"`

	// pipelines
	// Required: true
	// Min Items: 1
	Pipelines []*NewPipeline `json:"pipelines"`

	// It's the ref of the Service Catalog, like 'cycloidio:stack-magento'
	// Required: true
	ServiceCatalogRef *string `json:"service_catalog_ref"`
}

// Validate validates this new project
func (m *NewProject) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateCanonical(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateCloudProvider(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateConfigRepositoryID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePipelines(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateServiceCatalogRef(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *NewProject) validateCanonical(formats strfmt.Registry) error {

	if err := validate.Required("canonical", "body", m.Canonical); err != nil {
		return err
	}

	if err := validate.MinLength("canonical", "body", string(*m.Canonical), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("canonical", "body", string(*m.Canonical), 30); err != nil {
		return err
	}

	if err := validate.Pattern("canonical", "body", string(*m.Canonical), `^[a-z0-9]+[a-z0-9\-_]+[a-z0-9]+$`); err != nil {
		return err
	}

	return nil
}

var newProjectTypeCloudProviderPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["aws","google","azurerm","flexibleengine","openstack"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		newProjectTypeCloudProviderPropEnum = append(newProjectTypeCloudProviderPropEnum, v)
	}
}

const (

	// NewProjectCloudProviderAws captures enum value "aws"
	NewProjectCloudProviderAws string = "aws"

	// NewProjectCloudProviderGoogle captures enum value "google"
	NewProjectCloudProviderGoogle string = "google"

	// NewProjectCloudProviderAzurerm captures enum value "azurerm"
	NewProjectCloudProviderAzurerm string = "azurerm"

	// NewProjectCloudProviderFlexibleengine captures enum value "flexibleengine"
	NewProjectCloudProviderFlexibleengine string = "flexibleengine"

	// NewProjectCloudProviderOpenstack captures enum value "openstack"
	NewProjectCloudProviderOpenstack string = "openstack"
)

// prop value enum
func (m *NewProject) validateCloudProviderEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, newProjectTypeCloudProviderPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *NewProject) validateCloudProvider(formats strfmt.Registry) error {

	if swag.IsZero(m.CloudProvider) { // not required
		return nil
	}

	// value enum
	if err := m.validateCloudProviderEnum("cloud_provider", "body", m.CloudProvider); err != nil {
		return err
	}

	return nil
}

func (m *NewProject) validateConfigRepositoryID(formats strfmt.Registry) error {

	if err := validate.Required("config_repository_id", "body", m.ConfigRepositoryID); err != nil {
		return err
	}

	return nil
}

func (m *NewProject) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	if err := validate.MinLength("name", "body", string(*m.Name), 3); err != nil {
		return err
	}

	return nil
}

func (m *NewProject) validatePipelines(formats strfmt.Registry) error {

	if err := validate.Required("pipelines", "body", m.Pipelines); err != nil {
		return err
	}

	iPipelinesSize := int64(len(m.Pipelines))

	if err := validate.MinItems("pipelines", "body", iPipelinesSize, 1); err != nil {
		return err
	}

	for i := 0; i < len(m.Pipelines); i++ {
		if swag.IsZero(m.Pipelines[i]) { // not required
			continue
		}

		if m.Pipelines[i] != nil {
			if err := m.Pipelines[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("pipelines" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *NewProject) validateServiceCatalogRef(formats strfmt.Registry) error {

	if err := validate.Required("service_catalog_ref", "body", m.ServiceCatalogRef); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *NewProject) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *NewProject) UnmarshalBinary(b []byte) error {
	var res NewProject
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
