// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Resource Resouce
//
// The entity which represents a resource in the application.
// swagger:model Resource
type Resource struct {

	// check error
	CheckError string `json:"check_error,omitempty"`

	// check setup error
	CheckSetupError string `json:"check_setup_error,omitempty"`

	// failing to check
	FailingToCheck bool `json:"failing_to_check,omitempty"`

	// icon
	Icon string `json:"icon,omitempty"`

	// last checked
	LastChecked int64 `json:"last_checked,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pin comment
	PinComment string `json:"pin_comment,omitempty"`

	// pinned in config
	PinnedInConfig bool `json:"pinned_in_config,omitempty"`

	// pinned version
	PinnedVersion map[string]string `json:"pinned_version,omitempty"`

	// type
	// Required: true
	Type *string `json:"type"`
}

// Validate validates this resource
func (m *Resource) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateType(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Resource) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Resource) validateType(formats strfmt.Registry) error {

	if err := validate.Required("type", "body", m.Type); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Resource) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Resource) UnmarshalBinary(b []byte) error {
	var res Resource
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
