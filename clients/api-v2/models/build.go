// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Build Build
//
// The information relative to a build.
// swagger:model Build
type Build struct {

	// api url
	// Required: true
	APIURL *string `json:"api_url"`

	// end time
	EndTime int64 `json:"end_time,omitempty"`

	// id
	// Required: true
	ID *uint64 `json:"id"`

	// job name
	JobName string `json:"job_name,omitempty"`

	// name
	// Required: true
	Name *string `json:"name"`

	// pipeline name
	PipelineName string `json:"pipeline_name,omitempty"`

	// reap time
	ReapTime int64 `json:"reap_time,omitempty"`

	// start time
	StartTime int64 `json:"start_time,omitempty"`

	// status
	// Required: true
	Status *string `json:"status"`

	// team name
	// Required: true
	TeamName *string `json:"team_name"`
}

// Validate validates this build
func (m *Build) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAPIURL(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTeamName(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Build) validateAPIURL(formats strfmt.Registry) error {

	if err := validate.Required("api_url", "body", m.APIURL); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateID(formats strfmt.Registry) error {

	if err := validate.Required("id", "body", m.ID); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	return nil
}

func (m *Build) validateTeamName(formats strfmt.Registry) error {

	if err := validate.Required("team_name", "body", m.TeamName); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Build) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Build) UnmarshalBinary(b []byte) error {
	var res Build
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
