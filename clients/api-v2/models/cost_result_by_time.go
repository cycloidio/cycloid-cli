// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostResultByTime CostResultByTime
//
// This object contains the items described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#ResultByTime It is basically containing information about the cost per group(s) and per granularity (daily/monthy) over the periode of time selected. The total and unit fields have bee modified to fit our requirements, while the groups hold the information about each iteration over the time range.
// swagger:model CostResultByTime
type CostResultByTime struct {

	// estimated
	// Required: true
	Estimated *bool `json:"estimated"`

	// groups
	// Required: true
	Groups []*CostGroup `json:"groups"`

	// period
	// Required: true
	Period *CostTimePeriode `json:"period"`

	// total
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[0-9]+.[0-9]+$
	Total *string `json:"total"`

	// unit
	// Required: true
	// Max Length: 3
	// Min Length: 2
	// Pattern: ^[a-zA-Z]+$
	Unit *string `json:"unit"`
}

// Validate validates this cost result by time
func (m *CostResultByTime) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateEstimated(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateGroups(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePeriod(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateTotal(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostResultByTime) validateEstimated(formats strfmt.Registry) error {

	if err := validate.Required("estimated", "body", m.Estimated); err != nil {
		return err
	}

	return nil
}

func (m *CostResultByTime) validateGroups(formats strfmt.Registry) error {

	if err := validate.Required("groups", "body", m.Groups); err != nil {
		return err
	}

	for i := 0; i < len(m.Groups); i++ {
		if swag.IsZero(m.Groups[i]) { // not required
			continue
		}

		if m.Groups[i] != nil {
			if err := m.Groups[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("groups" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *CostResultByTime) validatePeriod(formats strfmt.Registry) error {

	if err := validate.Required("period", "body", m.Period); err != nil {
		return err
	}

	if m.Period != nil {
		if err := m.Period.Validate(formats); err != nil {
			if ve, ok := err.(*errors.Validation); ok {
				return ve.ValidateName("period")
			}
			return err
		}
	}

	return nil
}

func (m *CostResultByTime) validateTotal(formats strfmt.Registry) error {

	if err := validate.Required("total", "body", m.Total); err != nil {
		return err
	}

	if err := validate.MinLength("total", "body", string(*m.Total), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("total", "body", string(*m.Total), 30); err != nil {
		return err
	}

	if err := validate.Pattern("total", "body", string(*m.Total), `^[0-9]+.[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *CostResultByTime) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.MinLength("unit", "body", string(*m.Unit), 2); err != nil {
		return err
	}

	if err := validate.MaxLength("unit", "body", string(*m.Unit), 3); err != nil {
		return err
	}

	if err := validate.Pattern("unit", "body", string(*m.Unit), `^[a-zA-Z]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostResultByTime) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostResultByTime) UnmarshalBinary(b []byte) error {
	var res CostResultByTime
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
