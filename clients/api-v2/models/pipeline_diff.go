// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"encoding/json"
	"strconv"

	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// PipelineDiff PipelineDiff
//
// Represents a diff element of a PipelineDiffs.
// swagger:model PipelineDiff
type PipelineDiff struct {

	// Represents the diff of all configuration line for an element
	// Required: true
	Diff []*PipelineDiffRecord `json:"diff"`

	// Represents the name of the element in a pipeline. For example the job name for jobs section
	// Required: true
	Name *string `json:"name"`

	// Represents the status of the element (added, removed, changed)
	// Required: true
	// Enum: [added removed changed]
	Status *string `json:"status"`
}

// Validate validates this pipeline diff
func (m *PipelineDiff) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateDiff(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStatus(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *PipelineDiff) validateDiff(formats strfmt.Registry) error {

	if err := validate.Required("diff", "body", m.Diff); err != nil {
		return err
	}

	for i := 0; i < len(m.Diff); i++ {
		if swag.IsZero(m.Diff[i]) { // not required
			continue
		}

		if m.Diff[i] != nil {
			if err := m.Diff[i].Validate(formats); err != nil {
				if ve, ok := err.(*errors.Validation); ok {
					return ve.ValidateName("diff" + "." + strconv.Itoa(i))
				}
				return err
			}
		}

	}

	return nil
}

func (m *PipelineDiff) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

var pipelineDiffTypeStatusPropEnum []interface{}

func init() {
	var res []string
	if err := json.Unmarshal([]byte(`["added","removed","changed"]`), &res); err != nil {
		panic(err)
	}
	for _, v := range res {
		pipelineDiffTypeStatusPropEnum = append(pipelineDiffTypeStatusPropEnum, v)
	}
}

const (

	// PipelineDiffStatusAdded captures enum value "added"
	PipelineDiffStatusAdded string = "added"

	// PipelineDiffStatusRemoved captures enum value "removed"
	PipelineDiffStatusRemoved string = "removed"

	// PipelineDiffStatusChanged captures enum value "changed"
	PipelineDiffStatusChanged string = "changed"
)

// prop value enum
func (m *PipelineDiff) validateStatusEnum(path, location string, value string) error {
	if err := validate.Enum(path, location, value, pipelineDiffTypeStatusPropEnum); err != nil {
		return err
	}
	return nil
}

func (m *PipelineDiff) validateStatus(formats strfmt.Registry) error {

	if err := validate.Required("status", "body", m.Status); err != nil {
		return err
	}

	// value enum
	if err := m.validateStatusEnum("status", "body", *m.Status); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *PipelineDiff) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *PipelineDiff) UnmarshalBinary(b []byte) error {
	var res PipelineDiff
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
