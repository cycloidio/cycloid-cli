// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Worker Worker
//
// The entity which represents a worker in the application.
// swagger:model Worker
type Worker struct {

	// active containers
	// Required: true
	ActiveContainers *int64 `json:"active_containers"`

	// active volumes
	// Required: true
	ActiveVolumes *int64 `json:"active_volumes"`

	// ephemeral
	// Required: true
	Ephemeral *bool `json:"ephemeral"`

	// name
	// Required: true
	Name *string `json:"name"`

	// platform
	// Required: true
	Platform *string `json:"platform"`

	// start time
	// Required: true
	StartTime *int64 `json:"start_time"`

	// state
	// Required: true
	State *string `json:"state"`

	// tags
	Tags []string `json:"tags"`

	// team
	Team string `json:"team,omitempty"`

	// version
	// Required: true
	Version *string `json:"version"`
}

// Validate validates this worker
func (m *Worker) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateActiveContainers(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateActiveVolumes(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateEphemeral(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateName(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePlatform(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateStartTime(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateState(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateVersion(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Worker) validateActiveContainers(formats strfmt.Registry) error {

	if err := validate.Required("active_containers", "body", m.ActiveContainers); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateActiveVolumes(formats strfmt.Registry) error {

	if err := validate.Required("active_volumes", "body", m.ActiveVolumes); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateEphemeral(formats strfmt.Registry) error {

	if err := validate.Required("ephemeral", "body", m.Ephemeral); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateName(formats strfmt.Registry) error {

	if err := validate.Required("name", "body", m.Name); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validatePlatform(formats strfmt.Registry) error {

	if err := validate.Required("platform", "body", m.Platform); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateStartTime(formats strfmt.Registry) error {

	if err := validate.Required("start_time", "body", m.StartTime); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateState(formats strfmt.Registry) error {

	if err := validate.Required("state", "body", m.State); err != nil {
		return err
	}

	return nil
}

func (m *Worker) validateVersion(formats strfmt.Registry) error {

	if err := validate.Required("version", "body", m.Version); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Worker) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Worker) UnmarshalBinary(b []byte) error {
	var res Worker
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
