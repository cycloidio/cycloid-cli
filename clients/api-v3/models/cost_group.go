// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// CostGroup CostGroup
//
// This object contains the items described in https://docs.aws.amazon.com/sdk-for-go/api/service/costexplorer/#Group The groups hold the information about the price per key(s) for each iteration over the time range requested.
// swagger:model CostGroup
type CostGroup struct {

	// amount
	// Required: true
	// Max Length: 30
	// Min Length: 3
	// Pattern: ^[0-9]+.[0-9]+$
	Amount *string `json:"amount"`

	// keys
	// Required: true
	Keys []string `json:"keys"`

	// unit
	// Required: true
	// Max Length: 3
	// Min Length: 3
	// Pattern: ^[A-Z]+$
	Unit *string `json:"unit"`
}

// Validate validates this cost group
func (m *CostGroup) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateAmount(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateKeys(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateUnit(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *CostGroup) validateAmount(formats strfmt.Registry) error {

	if err := validate.Required("amount", "body", m.Amount); err != nil {
		return err
	}

	if err := validate.MinLength("amount", "body", string(*m.Amount), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("amount", "body", string(*m.Amount), 30); err != nil {
		return err
	}

	if err := validate.Pattern("amount", "body", string(*m.Amount), `^[0-9]+.[0-9]+$`); err != nil {
		return err
	}

	return nil
}

func (m *CostGroup) validateKeys(formats strfmt.Registry) error {

	if err := validate.Required("keys", "body", m.Keys); err != nil {
		return err
	}

	return nil
}

func (m *CostGroup) validateUnit(formats strfmt.Registry) error {

	if err := validate.Required("unit", "body", m.Unit); err != nil {
		return err
	}

	if err := validate.MinLength("unit", "body", string(*m.Unit), 3); err != nil {
		return err
	}

	if err := validate.MaxLength("unit", "body", string(*m.Unit), 3); err != nil {
		return err
	}

	if err := validate.Pattern("unit", "body", string(*m.Unit), `^[A-Z]+$`); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *CostGroup) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *CostGroup) UnmarshalBinary(b []byte) error {
	var res CostGroup
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
