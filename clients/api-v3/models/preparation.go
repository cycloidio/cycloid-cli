// Code generated by go-swagger; DO NOT EDIT.

package models

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	strfmt "github.com/go-openapi/strfmt"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/swag"
	"github.com/go-openapi/validate"
)

// Preparation Preparation
// swagger:model Preparation
type Preparation struct {

	// build id
	// Required: true
	BuildID *string `json:"build_id"`

	// inputs
	// Required: true
	Inputs interface{} `json:"inputs"`

	// inputs satisfied
	// Required: true
	InputsSatisfied interface{} `json:"inputs_satisfied"`

	// max running builds
	// Required: true
	MaxRunningBuilds *string `json:"max_running_builds"`

	// missing input reasons
	// Required: true
	MissingInputReasons interface{} `json:"missing_input_reasons"`

	// paused job
	// Required: true
	PausedJob *string `json:"paused_job"`

	// paused pipeline
	// Required: true
	PausedPipeline *string `json:"paused_pipeline"`
}

// Validate validates this preparation
func (m *Preparation) Validate(formats strfmt.Registry) error {
	var res []error

	if err := m.validateBuildID(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputs(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateInputsSatisfied(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMaxRunningBuilds(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validateMissingInputReasons(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePausedJob(formats); err != nil {
		res = append(res, err)
	}

	if err := m.validatePausedPipeline(formats); err != nil {
		res = append(res, err)
	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}

func (m *Preparation) validateBuildID(formats strfmt.Registry) error {

	if err := validate.Required("build_id", "body", m.BuildID); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validateInputs(formats strfmt.Registry) error {

	if err := validate.Required("inputs", "body", m.Inputs); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validateInputsSatisfied(formats strfmt.Registry) error {

	if err := validate.Required("inputs_satisfied", "body", m.InputsSatisfied); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validateMaxRunningBuilds(formats strfmt.Registry) error {

	if err := validate.Required("max_running_builds", "body", m.MaxRunningBuilds); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validateMissingInputReasons(formats strfmt.Registry) error {

	if err := validate.Required("missing_input_reasons", "body", m.MissingInputReasons); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validatePausedJob(formats strfmt.Registry) error {

	if err := validate.Required("paused_job", "body", m.PausedJob); err != nil {
		return err
	}

	return nil
}

func (m *Preparation) validatePausedPipeline(formats strfmt.Registry) error {

	if err := validate.Required("paused_pipeline", "body", m.PausedPipeline); err != nil {
		return err
	}

	return nil
}

// MarshalBinary interface implementation
func (m *Preparation) MarshalBinary() ([]byte, error) {
	if m == nil {
		return nil, nil
	}
	return swag.WriteJSON(m)
}

// UnmarshalBinary interface implementation
func (m *Preparation) UnmarshalBinary(b []byte) error {
	var res Preparation
	if err := swag.ReadJSON(b, &res); err != nil {
		return err
	}
	*m = res
	return nil
}
